<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdown 示例</title>
    <url>/2022/10/18/markdown-sample/</url>
    <content><![CDATA[<h2 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h2><p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h2 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h2><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></tbody></table></figure></div>

<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># H1</span><br><span class="line">## H2</span><br><span class="line">### H3</span><br><span class="line">#### H4</span><br><span class="line">##### H5</span><br><span class="line">###### H6</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h2><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="https://clistery.github.io/">本人博客</a> 的链接。</p>
<h2 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h2><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h2 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h2><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h2 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h2><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h2 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h2><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h2 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h2><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre>
<h2 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h2><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://cn.gravatar.com/userimage/185917535/6a87cb72111639876f34134e3589af12.jpg?size=100" alt="我的头像"></p>
<h2 id="10-删除线"><a href="#10-删除线" class="headerlink" title="10. 删除线"></a>10. 删除线</h2><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h2 id="11-加强的代码块"><a href="#11-加强的代码块" class="headerlink" title="11. 加强的代码块"></a>11. 加强的代码块</h2><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></tbody></table></figure></div>

<p>Python 示例：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">somefunc</span>(<span class="params">param1=<span class="string">''</span>, param2=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>JavaScript 示例：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) {</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) {</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">fib</span>(<span class="number">10</span>));</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h2><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h2 id="13-Html-标签"><a href="#13-Html-标签" class="headerlink" title="13. Html 标签"></a>13. Html 标签</h2><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>值班人员<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李强<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王平<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<table>
    <tbody><tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</tbody></table>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Google AOSP 源码获取</title>
    <url>/2022/10/19/android/aosp-get/</url>
    <content><![CDATA[<blockquote>
<p>AOSP，全称”Android Open Source Project”，中文意为”Android 开放源代码项目”。发起者是谷歌，主要用途是移动设备的系统。</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装-REPO"><a href="#安装-REPO" class="headerlink" title="安装 REPO"></a>安装 REPO</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:$PATH</span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如果上述 URL 不可访问，可以用下面的：</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># curl -sSL  'https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/master/repo?format=TEXT' |base64 -d &gt; ~/bin/repo</span></span></span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="下载每月更新的初始化包"><a href="#下载每月更新的初始化包" class="headerlink" title="下载每月更新的初始化包"></a>下载每月更新的初始化包</h2><p>由于大陆受到 GFW 的限制，所以直接访问 Google 代码仓库会受到限制，所以这里我们通过 Mirror 镜像加速</p>
<blockquote>
<p>这里我们使用 科大源 的镜像仓库<br><code>第一次同步数据量特别大，如果网络不稳定，中间失败就要从头再来了。所以我们提供了打包的 AOSP 镜像，为一个 tar 包，大约 200G（单文件 200G，注意你的磁盘格式要支持）。这样你 就可以通过 HTTP(S) 的方式下载，该方法支持断点续传。</code></p>
</blockquote>
<ul>
<li><a class="link" href="https://mirrors.ustc.edu.cn/aosp-monthly/">下载地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p><em>注意！下载完成后请检查 checksum 是否匹配，避免重复操作</em></p>
<ul>
<li>下载完成后解压到有 200G 可用空间的分区即可</li>
</ul>
<h2 id="同步代码"><a href="#同步代码" class="headerlink" title="同步代码"></a>同步代码</h2><h3 id="设置分支"><a href="#设置分支" class="headerlink" title="设置分支"></a>设置分支</h3><ul>
<li><p>默认同步 master 分支</p>
</li>
<li><p>可以通过指定版本的方式切换分支</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">repo init -b android-13.0.0_r11</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li><p><a class="link" href="https://source.android.com/source/build-numbers.html#source-code-tags-and-builds">Android 版本列表 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
</li>
<li><p>也可以通过查看分支的方式本地查看版本号</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd .repo/manifests</span><br><span class="line">git branch -avv</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
<li><p>首次切换完成后可能会报错，可以无视，我们只需要检查 manifest 文件查看是否切换成功<br><code>cat .repo/manifests.git/config</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[branch "default"]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/android-13.0.0_r11 # 这里原本是 master</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
<h3 id="同步拉取"><a href="#同步拉取" class="headerlink" title="同步拉取"></a>同步拉取</h3><ul>
<li>通过 <code>repo sync</code> 命令进行同步就可以完成最后的代码拉取</li>
</ul>
<h2 id="REPO-命令"><a href="#REPO-命令" class="headerlink" title="REPO 命令"></a>REPO 命令</h2><h3 id="开启本地分支"><a href="#开启本地分支" class="headerlink" title="开启本地分支"></a>开启本地分支</h3><p><code>repo start my_branch --all</code></p>
<h3 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h3><p><code>repo branches</code></p>
<h3 id="丢弃本地改动"><a href="#丢弃本地改动" class="headerlink" title="丢弃本地改动"></a>丢弃本地改动</h3><p><code>repo forall -c git reset --hard</code></p>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p><code>repo checkout my_branch1</code></p>
<h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p><code>repo status</code></p>
<h3 id="同步指定的项目"><a href="#同步指定的项目" class="headerlink" title="同步指定的项目"></a>同步指定的项目</h3><p><code>repo sync platform/prebuilts/rust</code></p>
<ul>
<li>可以通过查看 <code>.repo/manifests/default.xml</code> 文件获取到项目名</li>
</ul>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul>
<li>查看 repo 运行过程中执行的 git 命令<br><code>export REPO_TRACE=1</code></li>
</ul>
]]></content>
      <categories>
        <category>aosp</category>
      </categories>
      <tags>
        <tag>google</tag>
        <tag>android</tag>
        <tag>aosp</tag>
        <tag>repo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何清除 Android Button 中自带的 padding</title>
    <url>/2022/10/19/android/button-without-padding/</url>
    <content><![CDATA[<blockquote>
<p>去除 Android 自带的 padding 效果有两种方式</p>
</blockquote>
<ol>
<li><p>布局文件中去除</p>
  <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingStart</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingEnd</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:minHeight</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:minWidth</span>=<span class="string">"0dp"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>代码去除</p>
  <div class="highlight-container" data-rel="Kotlin"><figure class="iseeu highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">btn.minimumHeight = <span class="number">0</span></span><br><span class="line">btn.minimumWidth = <span class="number">0</span></span><br><span class="line">btn.minWidth = <span class="number">0</span></span><br><span class="line">btn.minHeight = <span class="number">0</span></span><br><span class="line">btn.setPadding(<span class="number">0</span>)</span><br><span class="line">it.layoutParams = it.layoutParams.apply {</span><br><span class="line">    width = -<span class="number">2</span></span><br><span class="line">    height = -<span class="number">2</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>widgets</tag>
      </tags>
  </entry>
  <entry>
    <title>修补 Honor Note10 内核</title>
    <url>/2024/12/31/android/honor-note10-kirin970-fix-kernel/</url>
    <content><![CDATA[<blockquote>
<p>本文将以 Honor Note10 作为测试平台，介绍如何修改内核配置，以及如何在 docker 环境下编译内核，最后启用 SELinux 的 permissive 模式。</p>
</blockquote>
<h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><ul>
<li>docker-compose version 1.27.4</li>
<li>Ubuntu 18.04.6 LTS</li>
<li>Honor Note10<ul>
<li>Model: RVL-AL09</li>
<li>Root: Magisk 28.1</li>
<li>Core: HiSilicon Kirin970</li>
<li>Kernel: 4.9.148</li>
<li>Security Patch: 2019-12-1</li>
</ul>
</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>Kernel Source Code<ul>
<li><a class="link" href="https://consumer.huawei.com/en/opensource/">Huawei Open Source Release Center <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
<li>Magisk Tools<ul>
<li><a class="link" href="https://github.com/topjohnwu/Magisk">magiskboot 28.1 [x86_64] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
<li>Android NDK<ul>
<li><a class="link" href="https://dl.google.com/android/repository/android-ndk-r16-beta1-linux-x86_64.zip?utm_source=androiddevtools&amp;utm_medium=website">android-ndk-r16-beta1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
<h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><ol>
<li><p>建立工作目录</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir Code_Opensource</span><br><span class="line">mkdir software</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>将 Kernel Source Code 解压到 <code>Code_Opensource</code> 目录</li>
<li>将 magiskboot 放到到 <code>software/magisk/</code> 目录</li>
<li>将 Android NDK 解压到 <code>software/android-ndk-r16-beta1/</code> 目录</li>
</ul>
</li>
<li><p>创建容器</p>
<ul>
<li><p>创建 docker-compose.yml</p>
  <div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.8'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ubuntu:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ubuntu:bionic</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">bionic</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">tail</span> <span class="string">-f</span> <span class="string">/dev/null</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">${PWD}/Code_Opensource:/code:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">${PWD}/software:/software:rw</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>启动容器</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
</ol>
<h3 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h3><ol>
<li><p>修改内核配置</p>
<ul>
<li><p>Code_Opensource/kernel/arch/arm64/configs/merge_kirin970_defconfig</p>
  <div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># CONFIG_SECURITY_SELINUX_DEVELOP is not set</span></span><br><span class="line">CONFIG_SECURITY_SELINUX_DEVELOP=y</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
<li><p>编译内核</p>
<ul>
<li><p>配置编译环境</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置镜像源</span></span><br><span class="line">sed -i 's/http:\/\/archive.ubuntu.com/http:\/\/mirrors.aliyun.com/g' /etc/apt/sources.list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装编译依赖</span></span><br><span class="line">sudo apt install -y build-essential dc python</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量</span></span><br><span class="line">export PATH=/software/android-ndk-r16-beta1/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin:$PATH</span><br><span class="line">export CROSS_COMPILE=aarch64-linux-android-</span><br><span class="line">export ARCH=arm64</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CC（GNU Compiler Collection）编译器的彩色输出</span></span><br><span class="line">export GCC_COLORS=auto</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>查看原始内核信息</p>
<ul>
<li><p>获取内核镜像</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看内核挂载点</span></span><br><span class="line">adb shell "su -c 'ls -al /dev/block/platform/ff3c0000.ufs/by-name/kernel'"</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份 kernel 镜像</span></span><br><span class="line">adb shell "su -c 'dd if=/dev/block/xxx of=/sdcard/Download/kernel.img'"</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取 kernel 镜像</span></span><br><span class="line">adb pull /sdcard/Download/kernel.img software/magisk/</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>解包原始内核</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd software/magisk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解包，同时记录下日志信息</span></span><br><span class="line">./magiskboot unpack -n kernel.img</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li><p>日志信息</p>
  <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Parsing boot image: [kernel.img]</span><br><span class="line">HEADER_VER      [1]</span><br><span class="line">KERNEL_SZ       [15263371]</span><br><span class="line">RAMDISK_SZ      [336956]</span><br><span class="line">SECOND_SZ       [0]</span><br><span class="line">RECOV_DTBO_SZ   [0]</span><br><span class="line">OS_VERSION      [9.0.0]</span><br><span class="line">OS_PATCH_LEVEL  [2019-12]</span><br><span class="line">PAGESIZE        [2048]</span><br><span class="line">NAME            []</span><br><span class="line">CMDLINE         [loglevel=4 initcall_debug=n page_tracker=on unmovable_isolate1=2:192M,3:224M,4:256M printktimer=0xfff0a000,0x534,0x538 androidboot.selinux=enforcing buildvariant=user]</span><br><span class="line">CHECKSUM        [8756a966a7b8957fa7e2742a28355059cd255ab9000000000000000000000000]</span><br><span class="line">KERNEL_FMT      [gzip]</span><br><span class="line">RAMDISK_FMT     [raw]</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
</ul>
</li>
<li><p>编译内核</p>
<blockquote>
<p>仔细看注释信息!!!<br>仔细看注释信息!!!<br>仔细看注释信息!!!</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /code/out</span><br><span class="line">cd /code/kernel</span><br><span class="line">make ARCH=arm64 O=/code/out merge_kirin970_defconfig</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果下面这条命令失败，可以重新执行或修改 -j 参数</span></span><br><span class="line">make ARCH=arm64 O=/code/out -j32</span><br><span class="line">cp -f /code/out/arch/arm64/boot/Image.gz /code/kernel/tools</span><br><span class="line">cd /code/kernel/tools</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--cmdline 参数使用解包后的 CMDLINE，同时修改 androidboot.selinux=enforcing 为 androidboot.selinux=permissive</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--os_patch_level 只能使用 YYYY-MM-DD 格式并且只能等于或大于手机的安全补丁日期</span></span><br><span class="line">./mkbootimg --kernel Image.gz --base 0x0 \</span><br><span class="line">--cmdline "loglevel=4 initcall_debug=n page_tracker=on unmovable_isolate1=2:192M,3:224M,4:256M printktimer=0xfff0a000,0x534,0x538 androidboot.selinux=permissive buildvariant=user" \</span><br><span class="line">--tags_offset 0x07A00000 --kernel_offset 0x00080000 --ramdisk_offset 0x07C00000 \</span><br><span class="line">--header_version 1 --os_version 9 --os_patch_level 2019-12-01 \</span><br><span class="line">--output kernel-permissive.img</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
</ol>
<h3 id="打包内核"><a href="#打包内核" class="headerlink" title="打包内核"></a>打包内核</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd /software/magisk</span><br><span class="line">mv /code/kernel/tools/kernel-permissive.img ./</span><br><span class="line">./magiskboot repack -n kernel-permissive.img</span><br><span class="line">ls new-boot.img -al</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="刷入内核"><a href="#刷入内核" class="headerlink" title="刷入内核"></a>刷入内核</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot flash kernel new-boot.img</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="启用-SELinux"><a href="#启用-SELinux" class="headerlink" title="启用 SELinux"></a>启用 SELinux</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">adb shell "su -c 'setenforce 0'"</span><br><span class="line">adb shell "su -c 'getenforce'"</span><br></pre></td></tr></tbody></table></figure></div>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>huawei</tag>
        <tag>kernel</tag>
        <tag>make</tag>
        <tag>magisk</tag>
        <tag>root</tag>
        <tag>frida</tag>
        <tag>lsposed</tag>
        <tag>hook</tag>
        <tag>docker</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Android strings.xml 中支持的特殊字符</title>
    <url>/2023/03/13/android/strings/</url>
    <content><![CDATA[<blockquote>
<p>要在 string.xml 中显示特殊符号、如@号冒号等、直接写会显示乱码，必须要改为 ASCII 十进制交换编码书写</p>
</blockquote>
<h2 id="编码对照表"><a href="#编码对照表" class="headerlink" title="编码对照表"></a>编码对照表</h2><table>
<thead>
<tr>
<th>编码</th>
<th>字符</th>
</tr>
</thead>
<tbody><tr>
<td>@</td>
<td>@</td>
</tr>
<tr>
<td>:</td>
<td>:</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>(空格)</td>
</tr>
<tr>
<td> </td>
<td>(空格)</td>
</tr>
<tr>
<td>!</td>
<td>!</td>
</tr>
<tr>
<td>"</td>
<td>“</td>
</tr>
<tr>
<td>#</td>
<td>#</td>
</tr>
<tr>
<td>$</td>
<td>$</td>
</tr>
<tr>
<td>%</td>
<td>%</td>
</tr>
<tr>
<td>&amp;</td>
<td>&amp;</td>
</tr>
<tr>
<td>'</td>
<td>´</td>
</tr>
<tr>
<td>(</td>
<td>(</td>
</tr>
<tr>
<td>)</td>
<td>)</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>+</td>
<td>+</td>
</tr>
<tr>
<td>,</td>
<td>,</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>.</td>
<td>.</td>
</tr>
<tr>
<td>/</td>
<td>/</td>
</tr>
<tr>
<td>:</td>
<td>:</td>
</tr>
<tr>
<td>;</td>
<td>;</td>
</tr>
<tr>
<td>&lt;</td>
<td>&lt;</td>
</tr>
<tr>
<td>=</td>
<td>=</td>
</tr>
<tr>
<td>&gt;</td>
<td>&gt;</td>
</tr>
<tr>
<td>?</td>
<td>?</td>
</tr>
<tr>
<td>@</td>
<td>@</td>
</tr>
<tr>
<td>[</td>
<td>[</td>
</tr>
<tr>
<td>]</td>
<td>]</td>
</tr>
<tr>
<td>^</td>
<td>^</td>
</tr>
<tr>
<td>_</td>
<td>_</td>
</tr>
<tr>
<td>`</td>
<td>`</td>
</tr>
<tr>
<td>{</td>
<td>{</td>
</tr>
<tr>
<td>|</td>
<td></td>
</tr>
<tr>
<td>}</td>
<td>}</td>
</tr>
<tr>
<td>~</td>
<td>~</td>
</tr>
<tr>
<td>¡</td>
<td>¡</td>
</tr>
<tr>
<td>¢</td>
<td>¢</td>
</tr>
<tr>
<td>£</td>
<td>£</td>
</tr>
<tr>
<td>¤</td>
<td>¤</td>
</tr>
<tr>
<td>¥</td>
<td>¥</td>
</tr>
<tr>
<td>¦</td>
<td>¦</td>
</tr>
<tr>
<td>§</td>
<td>§</td>
</tr>
<tr>
<td>¨</td>
<td>¨</td>
</tr>
<tr>
<td>©</td>
<td>©</td>
</tr>
<tr>
<td>ª</td>
<td>ª</td>
</tr>
<tr>
<td>«</td>
<td>«</td>
</tr>
<tr>
<td>¬</td>
<td>¬</td>
</tr>
<tr>
<td>­</td>
<td>­</td>
</tr>
<tr>
<td>®</td>
<td>®</td>
</tr>
<tr>
<td>¯</td>
<td>¯</td>
</tr>
<tr>
<td>°</td>
<td>°</td>
</tr>
<tr>
<td>±</td>
<td>±</td>
</tr>
<tr>
<td>²</td>
<td>²</td>
</tr>
<tr>
<td>³</td>
<td>³</td>
</tr>
<tr>
<td>´</td>
<td>´</td>
</tr>
<tr>
<td>µ</td>
<td>µ</td>
</tr>
<tr>
<td>¶</td>
<td>¶</td>
</tr>
<tr>
<td>·</td>
<td>•</td>
</tr>
<tr>
<td>¸</td>
<td>¸</td>
</tr>
<tr>
<td>¹</td>
<td>¹</td>
</tr>
<tr>
<td>º</td>
<td>º</td>
</tr>
<tr>
<td>»</td>
<td>»</td>
</tr>
<tr>
<td>¼</td>
<td>¼</td>
</tr>
<tr>
<td>½</td>
<td>½</td>
</tr>
<tr>
<td>¾</td>
<td>¾</td>
</tr>
<tr>
<td>¿</td>
<td>¿</td>
</tr>
<tr>
<td>À</td>
<td>À</td>
</tr>
<tr>
<td>Á</td>
<td>Á</td>
</tr>
<tr>
<td>Â</td>
<td>Â</td>
</tr>
<tr>
<td>Ã</td>
<td>Ã</td>
</tr>
<tr>
<td>Ä</td>
<td>Ä</td>
</tr>
<tr>
<td>Å</td>
<td>Å</td>
</tr>
<tr>
<td>Æ</td>
<td>Æ</td>
</tr>
<tr>
<td>Ç</td>
<td>Ç</td>
</tr>
<tr>
<td>È</td>
<td>È</td>
</tr>
<tr>
<td>É</td>
<td>É</td>
</tr>
<tr>
<td>Ê</td>
<td>Ê</td>
</tr>
<tr>
<td>Ë</td>
<td>Ë</td>
</tr>
<tr>
<td>Ì</td>
<td>Ì</td>
</tr>
<tr>
<td>Í</td>
<td>Í</td>
</tr>
<tr>
<td>Î</td>
<td>Î</td>
</tr>
<tr>
<td>Ï</td>
<td>Ï</td>
</tr>
<tr>
<td>Ð</td>
<td>Ð</td>
</tr>
<tr>
<td>Ñ</td>
<td>Ñ</td>
</tr>
<tr>
<td>Ò</td>
<td>Ò</td>
</tr>
<tr>
<td>Ó</td>
<td>Ó</td>
</tr>
<tr>
<td>Ô</td>
<td>Ô</td>
</tr>
<tr>
<td>Õ</td>
<td>Õ</td>
</tr>
<tr>
<td>Ö</td>
<td>Ö</td>
</tr>
<tr>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>Ø</td>
<td>Ø</td>
</tr>
<tr>
<td>Ù</td>
<td>Ù</td>
</tr>
<tr>
<td>Ú</td>
<td>Ú</td>
</tr>
<tr>
<td>Û</td>
<td>Û</td>
</tr>
<tr>
<td>Ü</td>
<td>Ü</td>
</tr>
<tr>
<td>Ý</td>
<td>Ý</td>
</tr>
<tr>
<td>Þ</td>
<td>Þ</td>
</tr>
<tr>
<td>ß</td>
<td>ß</td>
</tr>
<tr>
<td>à</td>
<td>à</td>
</tr>
<tr>
<td>á</td>
<td>á</td>
</tr>
<tr>
<td>â</td>
<td>â</td>
</tr>
<tr>
<td>ã</td>
<td>ã</td>
</tr>
<tr>
<td>ä</td>
<td>ä</td>
</tr>
<tr>
<td>å</td>
<td>å</td>
</tr>
<tr>
<td>æ</td>
<td>æ</td>
</tr>
<tr>
<td>ç</td>
<td>ç</td>
</tr>
<tr>
<td>è</td>
<td>è</td>
</tr>
<tr>
<td>é</td>
<td>é</td>
</tr>
<tr>
<td>ê</td>
<td>ê</td>
</tr>
<tr>
<td>ë</td>
<td>ë</td>
</tr>
<tr>
<td>ì</td>
<td>ì</td>
</tr>
<tr>
<td>í</td>
<td>í</td>
</tr>
<tr>
<td>î</td>
<td>î</td>
</tr>
<tr>
<td>ï</td>
<td>ï</td>
</tr>
<tr>
<td>ð</td>
<td>ð</td>
</tr>
<tr>
<td>ñ</td>
<td>ñ</td>
</tr>
<tr>
<td>ò</td>
<td>ò</td>
</tr>
<tr>
<td>ó</td>
<td>ó</td>
</tr>
<tr>
<td>ô</td>
<td>ô</td>
</tr>
<tr>
<td>õ</td>
<td>õ</td>
</tr>
<tr>
<td>ö</td>
<td>ö</td>
</tr>
<tr>
<td>÷</td>
<td>÷</td>
</tr>
<tr>
<td>ø</td>
<td>ø</td>
</tr>
<tr>
<td>ù</td>
<td>ù</td>
</tr>
<tr>
<td>ú</td>
<td>ú</td>
</tr>
<tr>
<td>û</td>
<td>û</td>
</tr>
<tr>
<td>ü</td>
<td>ü</td>
</tr>
<tr>
<td>ý</td>
<td>ý</td>
</tr>
<tr>
<td>þ</td>
<td>þ</td>
</tr>
<tr>
<td>ÿ</td>
<td>ÿ</td>
</tr>
<tr>
<td>Ā</td>
<td>Ā</td>
</tr>
<tr>
<td>ā</td>
<td>ā</td>
</tr>
<tr>
<td>Ă</td>
<td>Ă</td>
</tr>
<tr>
<td>ă</td>
<td>ă</td>
</tr>
<tr>
<td>Ą</td>
<td>Ą</td>
</tr>
<tr>
<td>ą</td>
<td>ą</td>
</tr>
<tr>
<td>Ć</td>
<td>Ć</td>
</tr>
<tr>
<td>ć</td>
<td>ć</td>
</tr>
<tr>
<td>Ĉ</td>
<td>Ĉ</td>
</tr>
<tr>
<td>ĉ</td>
<td>ĉ</td>
</tr>
<tr>
<td>Ċ</td>
<td>Ċ</td>
</tr>
<tr>
<td>ċ</td>
<td>ċ</td>
</tr>
<tr>
<td>Č</td>
<td>Č</td>
</tr>
<tr>
<td>č</td>
<td>č</td>
</tr>
<tr>
<td>Ď</td>
<td>Ď</td>
</tr>
<tr>
<td>ď</td>
<td>ď</td>
</tr>
<tr>
<td>Đ</td>
<td>Đ</td>
</tr>
<tr>
<td>đ</td>
<td>đ</td>
</tr>
<tr>
<td>Ē</td>
<td>Ē</td>
</tr>
<tr>
<td>ē</td>
<td>ē</td>
</tr>
<tr>
<td>Ĕ</td>
<td>Ĕ</td>
</tr>
<tr>
<td>ĕ</td>
<td>ĕ</td>
</tr>
<tr>
<td>Ė</td>
<td>Ė</td>
</tr>
<tr>
<td>ė</td>
<td>ė</td>
</tr>
<tr>
<td>Ę</td>
<td>Ę</td>
</tr>
<tr>
<td>ę</td>
<td>ę</td>
</tr>
<tr>
<td>Ě</td>
<td>Ě</td>
</tr>
<tr>
<td>ě</td>
<td>ě</td>
</tr>
<tr>
<td>Ĝ</td>
<td>Ĝ</td>
</tr>
<tr>
<td>ĝ</td>
<td>ĝ</td>
</tr>
<tr>
<td>Ğ</td>
<td>Ğ</td>
</tr>
<tr>
<td>ğ</td>
<td>ğ</td>
</tr>
<tr>
<td>Ġ</td>
<td>Ġ</td>
</tr>
<tr>
<td>ġ</td>
<td>ġ</td>
</tr>
<tr>
<td>Ģ</td>
<td>Ģ</td>
</tr>
<tr>
<td>ģ</td>
<td>ģ</td>
</tr>
<tr>
<td>Ĥ</td>
<td>Ĥ</td>
</tr>
<tr>
<td>ĥ</td>
<td>ĥ</td>
</tr>
<tr>
<td>Ħ</td>
<td>Ħ</td>
</tr>
<tr>
<td>ħ</td>
<td>ħ</td>
</tr>
<tr>
<td>Ĩ</td>
<td>Ĩ</td>
</tr>
<tr>
<td>ĩ</td>
<td>ĩ</td>
</tr>
<tr>
<td>Ī</td>
<td>Ī</td>
</tr>
<tr>
<td>ī</td>
<td>ī</td>
</tr>
<tr>
<td>Ĭ</td>
<td>Ĭ</td>
</tr>
<tr>
<td>ĭ</td>
<td>ĭ</td>
</tr>
<tr>
<td>Į</td>
<td>Į</td>
</tr>
<tr>
<td>į</td>
<td>į</td>
</tr>
<tr>
<td>İ</td>
<td>İ</td>
</tr>
<tr>
<td>ı</td>
<td>ı</td>
</tr>
<tr>
<td>Ĳ</td>
<td>Ĳ</td>
</tr>
<tr>
<td>ĳ</td>
<td>ĳ</td>
</tr>
<tr>
<td>Ĵ</td>
<td>Ĵ</td>
</tr>
<tr>
<td>ĵ</td>
<td>ĵ</td>
</tr>
<tr>
<td>Ķ</td>
<td>Ķ</td>
</tr>
<tr>
<td>ķ</td>
<td>ķ</td>
</tr>
<tr>
<td>ĸ</td>
<td>ĸ</td>
</tr>
<tr>
<td>Ĺ</td>
<td>Ĺ</td>
</tr>
<tr>
<td>ĺ</td>
<td>ĺ</td>
</tr>
<tr>
<td>Ļ</td>
<td>Ļ</td>
</tr>
<tr>
<td>ļ</td>
<td>ļ</td>
</tr>
<tr>
<td>Ľ</td>
<td>Ľ</td>
</tr>
<tr>
<td>ľ</td>
<td>ľ</td>
</tr>
<tr>
<td>Ŀ</td>
<td>Ŀ</td>
</tr>
<tr>
<td>ŀ</td>
<td>ŀ</td>
</tr>
<tr>
<td>Ł</td>
<td>Ł</td>
</tr>
<tr>
<td>ł</td>
<td>ł</td>
</tr>
<tr>
<td>Ń</td>
<td>Ń</td>
</tr>
<tr>
<td>ń</td>
<td>ń</td>
</tr>
<tr>
<td>Ņ</td>
<td>Ņ</td>
</tr>
<tr>
<td>ņ</td>
<td>ņ</td>
</tr>
<tr>
<td>Ň</td>
<td>Ň</td>
</tr>
<tr>
<td>ň</td>
<td>ň</td>
</tr>
<tr>
<td>ŉ</td>
<td>ŉ</td>
</tr>
<tr>
<td>Ŋ</td>
<td>Ŋ</td>
</tr>
<tr>
<td>ŋ</td>
<td>ŋ</td>
</tr>
<tr>
<td>Ō</td>
<td>Ō</td>
</tr>
<tr>
<td>ō</td>
<td>ō</td>
</tr>
<tr>
<td>Ŏ</td>
<td>Ŏ</td>
</tr>
<tr>
<td>ŏ</td>
<td>ŏ</td>
</tr>
<tr>
<td>Ő</td>
<td>Ő</td>
</tr>
<tr>
<td>ő</td>
<td>ő</td>
</tr>
<tr>
<td>Œ</td>
<td>Œ</td>
</tr>
<tr>
<td>œ</td>
<td>œ</td>
</tr>
<tr>
<td>Ŕ</td>
<td>Ŕ</td>
</tr>
<tr>
<td>ŕ</td>
<td>ŕ</td>
</tr>
<tr>
<td>Ŗ</td>
<td>Ŗ</td>
</tr>
<tr>
<td>ŗ</td>
<td>ŗ</td>
</tr>
<tr>
<td>Ř</td>
<td>Ř</td>
</tr>
<tr>
<td>ř</td>
<td>ř</td>
</tr>
<tr>
<td>Ś</td>
<td>Ś</td>
</tr>
<tr>
<td>ś</td>
<td>ś</td>
</tr>
<tr>
<td>Ŝ</td>
<td>Ŝ</td>
</tr>
<tr>
<td>ŝ</td>
<td>ŝ</td>
</tr>
<tr>
<td>Ş</td>
<td>Ş</td>
</tr>
<tr>
<td>ş</td>
<td>ş</td>
</tr>
<tr>
<td>Š</td>
<td>Š</td>
</tr>
<tr>
<td>š</td>
<td>š</td>
</tr>
<tr>
<td>Ţ</td>
<td>Ţ</td>
</tr>
<tr>
<td>ţ</td>
<td>ţ</td>
</tr>
<tr>
<td>Ť</td>
<td>Ť</td>
</tr>
<tr>
<td>ť</td>
<td>ť</td>
</tr>
<tr>
<td>Ŧ</td>
<td>Ŧ</td>
</tr>
<tr>
<td>ŧ</td>
<td>ŧ</td>
</tr>
<tr>
<td>Ũ</td>
<td>Ũ</td>
</tr>
<tr>
<td>ũ</td>
<td>ũ</td>
</tr>
<tr>
<td>Ū</td>
<td>Ū</td>
</tr>
<tr>
<td>ū</td>
<td>ū</td>
</tr>
<tr>
<td>Ŭ</td>
<td>Ŭ</td>
</tr>
<tr>
<td>ŭ</td>
<td>ŭ</td>
</tr>
<tr>
<td>Ů</td>
<td>Ů</td>
</tr>
<tr>
<td>ů</td>
<td>ů</td>
</tr>
<tr>
<td>Ű</td>
<td>Ű</td>
</tr>
<tr>
<td>ű</td>
<td>ű</td>
</tr>
<tr>
<td>Ų</td>
<td>Ų</td>
</tr>
<tr>
<td>ų</td>
<td>ų</td>
</tr>
<tr>
<td>Ŵ</td>
<td>Ŵ</td>
</tr>
<tr>
<td>ŵ</td>
<td>ŵ</td>
</tr>
<tr>
<td>Ŷ</td>
<td>Ŷ</td>
</tr>
<tr>
<td>ŷ</td>
<td>ŷ</td>
</tr>
<tr>
<td>Ÿ</td>
<td>Ÿ</td>
</tr>
<tr>
<td>Ź</td>
<td>Ź</td>
</tr>
<tr>
<td>ź</td>
<td>ź</td>
</tr>
<tr>
<td>Ż</td>
<td>Ż</td>
</tr>
<tr>
<td>ż</td>
<td>ż</td>
</tr>
<tr>
<td>Ž</td>
<td>Ž</td>
</tr>
<tr>
<td>ž</td>
<td>ž</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>strings</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年 Apple Developer Enterprise Program 续订审核</title>
    <url>/2023/02/23/apple/2023-apple-developer-enterprise-program/</url>
    <content><![CDATA[<blockquote>
<p>又到了一年一度的 Apple 企业级开发帐号的续费了，随之而来的就是帐号续订资格的审核，这里只能说一句，13事儿真多，审核这种东西真的有用？意思人家搞灰产的会给你在里面填：“噢，亲爱的库克，真是不好意思，我拿着你的资源搞了灰产，请你给我审核通过一下哦~”，此处应有掌声。我只想说给你钱还搞那么多逼事儿，真是恶心死人不偿命。</p>
</blockquote>
<h2 id="步骤详解"><a href="#步骤详解" class="headerlink" title="步骤详解"></a>步骤详解</h2><h3 id="Your-Organization"><a href="#Your-Organization" class="headerlink" title="Your Organization"></a>Your Organization</h3><ul>
<li><p>Which best describes your entity? <code>组织的类型</code></p>
<ul>
<li>如实填写</li>
</ul>
</li>
<li><p>Is this the correct name of your organization? <code>组织的名称是否正确</code></p>
<ul>
<li>Yes</li>
</ul>
</li>
<li><p>Is this the correct URL for your organization’s website? <code>组织官网是否正确</code></p>
<ul>
<li>Yes</li>
</ul>
</li>
<li><p>Is this your correct email address? <code>电子邮件地址是否正确</code></p>
<ul>
<li>Yes</li>
</ul>
</li>
<li><p>Are you an employee of the organization? <code>你是否为该组织员工</code></p>
<ul>
<li>Yes</li>
</ul>
</li>
<li><p>Do you have the authority to accept legal agreements on behalf of your organization? <code>你是否有权代为接受法律协议</code></p>
<ul>
<li>Yes</li>
</ul>
</li>
<li><p><code>重点！！！</code>How many employees does your organization have? <code>该组织的员工数量</code></p>
<ul>
<li>这里必须选择大于 100 人的选项，否则你就会收到 库克 ♂ 你 的邮件！<br><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/2023_APEP_error_1.png" alt="库克 ♂ 你"></li>
</ul>
</li>
<li><p>Briefly describe your organization’s primary industry. <code>描述该组织的经营范围</code></p>
<ul>
<li>如实填写</li>
</ul>
</li>
</ul>
<h3 id="App-Development"><a href="#App-Development" class="headerlink" title="App Development"></a>App Development</h3><ul>
<li><p>Tell us about an app you’ve developed or distributed through the program that’s been used for at least 6 months. Describe the app’s purpose and functionality, and how frequently it’s used. Include the bundle identifier. <code>告诉我们您通过该计划开发或分发的应用，该应用已使用至少 6 个月。描述应用的用途和功能，以及使用频率。包括捆绑标识符。</code></p>
<ul>
<li>如实填写</li>
</ul>
</li>
<li><p>Who builds your in-house apps? <code>由谁生成应用程序</code></p>
<ul>
<li>Employees</li>
</ul>
</li>
<li><p>How many employees are on your internal app development team? <code>开发团队成员数量</code></p>
<ul>
<li>1-29</li>
</ul>
</li>
<li><p>How many enterprise apps have you built or are you currently building? <code>已构建或正在构建的应用数量</code></p>
<ul>
<li>1-9</li>
</ul>
</li>
<li><p>Do you own the intellectual property rights for all of your in-house apps? <code>是否拥有所有内部应用程序的知识产权？</code></p>
<ul>
<li>Yes</li>
</ul>
</li>
<li><p>Do you own the source code for all of your in-house apps? <code>是否拥有所有内部应用程序的源代码？</code></p>
<ul>
<li>Yes</li>
</ul>
</li>
<li><p>Are you currently developing or distributing enterprise apps for macOS? <code>目前正在开发或分发适用于 macOS 的企业应用程序吗？</code></p>
<ul>
<li>Yes</li>
</ul>
</li>
</ul>
<h3 id="App-Distribution-and-Code-Sharing"><a href="#App-Distribution-and-Code-Sharing" class="headerlink" title="App Distribution and Code Sharing"></a>App Distribution and Code Sharing</h3><ul>
<li><p>Do you re-sign compiled apps from other developers to use within your organization? <code>是否对来自其他开发人员的已编译应用重新签名以在组织内使用？</code></p>
<ul>
<li>No</li>
</ul>
</li>
<li><p>Do you act as an app development contractor for other organizations? <code>您是否担任其他组织的应用程序开发承包商？</code></p>
<ul>
<li>No</li>
</ul>
</li>
<li><p>Who are your app’s users? <code>谁是应用的用户？</code></p>
<ul>
<li>Employees within your organization</li>
</ul>
</li>
<li><p>Describe in detail how you distribute your apps to users. <code>详细描述如何将应用分发给用户</code></p>
<ul>
<li>描述分发过程</li>
</ul>
</li>
<li><p>To how many devices does your organization distribute apps using this program? <code>您的组织使用此程序向多少台设备分发应用程序？</code></p>
<ul>
<li>尽量多</li>
</ul>
</li>
</ul>
<h3 id="Security-and-App-Testing"><a href="#Security-and-App-Testing" class="headerlink" title="Security and App Testing"></a>Security and App Testing</h3><ul>
<li><p>What mechanisms have you put in place to ensure your apps can only be installed by your employees and permitted users? <code>你采取了哪些机制来确保你的应用只能由你的员工和允许的用户安装？</code></p>
<ul>
<li>如实填写</li>
</ul>
</li>
<li><p>Have you ever shared the sign in credentials of the Account Holder with others, including contractors or coworkers? <code>您是否曾经与其他人（包括承包商或同事）共享帐户持有人的登录凭据？</code></p>
<ul>
<li>No</li>
</ul>
</li>
<li><p>Who has access to the sign in credentials of the Account Holder? <code>谁有权访问帐户持有人的登录凭据？</code></p>
<ul>
<li>Account holders</li>
</ul>
</li>
<li><p>Who has access to your Enterprise App Distribution Certificates? <code>谁有权访问您的企业应用分发证书？</code></p>
<ul>
<li>Account holders and authorized developers</li>
</ul>
</li>
<li><p>How do you monitor and control access to your Enterprise App Distribution Certificates? <code>如何监视和控制对企业应用分发证书的访问？</code></p>
<ul>
<li>Enable two-factor authentication, administrator hold, generate P12 to developers</li>
</ul>
</li>
<li><p>Do you use program resources to test apps before publishing them on the App Store? <code>在将应用发布到 App Store 之前，您是否使用程序资源来测试它们？</code></p>
<ul>
<li>No <code>因为未发布到AppStore</code></li>
</ul>
</li>
<li><p>Does your organization have more than one membership in the Apple Developer Enterprise Program? <code>您的组织是否在 Apple 开发人员企业计划中拥有多个成员资格？</code></p>
<ul>
<li>No</li>
</ul>
</li>
<li><p>Which of the following uses of the program are necessary for your organization? <code>您的组织需要以下哪些程序用途？</code></p>
<ul>
<li>如实填写</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>apple</category>
      </categories>
      <tags>
        <tag>Apple Developer Enterprise Program</tag>
        <tag>内鬼‘蒂姆·库克’</tag>
      </tags>
  </entry>
  <entry>
    <title>在 HexoMatery 主题下配置 utteranc 评论插件</title>
    <url>/2022/10/20/blog/hexo-matery-setup-utteranc/</url>
    <content><![CDATA[<blockquote>
<p>HexoMatery 主题没有自带 utteranc 评论插件，当然我们也可以依葫芦画瓢地搞一个上去</p>
</blockquote>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul>
<li>可以保存 utteranc 评论的公共库</li>
<li>可以提交修改的主题仓库</li>
</ul>
<h2 id="配置-utteranc-评论库"><a href="#配置-utteranc-评论库" class="headerlink" title="配置 utteranc 评论库"></a>配置 utteranc 评论库</h2><ol>
<li>先跟以往创建 github 仓库的方式一样创建一个公共代码库</li>
<li>安装 <a class="link" href="https://github.com/apps/utterances">utteranc app <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<h2 id="将-utteranc-插件添加到主题仓库"><a href="#将-utteranc-插件添加到主题仓库" class="headerlink" title="将 utteranc 插件添加到主题仓库"></a>将 utteranc 插件添加到主题仓库</h2><ol>
<li><p>创建评论模版<br> 在主题 <code>layout\_partial\</code> 目录下创建 <code>utterances.ejs</code><br> <code>请修改文件中有注释说明的部分为你自己的配置信息</code></p>
 <div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"card"</span> data-aos=<span class="string">"fade-up"</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"comment_head"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment_headling"</span> <span class="attr">style</span>=<span class="string">"font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-comments fa-fw"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="keyword">function</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'contact_plan'</span>) !== <span class="literal">null</span>){</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'comment_head'</span>).<span class="title function_">remove</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    })</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"utterances-container"</span> <span class="attr">class</span>=<span class="string">"card-content center-align"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"utterances_loading"</span> <span class="attr">style</span>=<span class="string">"align-content: center;"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">_checkUtteranc</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">'utterances'</span>).<span class="property">length</span> == <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ? ($(<span class="string">'.utterances_loading'</span>).<span class="title function_">fadeTo</span>(<span class="number">1e3</span>, <span class="number">0</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            : <span class="built_in">setTimeout</span>(_checkUtteranc, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> utterances = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'script'</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            utterances.<span class="property">type</span> = <span class="string">'text/javascript'</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            utterances.<span class="property">async</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            utterances.<span class="title function_">setAttribute</span>(<span class="string">'issue-term'</span>,<span class="string">'title'</span>) <span class="comment">// 这里我们设置为使用页面标题作为 issue titile，更多的请参阅 utterances 官网</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            utterances.<span class="title function_">setAttribute</span>(<span class="string">'repo'</span>,<span class="string">'CListery/hexo-utterances'</span>) <span class="comment">// 这里设置你自己的 utteranc 评论仓库</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            utterances.<span class="title function_">setAttribute</span>(<span class="string">'label'</span>,<span class="string">'comment'</span>) <span class="comment">// 设置 issue 的标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">'body'</span>).<span class="title function_">hasClass</span>(<span class="string">'DarkMode'</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ? (utterances.<span class="title function_">setAttribute</span>(<span class="string">'theme'</span>,<span class="string">'github-dark'</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            : (utterances.<span class="title function_">setAttribute</span>(<span class="string">'theme'</span>,<span class="string">'github-light'</span>)),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            utterances.<span class="property">crossorigin</span> = <span class="string">'anonymous'</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            utterances.<span class="property">src</span> = <span class="string">'https://utteranc.es/client.js'</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'utterances-container'</span>).<span class="title function_">appendChild</span>(utterances);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">_checkUtteranc</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        }, <span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>修改主题模版文件</p>
<ul>
<li><p>修改 <code>layout\_partial\post-detail.ejs</code><br>  在 <code>&lt;% if (theme.gitalk &amp;&amp; theme.gitalk.enable) { %&gt;</code> 上一行添加</p>
  <div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.<span class="property">utterances</span> &amp;&amp; theme.<span class="property">utterances</span>.<span class="property">enable</span>) { %&gt;</span><br><span class="line">    &lt;%- <span class="title function_">partial</span>(<span class="string">'_partial/utterances'</span>) %&gt;</span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>修改 <code>layout\contact.ejs</code><br>  在 <code>&lt;% if (theme.gitalk &amp;&amp; theme.gitalk.enable) { %&gt;</code> 上一行添加</p>
  <div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.<span class="property">utterances</span> &amp;&amp; theme.<span class="property">utterances</span>.<span class="property">enable</span>) { %&gt;</span><br><span class="line">    &lt;%- <span class="title function_">partial</span>(<span class="string">'_partial/utterances'</span>) %&gt;</span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>修改主题中的 <code>_config.yml</code><br>  添加以下内容</p>
  <div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">utterances:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
</ol>
<hr>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上就完成了 utteranc 评论插件的配置，重启 hexo 服务，不出意外就可以看到了</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github Pages</tag>
        <tag>utteranc</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Github Pages 的 hexo 博客搭建</title>
    <url>/2022/10/19/blog/hexo-setup/</url>
    <content><![CDATA[<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><h3 id="网站源码库"><a href="#网站源码库" class="headerlink" title="网站源码库"></a>网站源码库</h3><ul>
<li>私有仓库，存放你手写的博客源代码，简称 <code>库1</code></li>
</ul>
<h3 id="主题库"><a href="#主题库" class="headerlink" title="主题库"></a>主题库</h3><ul>
<li>私有仓库，存放你自定义的主题代码，将其作为 git submodule 添加到 <code>库1</code>，简称 <code>库2</code></li>
</ul>
<h3 id="Github-Pages-库-xxx-github-io"><a href="#Github-Pages-库-xxx-github-io" class="headerlink" title="Github Pages 库(xxx.github.io)"></a>Github Pages 库(xxx.github.io)</h3><ul>
<li>公共库，存放通过前两个仓库生成的网站页面，简称 <code>库3</code></li>
</ul>
<hr>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="给公共库配置部署密钥"><a href="#给公共库配置部署密钥" class="headerlink" title="给公共库配置部署密钥"></a>给公共库配置部署密钥</h3><blockquote>
<p>用于 <code>库1</code> 和 <code>库2</code> 的代码编译后自动部署到 <code>库3</code></p>
</blockquote>
<h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C "clistery.github.io" # 这里的名字取什么都行</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="上传密钥到-库3"><a href="#上传密钥到-库3" class="headerlink" title="上传密钥到 库3"></a>上传密钥到 库3</h4><ul>
<li>打开 <code>库3</code> -&gt; Settings -&gt; Security -&gt; Deploy keys -&gt; 将刚才生成的公钥填到这里面</li>
</ul>
<h3 id="配置-PAT-Personal-Access-Token"><a href="#配置-PAT-Personal-Access-Token" class="headerlink" title="配置 PAT(Personal Access Token)"></a>配置 PAT(Personal Access Token)</h3><blockquote>
<p>用于 Workflow 自动部署是可以对库进行读写</p>
</blockquote>
<ol>
<li>点击 Github 右上角头像 -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Tokens(classic) -&gt; Generate new token (classic)</li>
<li>Note 可以随意填写，最好自己看见能懂就行</li>
<li>Expiration 过期时间，可以选择不过期</li>
<li>Select scopes 中勾选 <code>workflow</code> 和 <code>write:packages</code></li>
<li>Generate token</li>
<li>然后把生成的 token(ghp_xxxxx) 保存下来备用</li>
</ol>
<h3 id="创建-Workflow"><a href="#创建-Workflow" class="headerlink" title="创建 Workflow"></a>创建 Workflow</h3><blockquote>
<p>让 库1 &amp; 库2 生成的代码能自动发布到 库3</p>
</blockquote>
<ul>
<li><p>打开 <code>库1</code> -&gt; Action -&gt; New workflow -&gt; Simple workflow -&gt; Configure<br>(或者直接在 <code>库1</code> 的根目录创建 <code>.github/workflows/xxx.yml</code>)</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Build</span> <span class="string">&amp;</span> <span class="string">Deploy</span> <span class="bullet">-</span> <span class="string">Private</span> <span class="string">to</span> <span class="string">Public</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 检出 库1 &amp; 库2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">actions/checkout@v3.0.0</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">token:</span> <span class="string">${{</span> <span class="string">secrets.CHK_PAT</span> <span class="string">}}</span> <span class="comment"># Personal Access Token，稍后我们会在 库1 中进行配置</span></span><br><span class="line">      <span class="attr">submodules:</span> <span class="string">'true'</span> <span class="comment"># 检出 submodule</span></span><br><span class="line">      <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 node 环境</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">Node</span> <span class="string">env</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">node-version:</span> <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 hexo 环境并编译</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      npm i -g hexo-cli</span></span><br><span class="line"><span class="string">      npm i</span></span><br><span class="line"><span class="string">      hexo clean &amp;&amp; hexo g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="comment"># 将生成的文件发布到 库3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4.3.3</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">ssh-key:</span> <span class="string">${{</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">}}</span> <span class="comment"># 部署密钥的私钥，稍后我们会在 库1 中进行配置</span></span><br><span class="line">      <span class="attr">repository-name:</span> <span class="string">clistery/clistery.github.io</span> <span class="comment"># 库3的名字，格式为 user/repository</span></span><br><span class="line">      <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># 发布到库3的 main 分支</span></span><br><span class="line">      <span class="attr">folder:</span> <span class="string">public</span> <span class="comment"># 库3的类型，公共库</span></span><br><span class="line">      <span class="attr">single-commit:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">commit-message:</span> <span class="string">"Deploy by source"</span></span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
<h3 id="配置-Workflows-变量"><a href="#配置-Workflows-变量" class="headerlink" title="配置 Workflows 变量"></a>配置 Workflows 变量</h3><ul>
<li><p>打开 <code>库1</code> -&gt; Settings -&gt; Security -&gt; Secrets -&gt; Actions</p>
</li>
<li><p>配置 CHK_PAT</p>
<ol>
<li>点击 New repository secret</li>
<li>Name 输入 <code>CHK_PAT</code></li>
<li>Secret 输入 <a href="#%E9%85%8D%E7%BD%AE-PAT-Personal-Access-Token">配置 PAT(Personal Access Token)</a> 时生成的 token</li>
<li>Add secret</li>
</ol>
</li>
<li><p>配置 DEPLOY_KEY</p>
<ol>
<li>点击 New repository secret</li>
<li>Name 输入 <code>DEPLOY_KEY</code></li>
<li>Secret 输入 <a href="#%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5">生成密钥</a> 时生成的私钥</li>
<li>Add secret</li>
</ol>
</li>
</ul>
<hr>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在一切配置妥当之后，你就可以向 <code>库1</code> 和 <code>库2</code> 中推送代码，workflow 就会自动将代码部署到 <code>库3</code> 中，不出意外的话就可以在 xxx.github.io 中看到更新了</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Cygwin 自定义主题</title>
    <url>/2023/02/16/cygwin/customize-theme-cygwin/</url>
    <content><![CDATA[<blockquote>
<p>定制一个自己喜欢的主题，展示一些个性化的内容</p>
</blockquote>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>官方自带的主题文件在 <code>.oh-my-zsh/themes</code> 目录下，可以通过 <code>omz theme list</code> 命令查看所有可用的主题</p>
</li>
<li><p>先通过 <code>omz theme set {theme_name}</code> 命令设置主题，找到一个最贴切自己喜好的主题</p>
</li>
<li><p>然后可以再查看 <code>.oh-my-zsh/themes</code> 下同名的主题文件，复制到 <code>.oh-my-zsh/custom/themes</code> 目录并改名即可</p>
</li>
<li><p>编辑刚才创建的文件内容，并修改其内部样式直至完美，通过 <code>omz theme set {theme_name}</code> 命令设置自定义主题即可</p>
</li>
</ol>
<h2 id="最后贴一份我自己的主题文件"><a href="#最后贴一份我自己的主题文件" class="headerlink" title="最后贴一份我自己的主题文件"></a>最后贴一份我自己的主题文件</h2><ul>
<li><p>效果</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">clistery @ work <span class="keyword">in</span> ~ on git:master x [ababa112] [10:09:31] C:0</span></span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>cyh.zsh-theme</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clean, simple, compatible and meaningful.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Tested on Linux, Unix and Windows under ANSI colors.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">It is recommended to use with a dark background.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Colors: black, red, green, yellow, *blue, magenta, cyan, and white.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Nov 2022 CListery</span></span></span><br><span class="line"></span><br><span class="line">RED=$fg[red]</span><br><span class="line">YELLOW=$fg[yellow]</span><br><span class="line">GREEN=$fg[green]</span><br><span class="line">WHITE=$fg[white]</span><br><span class="line">BLUE=$fg[blue]</span><br><span class="line">RED_BOLD=$fg_bold[red]</span><br><span class="line">YELLOW_BOLD=$fg_bold[yellow]</span><br><span class="line">GREEN_BOLD=$fg_bold[green]</span><br><span class="line">WHITE_BOLD=$fg_bold[white]</span><br><span class="line">BLUE_BOLD=$fg_bold[blue]</span><br><span class="line">RESET_COLOR=$reset_color</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VCS</span></span><br><span class="line">CL_VCS_PROMPT_PREFIX1=" %{$reset_color%}on%{$fg[blue]%} "</span><br><span class="line">CL_VCS_PROMPT_PREFIX2=":%{$fg[cyan]%}"</span><br><span class="line">CL_VCS_PROMPT_SUFFIX="%{$reset_color%}"</span><br><span class="line">CL_VCS_PROMPT_DIRTY=" %{$RED%}x"</span><br><span class="line">CL_VCS_PROMPT_CLEAN=" %{$GREEN%}o"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Git info</span></span><br><span class="line">local git_info='$(git_prompt_info)$(git_prompt_short_sha)'</span><br><span class="line">ZSH_THEME_GIT_PROMPT_PREFIX="${CL_VCS_PROMPT_PREFIX1}git${CL_VCS_PROMPT_PREFIX2}"</span><br><span class="line">ZSH_THEME_GIT_PROMPT_SUFFIX="$CL_VCS_PROMPT_SUFFIX"</span><br><span class="line">ZSH_THEME_GIT_PROMPT_DIRTY="$CL_VCS_PROMPT_DIRTY"</span><br><span class="line">ZSH_THEME_GIT_PROMPT_CLEAN="$CL_VCS_PROMPT_CLEAN"</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Format <span class="keyword">for</span> git_prompt_long_sha() and git_prompt_short_sha()</span></span><br><span class="line">ZSH_THEME_GIT_PROMPT_SHA_BEFORE=" %{$reset_color%}%{$fg[white]%}[%{$YELLOW%}"</span><br><span class="line">ZSH_THEME_GIT_PROMPT_SHA_AFTER="%{$fg[white]%}]"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SVN info</span></span><br><span class="line">local svn_info='$(svn_prompt_info)'</span><br><span class="line">ZSH_THEME_SVN_PROMPT_PREFIX="${CL_VCS_PROMPT_PREFIX1}svn${CL_VCS_PROMPT_PREFIX2}"</span><br><span class="line">ZSH_THEME_SVN_PROMPT_SUFFIX="$CL_VCS_PROMPT_SUFFIX"</span><br><span class="line">ZSH_THEME_SVN_PROMPT_DIRTY="$CL_VCS_PROMPT_DIRTY"</span><br><span class="line">ZSH_THEME_SVN_PROMPT_CLEAN="$CL_VCS_PROMPT_CLEAN"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HG info</span></span><br><span class="line">local hg_info='$(cl_hg_prompt_info)'</span><br><span class="line">cl_hg_prompt_info() {</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">make sure this is a hg <span class="built_in">dir</span></span></span><br><span class="line">  if [ -d '.hg' ]; then</span><br><span class="line">    echo -n "${CL_VCS_PROMPT_PREFIX1}hg${CL_VCS_PROMPT_PREFIX2}"</span><br><span class="line">    echo -n $(hg branch 2&gt;/dev/null)</span><br><span class="line">    if [[ "$(hg config oh-my-zsh.hide-dirty 2&gt;/dev/null)" != "1" ]]; then</span><br><span class="line">      if [ -n "$(hg status 2&gt;/dev/null)" ]; then</span><br><span class="line">        echo -n "$CL_VCS_PROMPT_DIRTY"</span><br><span class="line">      else</span><br><span class="line">        echo -n "$CL_VCS_PROMPT_CLEAN"</span><br><span class="line">      fi</span><br><span class="line">    fi</span><br><span class="line">    echo -n "$CL_VCS_PROMPT_SUFFIX"</span><br><span class="line">  fi</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Virtualenv</span></span><br><span class="line">local venv_info='$(virtenv_prompt)'</span><br><span class="line">CL_THEME_VIRTUALENV_PROMPT_PREFIX=" %{$GREEN%}"</span><br><span class="line">CL_THEME_VIRTUALENV_PROMPT_SUFFIX=" %{$reset_color%}%"</span><br><span class="line">virtenv_prompt() {</span><br><span class="line">  [[ -n "${VIRTUAL_ENV:-}" ]] || return</span><br><span class="line">  echo "${CL_THEME_VIRTUALENV_PROMPT_PREFIX}${VIRTUAL_ENV:t}${CL_THEME_VIRTUALENV_PROMPT_SUFFIX}"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">local exit_code="%(?,,C:%{$RED%}%?%{$reset_color%})"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Prompt format:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># PRIVILEGES USER @ MACHINE in DIRECTORY on git:BRANCH STATE [SHA] [TIME] C:LAST_EXIT_CODE</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$ COMMAND</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># For example:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># % clistery @ work in ~ on git:master x [ababa112] [10:09:31] C:0</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$</span></span><br><span class="line">PROMPT="</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">{<span class="variable">$terminfo</span>[bold]<span class="variable">$fg</span>[blue]%}<span class="comment">#%{$reset_color%} \</span></span></span><br><span class="line"><span class="language-bash">%(<span class="comment">#,%{$bg[yellow]%}%{$fg[black]%}%n%{$reset_color%},%{$fg[cyan]%}%n) \</span></span></span><br><span class="line"><span class="language-bash">%{<span class="variable">$reset_color</span>%}@ \</span></span><br><span class="line"><span class="language-bash">%{<span class="variable">$GREEN</span>%}%m \</span></span><br><span class="line"><span class="language-bash">%{<span class="variable">$reset_color</span>%}<span class="keyword">in</span> \</span></span><br><span class="line"><span class="language-bash">%{<span class="variable">$terminfo</span>[bold]<span class="variable">$YELLOW</span>%}%~%{<span class="variable">$reset_color</span>%}\</span></span><br><span class="line"><span class="language-bash"><span class="variable">${hg_info}</span>\</span></span><br><span class="line"><span class="language-bash"><span class="variable">${git_info}</span>\</span></span><br><span class="line"><span class="language-bash"><span class="variable">${svn_info}</span>\</span></span><br><span class="line"><span class="language-bash"><span class="variable">${venv_info}</span>\</span></span><br><span class="line"><span class="language-bash">\</span></span><br><span class="line"><span class="language-bash">[%*] <span class="variable">$exit_code</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">{<span class="variable">$terminfo</span>[bold]<span class="variable">$RED</span>%}$ %{<span class="variable">$reset_color</span>%}<span class="string">"</span></span></span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>cygwin</category>
      </categories>
      <tags>
        <tag>cygwin</tag>
        <tag>theme</tag>
        <tag>linux</tag>
        <tag>shell</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Cygwin 创建文件权限问题</title>
    <url>/2023/02/15/cygwin/fstab-error-cygwin/</url>
    <content><![CDATA[<blockquote>
<p>在通过命令行，如：<code>mkdir test</code> 创建一个目录或文件后，通过右键属性打开安全选项卡时，Windows 会提示 <code>test 上的权限顺序不正确</code>，而后可能会导致一些文件权限操作上的异常问题发生</p>
</blockquote>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Cygwin 的主要目的是通过重新编译，将 POSIX 系统（例如 Linux、BSD，以及其他 Unix 系统）上的软件移植到 Windows 上。</p>
<p>所以 Cygwin 自带的对文件的创建命令同样也是通过移植 POSIX 的方式实现，这一点我们可以通过 cygwin 安装目录下的 <code>/etc/fstab</code> 文件内容得到验证</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is default anyway:</span></span><br><span class="line">none /cygdrive cygdrive binary,posix=0,user 0 0</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>默认情况下，Cygwin 使用文件系统的访问控制列表 (ACL) 来实现真正的 POSIX 权限。</p>
<p>某些 Windows 本地程序或进程可能会创建或修改 ACL，导致 Cygwin 将 POSIX 权限计算为 000。</p>
<p>所以需要将 <code>/etc/fstab</code> 改为如下内容：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">none /cygdrive cygdrive binary,noacl,posix=0,user 0 0</span><br></pre></td></tr></tbody></table></figure></div>

<p>使用 <code>noacl</code> 挂载选项，Cygwin 会忽略文件系统 ACL，并且只会根据 DOS 只读属性伪造权限位的子集。</p>
<p>最后关闭所有 Cygwin 及相关进程（或者直接重启系统），打开一个新终端并再次对您的文件执行 <code>ls -l</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a class="link" href="https://zh.wikipedia.org/wiki/Cygwin">Cygwin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link" href="https://stackoverflow.com/questions/5828037/cygwin-sets-file-permission-to-000">cygwin-sets-file-permission-to-000 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>cygwin</category>
      </categories>
      <tags>
        <tag>cygwin</tag>
        <tag>linux</tag>
        <tag>shell</tag>
        <tag>fstab</tag>
      </tags>
  </entry>
  <entry>
    <title>设置 Cygwin</title>
    <url>/2022/11/15/cygwin/setup-cygwin/</url>
    <content><![CDATA[<h2 id="Windows-Terminal-Cygwin"><a href="#Windows-Terminal-Cygwin" class="headerlink" title="Windows Terminal + Cygwin"></a>Windows Terminal + Cygwin</h2><p><a class="link" href="https://github.com/microsoft/terminal">Windows Terminal <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>命令行：<code>${Cygwin安装目录}\Cygwin.bat</code><br>启动目录：勾选使用父进程</p>
<ul>
<li>zsh</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/passwd</span><br></pre></td></tr></tbody></table></figure></div>

<p>找到你当前用户一行，将末尾改为 <code>/bin/zsh</code></p>
<h2 id="IntelliJ系列-Cygwin"><a href="#IntelliJ系列-Cygwin" class="headerlink" title="IntelliJ系列 + Cygwin"></a>IntelliJ系列 + Cygwin</h2><p>Settings -&gt; Tools -&gt; Terminal -&gt; Application Settings -&gt; Shell path: <code>${Cygwin安装目录}\Cygwin.bat</code></p>
<h2 id="VSCode-Cygwin"><a href="#VSCode-Cygwin" class="headerlink" title="VSCode + Cygwin"></a>VSCode + Cygwin</h2><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"terminal.integrated.profiles.windows"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"Cygwin"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"path"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"${Cygwin安装目录}\Cygwin.bat"</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"icon"</span><span class="punctuation">:</span> <span class="string">"terminal-cmd"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></div>
]]></content>
      <categories>
        <category>cygwin</category>
      </categories>
      <tags>
        <tag>cygwin</tag>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Cygwin 设置 HOME 目录</title>
    <url>/2023/02/16/cygwin/setup-home-dir-cygwin/</url>
    <content><![CDATA[<blockquote>
<p>由于 Windows 下复杂的环境问题，通过其他软件结合 Cygwin 打开命令行时，默认的 HOME 目录极有可能出现问题，且新版本 <code>Windows Terminal + Cygwin</code> 在 Windows 资源管理器中右键菜单打开终端时会出现无法直接进入到当前目录的情况</p>
</blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><a class="link" href="https://github.com/microsoft/terminal">Windows Terminal <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> + <a class="link" href="https://cygwin.com/install.html">Cygwin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> + <a class="link" href="https://www.zsh.org/">zsh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>勾选 Windows Terminal 中配置文件 Cygwin 启动目录中的 <code>使用父进程目录</code></p>
<p><img lazyload="" src="/images/loading.svg" data-src="/medias/images/windows_terminal-cygwin-config.png" alt="使用父进程目录"></p>
</li>
<li><p>修改 Cygwin.bat，添加以下内容</p>
<div class="highlight-container" data-rel="Bat"><figure class="iseeu highlight bat"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> _T=<span class="variable">%CD%</span></span><br><span class="line">.\zsh --login -i</span><br></pre></td></tr></tbody></table></figure></div>

<p>同时如果不想外部传入 HOME 环境变量可在第一行添加</p>
<div class="highlight-container" data-rel="Bat"><figure class="iseeu highlight bat"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> HOME=</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>修改 <code>.zshrc</code></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">_T=${_T//\\//}</span><br><span class="line">if [[ $_T != "C:/WINDOWS/System32" ]]; then</span><br><span class="line"> cd "$_T"</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>cygwin</category>
      </categories>
      <tags>
        <tag>cygwin</tag>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>优化 docker 镜像构建时需要重复下载 apk</title>
    <url>/2023/10/07/docker/apline-apk-locally/</url>
    <content><![CDATA[<blockquote>
<p>众所周知，如果我们需要在 docker 镜像构建时通过包管理器下载一些软件，那么每次我们在修改 DockerFile 时，都需要重新下载一遍，这样会导致构建时间变长，而且如果我们的网络不是很好，那么下载的过程中还可能会出现失败的情况，这样就会导致构建失败，所以我们需要优化这个过程。</p>
</blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol>
<li>宿主机: 20.04.6 LTS (Focal Fossa)</li>
<li>docker: Docker version 24.0.4, build 3713ee1</li>
<li>docker-compose: docker-compose version 1.27.4, build 40524192</li>
<li>alpine: 3.11.6</li>
</ol>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote>
<p>这里以 <a href="https://clistery.github.io/2023/07/27/docker/apline-nginx-install-module/#DockerFile">在 Docker 中为 Nginx:alpine 安装模块</a> 为例</p>
</blockquote>
<p>在这个 DockerFile 中，我们需要编译 nginx，所以有以下这行命令被执行：</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">apk <span class="keyword">add</span><span class="language-bash"> --no-cache --virtual dependency gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers \</span></span><br><span class="line"><span class="language-bash"><span class="comment"># ...</span></span></span><br></pre></td></tr></tbody></table></figure></div>

<p>每次在构建镜像时都会重新下载这些包 <code>gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers</code>，每次只要修改的内容在这行命令之前都会重新触发下载，这将大大增加构建时间，也白白浪费带宽。</p>
<ul>
<li><p>优化思路</p>
<blockquote>
<p>办法很简单，就是将这些包保存到本地，在构建时在使用已经下载完成的包进行安装，整过构建流程就会被加快</p>
</blockquote>
</li>
</ul>
<h2 id="获取-apk-包"><a href="#获取-apk-包" class="headerlink" title="获取 apk 包"></a>获取 apk 包</h2><blockquote>
<p>这里以 <code>gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers</code> 为例</p>
</blockquote>
<ol>
<li><p>进入 alpine 镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it alpine:3.11.6 /bin/sh</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>将包下载到本地</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置镜像源</span></span><br><span class="line">sed -i <span class="string">"s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g"</span> /etc/apk/repositories</span><br><span class="line"><span class="comment"># 下载包</span></span><br><span class="line">apk fetch --recursive --no-cache gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers -o /tmp</span><br></pre></td></tr></tbody></table></figure></div>

<p>下载后的 apk 文件会保存在 <code>/tmp</code> 目录下</p>
</li>
<li><p>将包复制到宿主机</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> &lt;containerId&gt;:/tmp /host/path/apk</span><br></pre></td></tr></tbody></table></figure></div></li>
</ol>
<h2 id="使用本地-apk-包"><a href="#使用本地-apk-包" class="headerlink" title="使用本地 apk 包"></a>使用本地 apk 包</h2><ol>
<li><p>修改 DockerFile</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> /host/path/apk /tmp <span class="comment"># 将本地的 apk 复制到镜像中</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache --virtual dependency /tmp/*.apk \ <span class="comment"># 使用本地的 apk 进行安装</span></span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>构建镜像</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker build -t nginx:alpine .</span><br></pre></td></tr></tbody></table></figure></div>

<p>到这里，我们就可以发现构建速度已经有了较大的提升</p>
</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>总结一下优缺点：</p>
<ul>
<li><p>优点</p>
<ol>
<li>构建速度提升</li>
<li>避免了因为网络问题而导致构建失败</li>
<li>足够灵活，如果我们不需要某个包或需要临时增加某个包，只需要修改本地的 apk 包即可</li>
</ol>
</li>
<li><p>缺点</p>
<ol>
<li>需要手动下载 apk 包，并复制到镜像中</li>
<li>需要匹配包的版本和镜像的版本，否则可能会出现不兼容的情况，当然这种情况只需要重新下载即可</li>
</ol>
</li>
</ul>
<p>当然，不仅仅只有这一种方式，还有其他的方式，比如通过创建一个已经安装好这些包的基础镜像，再通过这个基础镜像进行后续编译，但是这种方式的弊端也比较明显，不够灵活，所以我个人还是更喜欢上面这种方式。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>alpine</tag>
        <tag>dockerfile</tag>
        <tag>docker image</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Docker 中为 Nginx:alpine 安装模块</title>
    <url>/2023/07/27/docker/apline-nginx-install-module/</url>
    <content><![CDATA[<blockquote>
<p>通过 DockerFile 给基于 nginx:apline 构建的镜像安装 HTTP Echo 模块</p>
</blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol>
<li>宿主机: 20.04.6 LTS (Focal Fossa)</li>
<li>docker: Docker version 24.0.4, build 3713ee1</li>
<li>docker-compose: docker-compose version 1.27.4, build 40524192</li>
<li>nginx: nginx:1.19.1-alpine</li>
<li>nginx-module<ul>
<li>HTTP Echo: 0.63</li>
</ul>
</li>
</ol>
<h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.19</span>.<span class="number">1</span>-alpine as base</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">"s/dl-cdn.alpinelinux.org/mirrors.cernet.edu.cn/g"</span> /etc/apk/repositories;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base as build</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> ECHO_NGINX_MODULE_VERSION <span class="number">0.63</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">"s/dl-cdn.alpinelinux.org/mirrors.cernet.edu.cn/g"</span> /etc/apk/repositories;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> NGINX_VER=`nginx -v 2&gt;&amp;1 | <span class="built_in">cut</span> -d <span class="string">'/'</span> -f 2` \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">cd</span> /tmp \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; wget http://nginx.org/download/nginx-<span class="variable">${NGINX_VER}</span>.tar.gz -O nginx-<span class="variable">${NGINX_VER}</span>.tar.gz \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; wget https://github.com/openresty/echo-nginx-module/archive/refs/tags/v<span class="variable">${ECHO_NGINX_MODULE_VERSION}</span>.tar.gz -O echo-nginx-module-<span class="variable">${ECHO_NGINX_MODULE_VERSION}</span>.tar.gz \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apk add --no-cache --virtual dependency gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; tar zxf nginx-<span class="variable">${NGINX_VER}</span>.tar.gz \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; tar zxf echo-nginx-module-<span class="variable">${ECHO_NGINX_MODULE_VERSION}</span>.tar.gz  \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">cd</span> nginx-<span class="variable">${NGINX_VER}</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; CONFARGS=$(nginx -V 2&gt;&amp;1 | sed -n -e <span class="string">'s/^configure arguments: //p'</span>) \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">echo</span> <span class="variable">$CONFARGS</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; sh -c <span class="string">"./configure --with-compat <span class="variable">${CONFARGS}</span> --add-dynamic-module=../echo-nginx-module-<span class="variable">${ECHO_NGINX_MODULE_VERSION}</span>"</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; make modules \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apk del dependency \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/cache/apk/* \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">mkdir</span> -p /tmp/objs \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">cp</span> /tmp/nginx-<span class="variable">${NGINX_VER}</span>/objs/*.so /tmp/objs/ \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">ls</span> /tmp/objs -al</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /tmp/objs/ngx_http_echo_module.so /etc/nginx/modules</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">'1s/^/load_module \/etc\/nginx\/modules\/ngx_http_echo_module.so;\n/'</span> /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /www</span></span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h2><p><a class="link" href="https://nginx.org/en/docs/configure.html">https://nginx.org/en/docs/configure.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link" href="https://www.nginx.com/resources/wiki/modules/">https://www.nginx.com/resources/wiki/modules/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>linux</tag>
        <tag>alpine</tag>
        <tag>nginx</tag>
        <tag>nginx-module</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次 DockerCompose 配置 22 端口映射遇到的坑</title>
    <url>/2022/11/11/docker/port-22-bug/</url>
    <content><![CDATA[<blockquote>
<p>在一次偶然的机会下触发了一个端口映射的bug</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>docker-compose.yml</code></p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.8"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">machine:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ubuntu:20.04</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">"ubuntu_2004"</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">9500</span><span class="string">:80</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">9501</span><span class="string">:22</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>乍一看没啥毛病是吧，运行试一下</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker-compose up</span></span><br><span class="line">Creating network "ubuntu2_default" with the default driver</span><br><span class="line">Creating ubuntu_2004 ... error</span><br><span class="line"></span><br><span class="line">ERROR: for ubuntu_2004  Cannot create container for service machine: invalid port specification: "570082"</span><br><span class="line"></span><br><span class="line">ERROR: for machine  Cannot create container for service machine: invalid port specification: "570082"</span><br><span class="line">ERROR: Encountered errors while bringing up the project.</span><br></pre></td></tr></tbody></table></figure></div>

<p>这就是 22 端口导致的问题，我们把配置文件的端口改为以下写法就可以解决问题了</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9500:80"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9501:22"</span></span><br></pre></td></tr></tbody></table></figure></div>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>ssh</tag>
        <tag>22-port</tag>
        <tag>bugs</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 ssh 桥接方式连接远程 docker 中的 ubuntu</title>
    <url>/2022/11/11/docker/ssh-bridge/</url>
    <content><![CDATA[<blockquote>
<p>很多时候我们的 docker 环境都不在本地，而通过 ssh 连接远程服务器然后在通过 docker 命令进入容器貌似又有点繁琐，所以直接一步到位搞个跳板可以让我们直接访问到容器</p>
</blockquote>
<h2 id="配置容器"><a href="#配置容器" class="headerlink" title="配置容器"></a>配置容器</h2><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><ul>
<li><p>配置 <code>docker-compose.yml</code></p>
  <div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.8"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">ccc:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ubuntu:20.04</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">"ubuntu_2004"</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"9500:80"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"9501:22"</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>运行</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>进入容器</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker exec -it ubuntu_2004 /bin/bash</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>安装 openssh-server</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install openssh-server</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>配置 ssh 公钥</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir ~/.ssh &amp;&amp; touch ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
<p>最后将公钥写入到 <code>~/.ssh/authorized_keys</code> 文件中，就完成了容器配置</p>
<h3 id="本地跳板配置"><a href="#本地跳板配置" class="headerlink" title="本地跳板配置"></a>本地跳板配置</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程主机(跳板)</span></span><br><span class="line">Host ubuntu</span><br><span class="line">    Port 22</span><br><span class="line">    User ubuntu</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker 容器</span></span><br><span class="line">Host docker_ubuntu</span><br><span class="line">    HostName 0.0.0.0</span><br><span class="line">    Port 9501</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    ProxyCommand ssh -q -W %h:%p ubuntu</span><br></pre></td></tr></tbody></table></figure></div>

<p>然后通过 <code>ssh docker_ubuntu</code> 命令就可以直接访问到远程 docker 容器了~</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>ubuntu</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 ssh 连接 docker 中的 dsm</title>
    <url>/2023/12/06/dsm/access-dsm-ssh/</url>
    <content><![CDATA[<blockquote>
<p>之前我们在 <a href="https://clistery.github.io/2023/12/07/dsm/install-with-docker/">在 docker 中安装 DSM</a> 安装了 DSM，现在我们需要通过 ssh 连接到 DSM 中，本文将介绍如何通过 ssh 连接到 DSM 中。</p>
</blockquote>
<p>由于 DSM 是搭建在 docker 下的，所以我们要连接到 DSM 大概思路如下</p>
<ol>
<li>通过 ssh 连接到宿主机</li>
<li>再通过宿主机 ssh 连接本地端口登录到 DSM</li>
</ol>
<p>有点繁琐，简化一下操作，通过宿主机建立一个 ssh jump server，然后通过 ssh jump server 连接到 DSM，这样一步就完成了登录 DSM</p>
<p>关于 ssh jump server 的搭建流程可以查看这篇博客 <a href="https://clistery.github.io/2022/11/11/docker/ssh-bridge/">通过 ssh 桥接方式连接远程 docker 中的 ubuntu</a>, 这里不再赘述</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li><p>需要先打开 DSM 的 ssh 服务</p>
<blockquote>
<p>打开 DSM <code>控制面板</code> -&gt; <code>终端机和 SNMP</code> -&gt; <code>终端机</code> -&gt; <code>启用 SSH 服务</code></p>
</blockquote>
</li>
<li><p>修改 docker-compose.yml</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">dsm:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3456</span><span class="string">:22</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>重启 DSM</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose restart dsm</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>创建 home 目录</p>
<p>因为 ssh 登录后默认会进入到用户的 home 目录，所以我们需要创建一个用户所对应的 home 目录</p>
<p>这一步需要在 DSM 中完成，操作非常简单，只需要安装 <code>Synology Photos</code> 即可，安装完成后会自动创建 home 目录</p>
</li>
<li><p>配置 ssh 公钥</p>
<p>将你的公钥写入到 <code>/var/services/homes/&lt;username&gt;/authorized_keys</code> 文件中</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Match User &lt;username&gt;</span><br><span class="line">  AuthorizedKeysFile /var/services/homes/&lt;username&gt;/authorized_keys</span><br><span class="line">  PasswordAuthentication no</span><br><span class="line">  PubkeyAuthentication yes</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>修改宿主机 ssh 跳板</p>
<p>这一步可以参考 <a href="https://clistery.github.io/2022/11/11/docker/ssh-bridge/">通过 ssh 桥接方式连接远程 docker 中的 ubuntu</a> 完成</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Match User dsm</span><br><span class="line">  AuthorizedKeysFile /home/app/.ssh/authorized_keys</span><br><span class="line">  PasswordAuthentication no</span><br><span class="line">  PubkeyAuthentication yes</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>配置客户端 ssh</p>
<p>这一步可以参考 <a href="https://clistery.github.io/2022/11/11/docker/ssh-bridge/">通过 ssh 桥接方式连接远程 docker 中的 ubuntu</a> 完成</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></tbody></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Host app</span><br><span class="line"> HostName &lt;host&gt;</span><br><span class="line"> Port 22</span><br><span class="line"> User dsm</span><br><span class="line"> IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host docker_dsm</span><br><span class="line">  HostName 0.0.0.0</span><br><span class="line">  Port 3456</span><br><span class="line">  User &lt;username&gt;</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  ProxyCommand ssh -q -W %h:%p app</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>连接 DSM</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh docker_dsm</span><br></pre></td></tr></tbody></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>dsm</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dsm</tag>
        <tag>virtual dsm</tag>
        <tag>synology dsm</tag>
        <tag>ssh jump server</tag>
      </tags>
  </entry>
  <entry>
    <title>修复 virtual DSM 无法访问网络</title>
    <url>/2023/12/06/dsm/fix-dsm-network-issue/</url>
    <content><![CDATA[<blockquote>
<p>之前我们在 <a href="https://clistery.github.io/2023/12/07/dsm/install-with-docker/">在 docker 中安装 DSM</a> 时，我们在 docker 中安装了一个虚拟的 DSM，但是在安装完成后，我们发现 DSM 可以正常安装套件，但是 NTP 和 邮件通知 等服务都无法正常工作，所以我们需要修复这个问题。</p>
</blockquote>
<h2 id="添加-DNS"><a href="#添加-DNS" class="headerlink" title="添加 DNS"></a>添加 DNS</h2><ol>
<li><p>修改 docker-compose.yml</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">dsm:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="attr">dns:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>修改 DSM 网络配置</p>
<ol>
<li>打开 DSM <code>控制面板</code></li>
<li>点击<code>网络</code></li>
<li>切换到<code>常规</code>选项卡</li>
<li>勾选<code>手动配置 DNS 服务器</code><br>首选 DNS: <code>8.8.8.8</code><br>备选 DNS: <code>1.0.0.1</code></li>
</ol>
</li>
</ol>
<h2 id="重启-DSM"><a href="#重启-DSM" class="headerlink" title="重启 DSM"></a>重启 DSM</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose restart dsm</span><br></pre></td></tr></tbody></table></figure></div>
]]></content>
      <categories>
        <category>dsm</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dsm</tag>
        <tag>virtual dsm</tag>
        <tag>synology dsm</tag>
        <tag>network error</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Linux 环境下为 DSM 安装软件</title>
    <url>/2023/12/06/dsm/install-pkg-with-entware/</url>
    <content><![CDATA[<blockquote>
<p>之前介绍了如何通过 ssh 连接到 DSM，现在我们需要在 DSM 中安装一些软件，本文将介绍如何在 DSM 中安装软件。</p>
</blockquote>
<p>首先需要将 ssh 连接到 DSM 中，具体可以参考 <a href="https://clistery.github.io/2023/12/07/dsm/access-dsm-ssh/">通过 ssh 连接 docker 中的 dsm</a></p>
<h2 id="安装-Entware"><a href="#安装-Entware" class="headerlink" title="安装 Entware"></a>安装 Entware</h2><blockquote>
<p>由于 Linux DSM 不同于普通的 Linux 发布版，所以我们不能直接使用 apt 或者 yum 等包管理器来安装软件，所以需要通过 Entware 来安装软件</p>
</blockquote>
<ol>
<li><p>首先查看平台架构</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m</span><br></pre></td></tr></tbody></table></figure></div>

<p>Entware 支持如下几种平台：</p>
<ul>
<li>armv7</li>
<li>x86</li>
<li>x86_64</li>
<li>armv5</li>
<li>mips</li>
<li>mipsel</li>
<li>armv8/aarch64</li>
</ul>
</li>
<li><p>创建 Entware 安装目录</p>
<ul>
<li><p>确保 <code>/opt</code> 目录可以被操作</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">stat</span> -c <span class="string">'%a'</span> /opt</span><br></pre></td></tr></tbody></table></figure></div>

<p>如果返回大于等于 <code>600</code>，则可以继续操作</p>
</li>
<li><p>创建 <code>/opt</code> 并挂载</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /volume1/@Entware/opt</span><br><span class="line"><span class="built_in">rm</span> -rf /opt</span><br><span class="line"><span class="built_in">mkdir</span> /opt</span><br><span class="line">mount -o <span class="built_in">bind</span> /volume1/@Entware/opt /opt</span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>如果挂载失败，则使用软链接的方式创建目录</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /volume1/@Entware/opt/ /opt</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
<li><p>安装 Entware</p>
</li>
</ol>
<p>根据平台架构选择对应的安装命令</p>
<ul>
<li><p>armv7</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O - https://bin.entware.net/armv7sf-k2.6/installer/generic.sh | sh</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>x86</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O - https://bin.entware.net/x86-k2.6/installer/generic.sh | sh</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>x86_64</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O - https://bin.entware.net/x64-k3.2/installer/generic.sh | sh</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>armv5</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O - https://bin.entware.net/armv5sf-k3.2/installer/generic.sh | sh</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>mips</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O - https://bin.entware.net/mipssf-k3.4/installer/generic.sh | sh</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>mipsel</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O - https://bin.entware.net/mipselsf-k3.4/installer/generic.sh | sh</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>armv8/aarch64</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O - https://bin.entware.net/aarch64-k3.10/installer/generic.sh | sh</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
<ol start="4">
<li><p>EntWare 自启动</p>
<ol>
<li><p>使用具有管理员权限的账号登录 DSM</p>
</li>
<li><p>打开控制面板</p>
</li>
<li><p>选择任务计划</p>
</li>
<li><p>新增 &gt; 触发的任务 &gt; 用户定义的脚本</p>
<ul>
<li><p>常规</p>
<ul>
<li>名称：EntWare StartUp</li>
<li>用户账号：root</li>
<li>事件：开机</li>
</ul>
</li>
<li><p>任务设置</p>
<ul>
<li><p>将下面的脚本粘贴到<code>运行命令</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Mount EntWare</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt</span><br><span class="line">mount -o <span class="built_in">bind</span> /volume1/@Entware/opt /opt</span><br><span class="line">/opt/etc/init.d/rc.unslung start</span><br><span class="line"><span class="comment"># Add EntWare Profile in Global Profile</span></span><br><span class="line"><span class="keyword">if</span> grep -qF <span class="string">'/opt/etc/profile'</span> /etc/profile; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Confirmed: EntWare Profile in Global Profile"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Adding: EntWare Profile in Global Profile"</span></span><br><span class="line">  <span class="built_in">cat</span> &gt;&gt;/etc/profile &lt;&lt;<span class="string">"EOF"</span></span><br><span class="line"><span class="comment"># Load EntWare Profile</span></span><br><span class="line">[ -r <span class="string">"/opt/etc/profile"</span> ] &amp;&amp; . /opt/etc/profile</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Configure EntWare Mirror</span></span><br><span class="line">sed -i <span class="string">'s|https\?://bin.entware.net|https://mirrors.bfsu.edu.cn/entware|g'</span> /opt/etc/opkg.conf</span><br><span class="line"><span class="comment"># Update EntWare List</span></span><br><span class="line">/opt/bin/opkg update</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
</ul>
</li>
<li><p>确定</p>
</li>
<li><p>重启 DSM</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>dsm</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dsm</tag>
        <tag>virtual dsm</tag>
        <tag>synology dsm</tag>
        <tag>Linux DSM</tag>
      </tags>
  </entry>
  <entry>
    <title>在 docker 中安装 DSM</title>
    <url>/2023/12/06/dsm/install-with-docker/</url>
    <content><![CDATA[<blockquote>
<p>是的，你没有看错，这篇文章的标题是在 docker 中安装 DSM，而不是在 docker 中安装 DSM，这里的 DSM 是指 Synology DSM，也就是群晖的操作系统，这里我们将在 docker 中安装一个虚拟的 DSM，这样我们就可以在不购买群晖硬件的情况下体验 DSM 的功能了。</p>
</blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol>
<li>宿主机: 20.04.6 LTS (Focal Fossa)</li>
<li>docker: Docker version 24.0.6, build ed223bc</li>
<li>docker compose: Docker Compose version v2.21.0</li>
<li>DSM: 7.2.1-69057-1</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>创建 docker-compose.yml</li>
</ul>
<blockquote>
<p>更多的配置可以参考 <a class="link" href="https://github.com/vdsm/virtual-dsm">Virtual DSM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">dsm:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">dsm</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/clistery/virtual-dsm:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">URL:</span> <span class="string">'https://cndl.synology.cn/download/DSM/release/7.2.1/69057-1/DSM_VirtualDSM_69057.pat'</span></span><br><span class="line">      <span class="attr">DISK_SIZE:</span> <span class="string">'100G'</span></span><br><span class="line">      <span class="attr">DISK2_SIZE:</span> <span class="string">'100G'</span></span><br><span class="line">      <span class="attr">RAM_SIZE:</span> <span class="string">'4G'</span></span><br><span class="line">      <span class="attr">CPU_CORES:</span> <span class="string">'4'</span></span><br><span class="line">    <span class="attr">devices:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/kvm</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/net/tun</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/vhost-net</span></span><br><span class="line">    <span class="attr">device_cgroup_rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'c *:* rwm'</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'5000:5000'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">${PWD}/pat:/pat:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">${PWD}/storage/sda1:/storage:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">${PWD}/storage/sda2:/storage2:rw</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">stop_grace_period:</span> <span class="string">1m</span></span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>其中镜像 docker.io/clistery/virtual-dsm:latest 是基于 <a class="link" href="https://github.com/vdsm/virtual-dsm">Virtual DSM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 构建，在其之上做了一些加速优化，及一些工具配置，也可以直接替换为 vdsm/virtual-dsm:latest。</p>
</blockquote>
<ul>
<li>创建目录</li>
</ul>
<ol>
<li>创建 pat 目录</li>
<li>创建 storage 目录</li>
</ol>
<blockquote>
<p>创建完成后的目录结构如下：</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── pat</span><br><span class="line">└── storage</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="安装加速（可选）"><a href="#安装加速（可选）" class="headerlink" title="安装加速（可选）"></a>安装加速（可选）</h2><blockquote>
<p>如果使用的镜像是 virtual-dsm:latest，那么可以跳过这一步。这里我们实际安装的版本是 7.2.1，但是由于 7.2.1 中系统关键文件无法解包，只能先通过 7.0.1 解包出关键文件，再进行 7.2.1 版本的安装</p>
</blockquote>
<ol>
<li><p>进入 pat 目录</p>
</li>
<li><p>下载 PAT 文件</p>
<ul>
<li><p>7.0.1</p>
<p><a class="link" href="https://cndl.synology.cn/download/DSM/release/7.0.1/42218/DSM_VirtualDSM_42218.pat">https://cndl.synology.cn/download/DSM/release/7.0.1/42218/DSM_VirtualDSM_42218.pat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li><p>dsm.rd</p>
<blockquote>
<p>7.0.1 其中的关键文件，可用于加速安装，非必须，如果不提前准备的话，安装过程中会自动下载</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -r <span class="string">"65627648-71021835"</span> -sfk -o <span class="string">"DSM_VirtualDSM_42218-dsm.rd"</span> <span class="string">"https://cndl.synology.cn/download/DSM/release/7.0.1/42218/DSM_VirtualDSM_42218.pat"</span></span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
<li><p>7.2.1: <a class="link" href="https://cndl.synology.cn/download/DSM/release/7.2.1/69057-1/DSM_VirtualDSM_69057.pat">https://cndl.synology.cn/download/DSM/release/7.2.1/69057-1/DSM_VirtualDSM_69057.pat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<blockquote>
<p>链接使用了大陆加速，如果无法下载，将链接中的 <code>cndl.synology.cn</code> 替换为 <code>global.download.synology.com</code></p>
</blockquote>
</li>
</ol>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></div>

<p>然后就可以打开 docker 日志查看安装进度了，直到看到如下日志，就可以用浏览器通过 <host>:5000 端口访问 docker 容器下的 DSM 了</host></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">❯ --------------------------------------------------------</span><br><span class="line">❯  You can now login to DSM at port 5000</span><br><span class="line">❯ --------------------------------------------------------</span><br></pre></td></tr></tbody></table></figure></div>
]]></content>
      <categories>
        <category>dsm</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dsm</tag>
        <tag>virtual dsm</tag>
        <tag>synology dsm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 token 访问 git 仓库</title>
    <url>/2022/10/24/git/token-use/</url>
    <content><![CDATA[<blockquote>
<p>可以在无需增加密钥配置的情况下访问指定的单个或多个仓库</p>
</blockquote>
<p><code>这里我们以 gitlab 为例</code></p>
<h2 id="创建-access-tokens"><a href="#创建-access-tokens" class="headerlink" title="创建 access_tokens"></a>创建 access_tokens</h2><ul>
<li>创建 access token 的方式有两种<ul>
<li>项目级别，只对单个项目生效</li>
<li>帐号级别，对该帐号下的所有项目生效</li>
</ul>
</li>
</ul>
<h3 id="项目-access-token"><a href="#项目-access-token" class="headerlink" title="项目 access token"></a>项目 access token</h3><ol>
<li>先进入到指定项目</li>
<li>侧边栏 -&gt; Settings</li>
<li>Access tokens</li>
<li>配置 token 的名称，一般我们以用途为名，便于理解</li>
<li>到期时间如果有需要则设置，不设置则永不过期</li>
<li>权限范围按需设置</li>
<li>创建</li>
<li>将生成的 token 用个记事本保存下来先（离开页面或刷新后 token 都不会再显示了）</li>
</ol>
<h3 id="帐号级别"><a href="#帐号级别" class="headerlink" title="帐号级别"></a>帐号级别</h3><ol>
<li>右上角头像 -&gt; Preferences</li>
<li>侧边栏 -&gt; Access token</li>
<li>配置 token 的名称，一般我们以用途为名，便于理解</li>
<li>到期时间如果有需要则设置，不设置则永不过期</li>
<li>权限范围按需设置</li>
<li>创建</li>
<li>将生成的 token 用个记事本保存下来先（离开页面或刷新后 token 都不会再显示了）</li>
</ol>
<h2 id="配置仓库访问"><a href="#配置仓库访问" class="headerlink" title="配置仓库访问"></a>配置仓库访问</h2><ul>
<li><p>使用 token 创建仓库</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://oauth2:${token}@xxx.git # 使用刚才创建的 token</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>将已有仓库改为用 token 访问（同样适用于修改 token）</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git remote rm origin # 先删除掉已有的远端</span><br><span class="line">git remote add origin https://oauth2:${token}@xxx.git # 使用刚才创建的 token</span><br><span class="line">git fetch origin</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>使用 token 配置的仓库，能对远端仓库 pull/push 或其他操作的限制就取决于创建时配置的权限范围</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>token</tag>
        <tag>gitlab</tag>
        <tag>github</tag>
        <tag>svc</tag>
      </tags>
  </entry>
  <entry>
    <title>修复 Gitlab-CE 仓库检查错误</title>
    <url>/2024/10/30/gitlab-ce/fix-repository-checks-error/</url>
    <content><![CDATA[<blockquote>
<p>某一天在 gitlab 管理员邮箱中收到了 ‘GitLab Admin | One project failed its last repository check’ 的邮件，点开一看有一个仓库的自检过不了，于是有了这篇博客</p>
</blockquote>
<h2 id="原因调查"><a href="#原因调查" class="headerlink" title="原因调查"></a>原因调查</h2><ul>
<li><p>根据文档提示，找到自检的日志文件</p>
<p><code>/var/log/gitlab/gitlab-rails</code> for Omnibus GitLab installations.</p>
<p><code>/home/git/gitlab/log</code> for installations from source.</p>
</li>
<li><p>文件内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">E, [2024-10-30T07:24:02.126920 #1053] ERROR -- : path/repository: Could not fsck repository: dangling commit d8e2ebdd41444c2b868d6a321c3246ab6831d351</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>根据日志信息，看起来是一个 dangling commit 引起的，但是仓库本身并没有这个问题，那很可能是 gitlab 的一些缓存信息出现了问题</p>
</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li><p>查找 <code>path/repository</code> 仓库在服务器上的文件路径，这里引用官方的文档</p>
<ol>
<li>在左侧栏的底部，选择 <code>Admin</code> 。</li>
<li>选择 <code>概览</code> &gt; <code>项目</code>，选择项目。</li>
<li>定位 <code>相对路径</code> 字段。取值类似于：<code>"@hashed/0b/91/0b91...f9.git"</code></li>
</ol>
</li>
<li><p>找到项目文件路径后，我们就可以进行修复了</p>
<blockquote>
<p>为避免出现不可控的情况，请确保已经对 gitlab 备份</p>
</blockquote>
<ol>
<li><p>切换到 git 用户</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">su - git</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>执行检查(这一步出现 error 不用理会)</p>
<blockquote>
<p>将之前找到的项目文件路径替换到命令中</p>
</blockquote>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">/opt/gitlab/embedded/bin/git \</span><br><span class="line">-C /var/opt/gitlab/git-data/repositories/@hashed/0b/91/0b91...f9.git fsck</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>清理缓存</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">/opt/gitlab/embedded/bin/git \</span><br><span class="line">-C /var/opt/gitlab/git-data/repositories/@hashed/0b/91/0b91...f9.git gc</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>重新执行检查</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">/opt/gitlab/embedded/bin/git \</span><br><span class="line">-C /var/opt/gitlab/git-data/repositories/@hashed/0b/91/0b91...f9.git fsck</span><br></pre></td></tr></tbody></table></figure></div></li>
</ol>
</li>
<li><p>重新触发仓库自检</p>
</li>
</ul>
]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>自制 USBasp</title>
    <url>/2024/07/18/mcu/make-a-usbasp-for-atmel-avr-mcu/</url>
    <content><![CDATA[<blockquote>
<p>本文将 <code>STEP BY STEP</code> 介绍如何制作一个 USBAsp 烧录器，如果在制作过程中遇到问题，请先检查焊接是否有问题，再检查是否与本教程的操作是否有出入</p>
</blockquote>
<h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul>
<li>Arduino UNO</li>
<li><a class="link" href="https://oshwhub.com/clistery/usbasp-atmega8a">USBasp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 根据 PCB 打板，并准备好上面的所有元器件</li>
<li><a class="link" href="https://www.arduino.cc/en/software/">ArduinoIDE <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link" href="https://github.com/ZakKemble/AVRDUDESS/releases">AVRDUDE 软件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link" href="https://zadig.akeo.ie/">Zadig 驱动安装器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link" href="https://www.fischl.de/usbasp/">usbasp 固件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="要点提醒"><a href="#要点提醒" class="headerlink" title="要点提醒"></a>要点提醒</h2><ul>
<li>电路中的 3V3、68Ω 相当重要，不能随意更换为其他参数</li>
<li>仅支持 Atmega8、Atmega48、Atmega88 系列单片机制作 USBasp</li>
<li>如果你对你的焊接水平不够自信，那么最好先焊接好 USBasp 上的 Type-C 接口，然后再用万用表检查是否短路和虚焊，避免烧毁 PC 的 USB 接口</li>
</ul>
<h2 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a>开始制作</h2><ol>
<li><p>给 Arduino UNO 烧写 ArduinoISP 程序</p>
<ul>
<li>打开 ArduinoISP 示例代码<br><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/make-a-Usbasp-for-Atmel_AVR-MCU/ArduinoISP-code.png" alt="Open ArduinoISP examples code"></li>
<li>并将其编译上传到 Arduino UNO</li>
</ul>
</li>
<li><p>将两块板子按以下表格连接</p>
<table>
<thead>
<tr>
<th>Arduino UNO</th>
<th>USBasp(SPI2)</th>
</tr>
</thead>
<tbody><tr>
<td>5V(OUT)</td>
<td>VCC</td>
</tr>
<tr>
<td>GND</td>
<td>GND</td>
</tr>
<tr>
<td>D13</td>
<td>SCK</td>
</tr>
<tr>
<td>D12</td>
<td>MISO</td>
</tr>
<tr>
<td>D11</td>
<td>MOSI</td>
</tr>
<tr>
<td>D10</td>
<td>RST</td>
</tr>
</tbody></table>
</li>
<li><p>先烧录一个测试代码以保证 USBasp 上的单片机工作没有问题</p>
<blockquote>
<p>首先短接 USBASP、SELF_PROG 跳线<br>如果是全新的芯片，有可能会无法写入，在烧录之前需要用镊子短接一下 SLOW_SCK</p>
</blockquote>
<ul>
<li><p>编译并上传 GPIO 检测代码</p>
<div class="highlight-container" data-rel="Ino"><figure class="iseeu highlight ino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  DDRC = <span class="number">0xFF</span>;</span><br><span class="line">  PORTC = <span class="number">0xFF</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  PORTC = <span class="number">0xFE</span>;</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">  PORTC = <span class="number">0xFD</span>;</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>等待写入完成后，PC0、PC1 这两个 IO 口连接的 LED 将会开始交替闪烁（如果没有输出，那你就得检查下焊接了）</p>
</li>
</ul>
</li>
<li><p>通过 AVRDUDE 配置 USBasp</p>
<blockquote>
<p>如果是全新的芯片，有可能会无法写入，在烧录之前需要用镊子短接一下 SLOW_SCK</p>
</blockquote>
<ul>
<li><p>打开 AVRDUDE，并烧录固件，我这里使用的是 Atmega8a<br><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/make-a-Usbasp-for-Atmel_AVR-MCU/atmega8-flash-fireware.png" alt="flash firmware"></p>
</li>
<li><p>设置熔丝位（千万千万要小心，设置错误会导致锁芯片）</p>
<ul>
<li>这里提供几个芯片的熔丝设置<table>
<thead>
<tr>
<th>TARGET</th>
<th>LFUSE</th>
<th>HFUSE</th>
</tr>
</thead>
<tbody><tr>
<td>Atmega8</td>
<td>0xEF</td>
<td>0xC9</td>
</tr>
<tr>
<td>Atmega48</td>
<td>0xFF</td>
<td>0xDD</td>
</tr>
<tr>
<td>Atmega88</td>
<td>0xFF</td>
<td>0xDD</td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<p>如果你的芯片与我使用的不一样，那就需要参考芯片手册，并在 <a class="link" href="https://www.engbedded.com/fusecalc">https://www.engbedded.com/fusecalc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 先尝试熔丝位设置</p>
</blockquote>
<p><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/make-a-Usbasp-for-Atmel_AVR-MCU/atmega8-fuse.png" alt="atmega8-fuse"></p>
</li>
</ul>
<blockquote>
<p>断开 SELF_PROG 跳线</p>
</blockquote>
</li>
<li><p>安装驱动</p>
<ul>
<li>断开两块板子的连接，将 USBasp 连接到 PC</li>
<li>打开设备管理器，没问题的话将会显示 USBasp，如果显示的是 libusb 那就需要安装驱动</li>
<li>打开 Zadig，在 Options 中勾选 “List ALL Devices”</li>
<li>在第一个下拉框中选中 libusb 设备</li>
<li>在驱动选择中选中 WinUSB，然后点击 Install WCID Diver</li>
<li>安装完成后设备管理器应该就正常显示 USBasp 了</li>
</ul>
</li>
<li><p>在 ArduinoIDE 中使用 USBasp 给其他芯片烧写 bootloader</p>
<blockquote>
<p>这里以 Atmega328P-AU 为例</p>
</blockquote>
<p> <img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/make-a-Usbasp-for-Atmel_AVR-MCU/USBasp-flash-atmega328p.png" alt="USBasp flash atmega328p"></p>
</li>
</ol>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>这块板子也可以作为最小板使用，只需要断开 USBASP 跳线，一些外围电阻、稳压管可以去掉</p>
]]></content>
      <categories>
        <category>Programmer</category>
      </categories>
      <tags>
        <tag>MCU</tag>
        <tag>Atmel</tag>
        <tag>Arduino</tag>
        <tag>Programmer</tag>
        <tag>AVR</tag>
      </tags>
  </entry>
  <entry>
    <title>禁用 PC 版微信的图片文字识别功能</title>
    <url>/2023/08/02/other/disable-wechat-ocr/</url>
    <content><![CDATA[<blockquote>
<p>自从微信增加了自动识别图片文字功能后，确实带来了一些便利，可以不用再对着截图一个字一个字敲了，但是同时也带来了不方便的地方，有些图片需要放大或拖拽时便显得不那么友好了，说到底还是制杖产品经理搞出来的反人类交互体验。</p>
</blockquote>
<h2 id="开始表演"><a href="#开始表演" class="headerlink" title="开始表演"></a>开始表演</h2><ol>
<li>推出微信</li>
<li>在资源管理器中的地址栏中输入 %AppData%，并回车</li>
<li>然后找到 Tencent\WeChat\XPlugin\Plugins\WeChatOCR</li>
<li>在 WeChatOCR 打开名称为数字的文件，然后再打开 extracted，如：WeChatOCR\7053\extracted</li>
<li>删除 WeChatOCR.exe</li>
<li>创建一个空白文本文档，将名字修改为 WeChatOCR.exe 并保存</li>
<li>重新打开微信，图片中的文件就不会再自动转换为文本了</li>
</ol>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>diss wechat</tag>
        <tag>tencent</tag>
        <tag>制杖产品</tag>
      </tags>
  </entry>
  <entry>
    <title>在 win10 上安装基于 embedded 包的 python 环境</title>
    <url>/2024/01/11/python/setup-python-with-embedded-pkg-on-win10/</url>
    <content><![CDATA[<blockquote>
<p>便携可移植，啥也不说了，干就完了</p>
</blockquote>
<h2 id="安装-embedded-package"><a href="#安装-embedded-package" class="headerlink" title="安装 embedded package"></a>安装 embedded package</h2><ul>
<li><p>安装<br>通过 <a class="link" href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 下载最新或你需要的版本，对应的 embedded 包即可</p>
</li>
<li><p>解压</p>
<blockquote>
<p>这个就不谈了，随意</p>
</blockquote>
</li>
<li><p>配置</p>
<ol>
<li><p>进入到刚才解压的目录中</p>
</li>
<li><p>找到 <code>python&lt;version&gt;.zip</code> 的压缩包，将其中的内容解压到 Lib 目录，没有就创建一个</p>
</li>
<li><p>修改 <code>python&lt;version&gt;._pth</code>，将内容修改为：</p>
 <div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="code"><pre><span class="line">.\Lib</span><br><span class="line">.\Scripts</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to run site.main() automatically</span></span><br><span class="line"><span class="keyword">import</span> site</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>修改 site-packages 默认路径<br> 创建 <code>sitecustomize.py</code></p>
 <div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>检查路径配置是否正确</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">python -c "import sys;print(sys.path)"</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>安装 pip</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>参阅 <a class="link" href="https://pip.pypa.io/en/stable/installation/">pip documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>embedded package</tag>
        <tag>win10</tag>
        <tag>environment</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序解包</title>
    <url>/2022/12/09/reverse/unpkg-wx-app/</url>
    <content><![CDATA[<blockquote>
<p>通过解包小程序文件我们可以做一些小程序内的代码分析和资源获取</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="拿到-wxapkg"><a href="#拿到-wxapkg" class="headerlink" title="拿到 wxapkg"></a>拿到 wxapkg</h3><p>第一步先拿到小程序的 wxapkg 文件</p>
<h4 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h4><h5 id="安卓-需要root设备"><a href="#安卓-需要root设备" class="headerlink" title="安卓(需要root设备)"></a>安卓(需要root设备)</h5><p>在以下目录中找到小程序包，如果不确定是哪一个，直接全部删除，然后再重新打开一遍你需要的小程序，然后再看目录下的文件</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">/data/data/com.tencent.mm/MicroMsg/{{user哈希值}}/appbrand/pkg/</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="windows-需要解密"><a href="#windows-需要解密" class="headerlink" title="windows(需要解密)"></a>windows(需要解密)</h5><p>先打开微信设置，然后找到文件管理</p>
<p>如下所示，然后点击打开文件夹</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/medias/images/wx-pc-settings-filemanager.png" alt="微信文件管理"></p>
<p>在打开的文件夹中再找到 <code>Applet</code> 文件夹并打开，就可以看到一堆小程序文件夹了，然后找到你需要的即可<br>如果不确定是哪一个，直接全部删除，然后再重新打开一遍你需要的小程序即可</p>
<h5 id="解密-wxapkg"><a href="#解密-wxapkg" class="headerlink" title="解密 wxapkg"></a>解密 wxapkg</h5><p>如果你是通过 windows 端获取到的 wxapkg，那么在这之前还需要进行一次解密操作</p>
<p>下载解密工具 <a class="link" href="https://github.com/BlackTrace/pc_wxapkg_decrypt">https://github.com/BlackTrace/pc_wxapkg_decrypt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">pc_wxapkg_decrypt.exe -wxid &lt;appid&gt; -in &lt;name&gt;.wxapkg -out &lt;path&gt;</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="解压-wxapkg"><a href="#解压-wxapkg" class="headerlink" title="解压 wxapkg"></a>解压 wxapkg</h3><p>下载解压工具 <a class="link" href="https://github.com/qwerty472123/wxappUnpacker">https://github.com/qwerty472123/wxappUnpacker <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">node wuWxapkg.js &lt;name&gt;.wxapkg</span><br></pre></td></tr></tbody></table></figure></div>

<p>完事~</p>
]]></content>
      <categories>
        <category>reverse</category>
      </categories>
      <tags>
        <tag>reverse</tag>
        <tag>wechat</tag>
        <tag>wxapp</tag>
        <tag>wxapkg</tag>
      </tags>
  </entry>
  <entry>
    <title>避免 SVN 每次都需要输入密码</title>
    <url>/2023/09/26/svn/svn-save-password/</url>
    <content><![CDATA[<blockquote>
<p>由于每次 svn 操作都要求输入账号密码，为了<i class="hover-effect" data-hover-text="偷懒">优雅</i>的使用 svn，在搜索引擎上找了一圈，全都是让你去改 config、server 文件，实际操作下来然并卵，只会浪费你的一天。原因是自从 svn 1.12 版本之后<a class="link" href="https://subversion.apache.org/docs/release-notes/1.12#client-server-improvements">发行说明 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，就不再支持明文保存密码了。</p>
</blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Ubuntu 20.04.6 LTS</li>
<li>SVN 1.13.0 (r1867053)</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>由于新版本的 svn 使用了 gpg-agent 来保存秘钥信息，所以我们需要对 gpg-agent 进行配置</p>
</blockquote>
<ol>
<li><p>安装和配置 gpg-agent</p>
<ul>
<li><p>安装 gpg agent</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install gnupg-agent</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>安装 pinentry-tty</p>
<blockquote>
<p>pinentry-tty 是更简单的文本界面</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install pinentry-tty</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pinentry-program /usr/bin/pinentry-tty"</span> &gt;&gt; ~/.gnupg/gpg-agent.conf</span><br><span class="line">gpg-connect-agent reloadagent /bye</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
<li><p>修改 .profile 文件，将以下内容添加到文件尾部</p>
 <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">export GPG_TTY=$(tty)</span><br></pre></td></tr></tbody></table></figure></div>

<p> 保存后执行 <code>. ~/.profile</code> 使配置生效</p>
</li>
<li><p>删除 svn 已保存的认证信息</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.subversion/auth</span><br></pre></td></tr></tbody></table></figure></div>

<p> 重新执行 svn 操作，会提示你输入用户密码，同时 GPG-Agent 会缓存密码，下次操作时就不需要再次输入密码了</p>
</li>
<li><p>修改缓存过期时间</p>
<blockquote>
<p>由于 gpg-agent 会将秘钥缓存，那既然是缓存，那肯定会过期，所以我们还要修改 gpg-agent 的配置，来延长缓存有效期，但是重启系统后还是会失效</p>
</blockquote>
<p> 修改 ~/.gnupg/gpg-agent.conf 文件，添加以下内容<br> <strong>注意：这将会降低安全性</strong></p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">default-cache-ttl 0 <span class="comment"># 缓存时间，0 表示永久</span></span><br><span class="line">max-cache-ttl 0</span><br></pre></td></tr></tbody></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>svn</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>安装及配置 v2ray</title>
    <url>/2023/04/21/tools/v2ray-install-setup/</url>
    <content><![CDATA[<blockquote>
<p>基于 ubuntu 22.04 搭建 Nginx + TLS + VMess + WebSocket + HTTP/2</p>
</blockquote>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li>墙外 VPS</li>
</ul>
<h2 id="安装基础环境"><a href="#安装基础环境" class="headerlink" title="安装基础环境"></a>安装基础环境</h2><ul>
<li>安装 V2ray</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>安装 Nginx</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">apt install nginx</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="配置-V2ray-服务"><a href="#配置-V2ray-服务" class="headerlink" title="配置 V2ray 服务"></a>配置 V2ray 服务</h2><ul>
<li>添加用户</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">useradd -s /usr/sbin/nologin v2ray</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>自动启动</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">systemctl enable v2ray</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>修改服务启动用户</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/v2ray.service</span><br></pre></td></tr></tbody></table></figure></div>

<p>添加以下内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">User=v2ray</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="配置-Nginx-TLS"><a href="#配置-Nginx-TLS" class="headerlink" title="配置 Nginx + TLS"></a>配置 Nginx + TLS</h2><ul>
<li>创建 Nginx 配置</li>
</ul>
<p><code>vim /etc/nginx/sites-available/example.com.conf</code></p>
<p>将以下内容粘贴到文件中</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line"></span><br><span class="line">        # Add index.php to the list if you are using PHP</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name example.com;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>启用配置</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ln -s /etc/nginx/sites-available/example.com.conf /etc/nginx/sites-enabled/example.com.conf</span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>配置 SSL 证书</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 acme.sh</span></span><br><span class="line">curl https://get.acme.sh | sh -s email=my@example.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成证书并验证域名</span></span><br><span class="line">acme.sh --issue -d example.com --nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装证书</span></span><br><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--key-file       /path/to/keyfile/in/nginx/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">--reloadcmd     "service nginx force-reload"</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看证书</span></span><br><span class="line">acme.sh --info -d example.com</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>配置 Nginx + TLS</li>
</ul>
<p>将以下内容添加到 Nginx 配置文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    listen [::]:443 ssl;</span><br><span class="line"></span><br><span class="line">    root /var/www/html/;</span><br><span class="line"></span><br><span class="line">    ssl_certificate       /root/.acme.sh/example.com_ecc/fullchain.cer;</span><br><span class="line">    ssl_certificate_key   /root/.acme.sh/example.com_ecc/example.com.key;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_cache shared:MozSSL:10m;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">    ssl_protocols         TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers           ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line"></span><br><span class="line">    server_name           example.com;</span><br><span class="line">    location /vvray {</span><br><span class="line">        if ($http_upgrade != "websocket") {</span><br><span class="line">            return 404;</span><br><span class="line">        }</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_pass http://127.0.0.1:12345;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection "upgrade";</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        # Show real IP in v2ray access.log</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>重新加载 Nginx 配置</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="启动-V2ray"><a href="#启动-V2ray" class="headerlink" title="启动 V2ray"></a>启动 V2ray</h2><ul>
<li>配置文件</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vim /usr/local/etc/v2ray/config.json</span><br></pre></td></tr></tbody></table></figure></div>

<p>将以下内容添加到文件中</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"log"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"loglevel"</span><span class="punctuation">:</span> <span class="string">"warning"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"inbounds"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"listen"</span><span class="punctuation">:</span> <span class="string">"127.0.0.1"</span><span class="punctuation">,</span> <span class="comment">// 不再向外直接开放</span></span><br><span class="line">      <span class="attr">"port"</span><span class="punctuation">:</span> <span class="number">12345</span><span class="punctuation">,</span> <span class="comment">// 与 nginx 反向代理端口一致</span></span><br><span class="line">      <span class="attr">"protocol"</span><span class="punctuation">:</span> <span class="string">"vmess"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"settings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"clients"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"xxx"</span> <span class="comment">// 可通过 v2ray uuid 命令生成</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"streamSettings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"network"</span><span class="punctuation">:</span> <span class="string">"ws"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"wsSettings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"path"</span><span class="punctuation">:</span> <span class="string">"/vvray"</span> <span class="comment">// 与 nginx 反向代理一致</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"outbounds"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"protocol"</span><span class="punctuation">:</span> <span class="string">"freedom"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li>启动服务</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">systemctl start v2ray</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul>
<li>clash 配置</li>
</ul>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'xxx'</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">vmess</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">example.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">uuid:</span> <span class="string">43cb6fce-a840-a468-afe5-99151333b8dd</span></span><br><span class="line">    <span class="attr">alterId:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">cipher:</span> <span class="string">auto</span></span><br><span class="line">    <span class="attr">tls:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">skip-cert-verify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">network:</span> <span class="string">ws</span></span><br><span class="line">    <span class="attr">ws-opts:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/vvray</span></span><br><span class="line">    <span class="comment"># headers: # 按需配置</span></span><br><span class="line">    <span class="comment">#   Host: example.com</span></span><br><span class="line">    <span class="comment">#   User-Agent: 'xxx'</span></span><br></pre></td></tr></tbody></table></figure></div>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>v2ray</tag>
        <tag>clash</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>at 命令</title>
    <url>/2022/10/18/ubuntu/at/</url>
    <content><![CDATA[<blockquote>
<p>at 命令可以将某些命令或任务放到指定的时间自动执行</p>
</blockquote>
<h5 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h5><blockquote>
<p><code>at 命令与 jobs 命令有所不同，当登录用户退出后 jobs 命令的任务会被取消，而 at 命令则不会</code></p>
</blockquote>
<h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">-V 输出版本号</span><br><span class="line">-f 指定脚本文件</span><br><span class="line">-l 查看查看任务队列，等同于atq</span><br><span class="line">-d 删除指定任务，等同于atrm</span><br><span class="line">-r 删除指定任务，等同于atrm</span><br><span class="line">-c 打印任务的内容到标准输出</span><br><span class="line"></span><br><span class="line">atrm 删除指定任务</span><br><span class="line">atq 查看任务队列</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>创建指定时间执行命令的任务</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">~ at 17:13 # 设定当时间到达 17:13 时</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">"hello"</span> &gt;&gt; a <span class="comment"># 将 `hello` 输出到 a 文件中</span></span></span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash">&lt;EOT&gt; <span class="comment"># 按下 `ctrl+d` 创建任务</span></span></span><br><span class="line">job 9 at Tue Oct 18 17:13:00 2022 # 返回任务 id 为 9 并将在指定的时间执行该任务</span><br></pre></td></tr></tbody></table></figure></div>

<p>创建指定时间执行脚本的任务</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">at -f upload.sh 17:13</span><br></pre></td></tr></tbody></table></figure></div>

<p>或者也可以使用立即执行的方式来实现等同于 <code>&amp;</code> 的效果</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">at -f upload.sh now</span><br></pre></td></tr></tbody></table></figure></div>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu20.04 桌面版转换为服务器版</title>
    <url>/2025/01/01/ubuntu/desktop-convert-server/</url>
    <content><![CDATA[<blockquote>
<p>闲来无事瞅了一眼平时拿来做服务器的主机，发现硬盘灯一直常亮，看了一下占用，发现是 <code>/usr/bin/gnome-shell</code> 占用了大量的内存，同时还有 20MB/s 的读写速度。因为之前这台机器是作为桌面开发环境使用的，所以直接安装了桌面版的 Ubuntu 20.04，现在主要是作为服务器使用，所以我将其转换为服务器版本。</p>
</blockquote>
<h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><ul>
<li>Ubuntu 20.04.3 LTS</li>
</ul>
<h2 id="转换步骤"><a href="#转换步骤" class="headerlink" title="转换步骤"></a>转换步骤</h2><ol>
<li><p>安装 server</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install ubuntu-server</span><br><span class="line">sudo reboot</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>设置默认用户界面</p>
<ul>
<li><p>设置为终端模式</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl set-default multi-user.target</span><br><span class="line">sudo reboot</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>设置为图形模式</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl set-default graphical.target</span><br><span class="line">sudo reboot</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
<li><p>移除桌面依赖软件包</p>
<blockquote>
<p>如果后期还想使用桌面版，则不要进行这一步操作，只需要执行上一步的设置为图形模式即可恢复桌面环境。</p>
</blockquote>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt purge ubuntu-desktop -y &amp;&amp; sudo apt autoremove -y &amp;&amp; sudo apt autoclean</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选</span></span><br><span class="line">sudo apt purge xorg-docs-core xorg xserver-*</span><br><span class="line">sudo reboot</span><br></pre></td></tr></tbody></table></figure></div>

<ul>
<li><p>在移除后可以使用以下命令再检查一下是否还有残留的软件包</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt list --installed</span><br></pre></td></tr></tbody></table></figure></div>

<p>  这里给出一些软件包，可以根据名称过滤一下</p>
<p>  <code>ubuntu-minimal-desktop</code> <code>ubuntu-advantage-desktop-daemon</code> <code>ubuntu-docs</code> <code>ubuntu-mono</code> <code>ubuntu-release-upgrader-gtk</code> <code>ubuntu-report</code> <code>ubuntu-session</code> <code>ubuntu-wallpapers-jammy</code> <code>ubuntu-wallpapers</code></p>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>jobs 命令</title>
    <url>/2022/10/18/ubuntu/jobs/</url>
    <content><![CDATA[<blockquote>
<p>jobs是Linux命令。jobs命令显示了当前shell环境中已启动的作业状态。如果JobID参数没有指定特定作业，就显示所有的活动的作业的状态信息。如果报告了一个作业的终止，shell从当前的shell环境已知的列表中删除作业的进程标识。</p>
</blockquote>
<ul>
<li>job 命令通常与 wait、fg、bg、kill 命令一起使用</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>命令挂起</p>
<ul>
<li>使用 wget 下载一个文件 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget <span class="variable">${remote_file}</span> .</span></span><br></pre></td></tr></tbody></table></figure></div></li>
<li>然后在下载过程中按下 <code>ctrl+z</code> 将任务挂起 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">downloading...</span><br><span class="line">^Z # 这时按下了 `ctrl+z`</span><br><span class="line">[1]  + 140578 suspended  wget ${remote_file} . # 下载任务被挂起，任务 id 为 1</span><br></pre></td></tr></tbody></table></figure></div></li>
<li>通过 jobs -l 查看被挂起的任务 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span> -l</span></span><br><span class="line">[1]  + 140578 suspended  wget ${remote_file} . # 有一个 id 为 1 的任务 pid 为 140578</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
<li><p>将任务通过 fg 恢复到前台继续执行</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">fg</span> %1 <span class="comment"># % 是必须的，%1 标识任务 id 为 1 的任务</span></span></span><br><span class="line">[1]  + 140578 continued  wget ${remote_file} .</span><br><span class="line">downloading... # 下载任务已经恢复到前台并继续下载</span><br></pre></td></tr></tbody></table></figure></div>
<p> 这时我们仍然可以再次使用 <code>ctrl+z</code> 将任务挂起</p>
</li>
<li><p>其他 bg、wait、kill 与 fg 的使用方式类似，都是通过 <code>%{任务id}</code> 的方式进行对任务的操作，这里就不再过多讨论</p>
</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Ubuntu 中用命令行查看流量占用</title>
    <url>/2022/10/18/ubuntu/nethogs/</url>
    <content><![CDATA[<blockquote>
<p>使用 nethogs 工具，我们可以 top 命令一样查看网卡\进程的流量占用情况</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install nethogs</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo nethogs</span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>如果没有报错的话你就会看到下面的界面<br><img lazyload="" src="/images/loading.svg" data-src="/medias/images/nethogs.png" alt="nethogs运行效果"></p>
</blockquote>
<h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">-V : 显示版本</span><br><span class="line">-h : 显示帮助信息</span><br><span class="line">-b : 比 -t 更为详细的跟踪模式</span><br><span class="line">-d : 数据刷新时间 如 nethogs -d 1 就是每秒刷新一次</span><br><span class="line">-v : 查看模式(0 = KB/s, 1 = 显示总流量单位KB, 2 = 显示总流量单位B, 3 = 显示总流量单位MB). 默认为 0.</span><br><span class="line">-c : 刷新次数</span><br><span class="line">-t : 跟踪模式</span><br><span class="line"></span><br><span class="line">在 nethogs 运行过程中按下(类似 top 快捷键):</span><br><span class="line">q: 退出</span><br><span class="line">s: 按发送流量排序</span><br><span class="line">r: 按接收流量排序</span><br><span class="line">m: 切换查看模式 -v</span><br></pre></td></tr></tbody></table></figure></div>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>net</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 添加硬盘并分区</title>
    <url>/2024/09/23/ubuntu/new-disk-partition-gpt-ext4/</url>
    <content><![CDATA[<blockquote>
<p>本教程将教会你如何在 Ubuntu 下如何对新加硬盘分区并挂载<br>我使用了一块 1T 的东芝机械硬盘，所以本文将使用 GPT 分区表 + EXT4 文件系统的方式操作新硬盘</p>
</blockquote>
<h2 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h2><h3 id="GPT（GUID-Partition-Table）"><a href="#GPT（GUID-Partition-Table）" class="headerlink" title="GPT（GUID Partition Table）"></a>GPT（GUID Partition Table）</h3><ul>
<li>用途：一种分区表布局，用来管理硬盘的分区。它是MBR（Master Boot Record）的现代替代方案。</li>
<li>特性：<ul>
<li>支持大容量硬盘，最高支持 18EB（1EB = 1024PB）。</li>
<li>每个硬盘上可以有 128个以上的主分区（MBR只支持4个主分区）。</li>
<li>GPT 分区更安全，每个分区表都有备份，并且有 CRC 校验防止分区表损坏。</li>
<li>必须在 UEFI 启动模式 下使用。</li>
</ul>
</li>
</ul>
<h3 id="EXT4（Fourth-Extended-Filesystem）"><a href="#EXT4（Fourth-Extended-Filesystem）" class="headerlink" title="EXT4（Fourth Extended Filesystem）"></a>EXT4（Fourth Extended Filesystem）</h3><ul>
<li>用途：一种文件系统，通常用于 Linux 环境中存储和管理文件。</li>
<li>特性：<ul>
<li>是 EXT 文件系统系列的第四代，提供了更高的性能和可靠性。</li>
<li>支持单个文件大小最大为 16TB，整个文件系统最大可以达到 1EB。</li>
<li>提供更好的碎片管理、延迟分配（Delayed Allocation）、日志记录功能（Journaling），使其在性能和数据安全性上有较大提升。</li>
<li>与较老的 EXT3 文件系统向后兼容。</li>
</ul>
</li>
</ul>
<h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p><strong>!!! 数据无价，请谨慎操作 !!!</strong></p>
<p><strong>!!! 数据无价，请谨慎操作 !!!</strong></p>
<p><strong>!!! 数据无价，请谨慎操作 !!!</strong></p>
<h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><ol>
<li><p>确认新加硬盘名称</p>
<p> 首先，使用 lsblk 或 fdisk -l 命令来列出当前系统中的硬盘设备，并确认要处理的硬盘名称（通常是 /dev/sdX，X 代表硬盘的字母编号，如 /dev/sdb）。</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></tbody></table></figure></div>

<p> 可能有如下输出，这里 sdb 就是我新加硬盘的名称</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0 931.5G  0 disk</span><br><span class="line">├─sda1   8:1    0 139.7G  0 part /</span><br><span class="line">└─...</span><br><span class="line">sdb      8:16   0 931.5G  0 disk</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>创建 GPT 分区表</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo gdisk /dev/sdb</span><br></pre></td></tr></tbody></table></figure></div>

<p> 进入 gdisk 后，按以下顺序操作：</p>
<ul>
<li>输入 o 清除现有的分区表并创建一个新的 GPT 分区表。</li>
<li>输入 w 保存并退出。</li>
</ul>
</li>
</ol>
<h2 id="操作分区"><a href="#操作分区" class="headerlink" title="操作分区"></a>操作分区</h2><ol>
<li><p>创建默认分区</p>
<blockquote>
<p>我这里直接全盘分一个区，如果你要分多个区也是类似操作，只是需要修改分区号和起始和结束扇区，这里不再赘述</p>
</blockquote>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo gdisk /dev/sdb</span><br></pre></td></tr></tbody></table></figure></div>

<p> 进入 gdisk 后：</p>
<ul>
<li>输入 n 来创建一个新分区。</li>
<li>按回车键接受默认的分区号。</li>
<li>输入分区的起始扇区和结束扇区，通常默认值是从磁盘的开头到结尾，这样可以使用整个硬盘。</li>
<li>输入 w 保存并退出。</li>
</ul>
</li>
<li><p>设置分区的文件系统格式</p>
<p> 将刚才创建的 /dev/sdb1 分区的文件系统格式设置为 ext4</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>挂载分区</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkdir -p /storage</span><br><span class="line">sudo mount /dev/sdb1 /storage</span><br></pre></td></tr></tbody></table></figure></div></li>
</ol>
<h2 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h2><ol>
<li><p>查看分区信息</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo blkid /dev/sdb1</span><br></pre></td></tr></tbody></table></figure></div>

<p> 记录下 UUID=xxxxx 等号后面的内容，写到下面的 fstab</p>
</li>
<li><p>修改 fstab</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br></pre></td></tr></tbody></table></figure></div>

<p> 在文件末尾添加</p>
 <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">UUID=xxxxxxxxx /storage ext4 defaults 0 2</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>为了防止手抖写错，验证一下</p>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo mount -a</span><br></pre></td></tr></tbody></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync 命令</title>
    <url>/2022/10/18/ubuntu/rsync/</url>
    <content><![CDATA[<blockquote>
<p>rsync 全称 Remote Sync.<br>rsync是linux系统下的数据镜像备份工具。使用快速增量备份工具Remote Sync可以远程同步，支持本地复制，或者与其他SSH、rsync主机同步。</p>
</blockquote>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">-v, --verbose 详细模式输出</span><br><span class="line">-q, --quiet 精简输出模式</span><br><span class="line">-c, --checksum 打开校验开关，强制对文件传输进行校验</span><br><span class="line">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD</span><br><span class="line">-r, --recursive 对子目录以递归模式处理</span><br><span class="line">-R, --relative 使用相对路径信息</span><br><span class="line">-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。</span><br><span class="line">--backup-dir 将备份文件(如~filename)存放在在目录下。</span><br><span class="line">-suffix=SUFFIX 定义备份文件前缀</span><br><span class="line">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)</span><br><span class="line">-l, --links 保留软链结</span><br><span class="line">-L, --copy-links 想对待常规文件一样处理软链结</span><br><span class="line">--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结</span><br><span class="line">--safe-links 忽略指向SRC路径目录树以外的链结</span><br><span class="line">-H, --hard-links 保留硬链结</span><br><span class="line">-p, --perms 保持文件权限</span><br><span class="line">-o, --owner 保持文件属主信息</span><br><span class="line">-g, --group 保持文件属组信息</span><br><span class="line">-D, --devices 保持设备文件信息</span><br><span class="line">-t, --times 保持文件时间信息</span><br><span class="line">-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间</span><br><span class="line">-n, --dry-run现实哪些文件将被传输</span><br><span class="line">-W, --whole-file 拷贝文件，不进行增量检测</span><br><span class="line">-x, --one-file-system 不要跨越文件系统边界</span><br><span class="line">-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节</span><br><span class="line">-e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步</span><br><span class="line">--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息</span><br><span class="line">-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件</span><br><span class="line">--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件</span><br><span class="line">--delete 删除那些DST中SRC没有的文件</span><br><span class="line">--delete-excluded 同样删除接收端那些被该选项指定排除的文件</span><br><span class="line">--delete-after 传输结束以后再删除</span><br><span class="line">--ignore-errors 及时出现IO错误也进行删除</span><br><span class="line">--max-delete=NUM 最多删除NUM个文件</span><br><span class="line">--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输</span><br><span class="line">--force 强制删除目录，即使不为空</span><br><span class="line">--numeric-ids 不将数字的用户和组ID匹配为用户名和组名</span><br><span class="line">--timeout=TIME IP超时时间，单位为秒</span><br><span class="line">-I, --ignore-times 不跳过那些有同样的时间和长度的文件</span><br><span class="line">--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间</span><br><span class="line">--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0</span><br><span class="line">-T --temp-dir=DIR 在DIR中创建临时文件</span><br><span class="line">--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份</span><br><span class="line">-P 等同于 --partial</span><br><span class="line">--progress 显示备份过程</span><br><span class="line">-z, --compress 对备份的文件在传输时进行压缩处理</span><br><span class="line">--exclude=PATTERN 指定排除不需要传输的文件模式</span><br><span class="line">--include=PATTERN 指定不排除而需要传输的文件模式</span><br><span class="line">--exclude-from=FILE 排除FILE中指定模式的文件</span><br><span class="line">--include-from=FILE 不排除FILE指定模式匹配的文件</span><br><span class="line">--version 打印版本信息</span><br><span class="line">--address 绑定到特定的地址</span><br><span class="line">--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件</span><br><span class="line">--port=PORT 指定其他的rsync服务端口</span><br><span class="line">--blocking-io 对远程shell使用阻塞IO</span><br><span class="line">-stats 给出某些文件的传输状态</span><br><span class="line">--progress 在传输时现实传输过程</span><br><span class="line">--log-format=formAT 指定日志文件格式</span><br><span class="line">--password-file=FILE 从FILE中得到密码</span><br><span class="line">--bwlimit=KBPS 限制I/O带宽，KBytes per second</span><br><span class="line">-h, --help 显示帮助信息</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul>
<li><p>从 remote 断点续传 xxx.tar 到当前目录</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">rsync -P --rsh=ssh remote:xxx.tar .</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>从 remote 传输目录 /xxx/xxx 到当前目录</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">rsync -r --rsh=ssh remote:/xxx/xxx .</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>scp 命令</title>
    <url>/2022/10/18/ubuntu/scp/</url>
    <content><![CDATA[<blockquote>
<p>Linux scp 命令用于 Linux 之间复制文件和目录。<br>scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。<br>scp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版。</p>
</blockquote>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">-B 使用批处理模式（传输过程中不询问传输口令或短语）</span><br><span class="line">-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</span><br><span class="line">-p 保留原文件的修改时间，访问时间和访问权限。</span><br><span class="line">-q 不显示传输进度条。</span><br><span class="line">-r 递归复制整个目录。</span><br><span class="line">-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</span><br><span class="line">-l limit 限定用户所能使用的带宽，以Kbit/s为单位。</span><br><span class="line">-P port：注意是大写的P, port是指定数据传输用到的端口号</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>从本地复制到远程</p>
<ul>
<li><p>复制单个文件</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">scp xx.txt root@remote:/</span><br><span class="line">scp xx.txt remote:/</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>复制目录</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">scp -r dir remote:/</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
</li>
<li><p>从远程复制到本地<br>  将参数顺序颠倒即可</p>
</li>
<li><p>指定端口</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">scp -P 3301 xx.txt remote:/</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>script 命令</title>
    <url>/2022/10/25/ubuntu/script/</url>
    <content><![CDATA[<blockquote>
<p>有时我们需要在脚本中加入一些有进度状态的命令，为了既能让我们的脚本无需人工守候，又能方便的监测到这些命令的执行情况时，就该 script 登场了</p>
</blockquote>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">-a 以追加的形式，将命令的执行状态输出到指定的文件中</span><br><span class="line">-c 运行指定命令</span><br><span class="line">-q 让 -c 指定的命令以静默方式运行，比如删除文件时的确认提示</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><ul>
<li><p>记录 scp 过程</p>
  <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">script -q -a record.log -c "scp xxx.zip remote:/"</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>当然 script 能做到的不止这些，你还可以使用该命令去记录每个 shell 用户的所有操作，等等</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh 实现指定用户仅认证不登录</title>
    <url>/2022/11/15/ubuntu/ssh-no-login/</url>
    <content><![CDATA[<blockquote>
<p>当我们有 ssh 代理代理转发的需求时，就可以在跳板机上做一个仅任认证不登录的用户，用来防止跳板机被以外登录</p>
</blockquote>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo adduser jump</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="配置-sshd"><a href="#配置-sshd" class="headerlink" title="配置 sshd"></a>配置 sshd</h3><p>先切换到 jump 用户</p>
<h4 id="欢迎信息"><a href="#欢迎信息" class="headerlink" title="欢迎信息"></a>欢迎信息</h4><p><code>vim /home/jump/banner</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Ok! You've successfully authenticated.</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="创建-authorized-keys"><a href="#创建-authorized-keys" class="headerlink" title="创建 authorized_keys"></a>创建 authorized_keys</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir /home/jump/.ssh &amp;&amp; chmod 755 /home/jump/.ssh</span><br><span class="line">vim /home/jump/.ssh/authorized_keys</span><br></pre></td></tr></tbody></table></figure></div>

<p>将公钥添加到 <code>authorized_keys</code> 文件中</p>
<h4 id="修改-sshd-config"><a href="#修改-sshd-config" class="headerlink" title="修改 sshd_config"></a>修改 sshd_config</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure></div>

<p>将下面的内容添加到 <code>sshd_config</code> 文件末尾</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Match User jump</span><br><span class="line">  Banner /home/jump/banner</span><br><span class="line">  AuthorizedKeysFile /home/jump/.ssh/authorized_keys</span><br><span class="line">  PasswordAuthentication no</span><br><span class="line">  PubkeyAuthentication yes</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="重启-sshd"><a href="#重启-sshd" class="headerlink" title="重启 sshd"></a>重启 sshd</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></tbody></table></figure></div>

<p>到这里就可以通过正常的 ssh 方式登录 jump 用户了，而且登录时第一行会看到 <code>banner</code> 文件中的内容</p>
<h3 id="修改-shell-禁用登录"><a href="#修改-shell-禁用登录" class="headerlink" title="修改 shell (禁用登录)"></a>修改 shell (禁用登录)</h3><p><code>vim /etc/passwd</code></p>
<p>找到 <code>jump</code>，将最后的 <code>/bin/bash</code> 改为 <code>/bin/false</code></p>
<p>现在再通过 ssh 的方式登录，会先登录成功，然后紧接着就被关闭连接</p>
<p><code>到这里就已经基本实现了仅认证不登录的实现</code></p>
<h3 id="优化部分"><a href="#优化部分" class="headerlink" title="优化部分"></a>优化部分</h3><h4 id="去除登录后显示的系统信息登录信息"><a href="#去除登录后显示的系统信息登录信息" class="headerlink" title="去除登录后显示的系统信息登录信息"></a>去除登录后显示的系统信息登录信息</h4><p>在登录成功后默认会展示一大堆内容，这些是不需要的，所以如何隐藏它？</p>
<p>很简单，直接在 <code>jump</code> 用户目录下创建一个 <code>.hushlogin</code> 文件即可</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">touch /home/jump/.hushlogin</span><br></pre></td></tr></tbody></table></figure></div>

<p>然后再通过 ssh 登录就看不到默认输出的一大堆内容了，就只会看到 <code>banner</code> 文件中的内容</p>
<h4 id="优化显示登录信息"><a href="#优化显示登录信息" class="headerlink" title="优化显示登录信息"></a>优化显示登录信息</h4><p>如果只想显示登录信息改如何修改？</p>
<p>还是先按照上面的内容，通过创建 <code>.hushlogin</code> 文件去除默认信息</p>
<p>然后再通过创建 <code>rc</code> 文件</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vim /home/jump/.ssh/rc</span><br></pre></td></tr></tbody></table></figure></div>

<p>将以下内容写入到 <code>rc</code> 文件中</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">lastlog -u $USER | perl -lane 'END{print "Last login: @F[3..6] $F[8] from $F[2]"}'</span><br></pre></td></tr></tbody></table></figure></div>

<p>再通过 ssh 登录，就只会看到上一次的登录信息了</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Server 2204配置无线网卡</title>
    <url>/2023/09/15/ubuntu/usb-net/</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍如何在 Ubuntu Server 2204 上配置无线网卡，以及如何安装驱动。</p>
</blockquote>
<h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><ul>
<li>System: Ubuntu 22.04.3 LTS</li>
<li>USB Network Adapter: Realtek Semiconductor Corp. RTL8192EU 802.11b/g/n WLAN Adapter</li>
</ul>
<h2 id="查看网卡信息"><a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h2><p>这一步是为了确认网卡型号，以及是否被系统识别。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">lsusb</span><br></pre></td></tr></tbody></table></figure></div>

<p>这里应该会列出一大堆硬件设备，无需理会其他的，我们只关注 WLAN Adapter 结尾的，如下图所示：<br><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/usb-net-20230915_2203/lsusb.png" alt="USB设备列表"></p>
<blockquote>
<p>如果没有找到，那么有三种可能：一是 USB 口的问题，换一下 USB 口；二是网卡损坏了，这个换台 Windows 机器就能判断；三是网卡模式不对，这个可以 <a href="#%E5%88%87%E6%8D%A2%E7%BD%91%E5%8D%A1%E6%A8%A1%E5%BC%8F">切换网卡模式</a>。</p>
</blockquote>
<p>接下来，我们需要查看各个网卡的名称，等下在<a href="#%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE">配置网络</a>的时候会用到。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ip a show</span><br></pre></td></tr></tbody></table></figure></div>

<p>结果如下</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp4s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 08:60:6e:45:c1:64 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.106/24 brd 192.168.1.255 scope global enp4s0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a60:6eff:fe45:c164/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: enp5s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 1000</span><br><span class="line">    link/ether 08:60:6e:45:c1:65 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: enp6s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 1000</span><br><span class="line">    link/ether 08:60:6e:45:c1:66 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: enp7s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 1000</span><br><span class="line">    link/ether 08:60:6e:45:c1:67 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: wlx30b49eb80805: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc mq state DOWN group default qlen 1000</span><br><span class="line">    link/ether 30:b4:9e:b8:08:05 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="查看驱动信息"><a href="#查看驱动信息" class="headerlink" title="查看驱动信息"></a>查看驱动信息</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo lshw -C network</span><br></pre></td></tr></tbody></table></figure></div>

<p>找到描述为 <code>description: Wireless interface</code> 的一项，然后看 configuration -&gt; driver 是否显示为 <code>rtl8xxxu</code>，如果是的话，说明系统已经自动加载了驱动，可以跳过下面的步骤，直接进行 <a href="#%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE">网络配置</a>。</p>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="编辑网络配置文件"><a href="#编辑网络配置文件" class="headerlink" title="编辑网络配置文件"></a>编辑网络配置文件</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/netplan/00-installer-config.yaml</span><br></pre></td></tr></tbody></table></figure></div>

<p>将文件内容修改为如下：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span> <span class="comment"># 渲染器</span></span><br><span class="line">  <span class="attr">wifis:</span></span><br><span class="line">    <span class="comment"># 无线网卡</span></span><br><span class="line">    <span class="attr">wlx30b49eb80805:</span> <span class="comment"># USB网卡的名称，可通过 ip a 命令查看</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">yes</span> <span class="comment"># 是否为Ipv4动态分配地址</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span> <span class="comment"># 是否可选</span></span><br><span class="line">      <span class="attr">access-points:</span></span><br><span class="line">        <span class="attr">"wifi-name":</span> <span class="comment"># wifi名称</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">"wifi-password"</span> <span class="comment"># wifi密码</span></span><br><span class="line">    <span class="comment"># 有线网卡，按你的实际情况配置</span></span><br><span class="line">    <span class="attr">enp4s0:</span> <span class="comment"># 有线网卡的名称，可通过 ip a 命令查看</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">no</span> <span class="comment"># 是否为Ipv6动态分配地址</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">addresses:</span> <span class="comment"># 静态IP地址</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.106</span><span class="string">/24</span> <span class="comment"># IP地址/子网掩码</span></span><br><span class="line">      <span class="attr">nameservers:</span> <span class="comment"># DNS服务器地址</span></span><br><span class="line">        <span class="attr">addresses:</span> <span class="comment"># DNS服务器地址列表</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span> <span class="comment"># DNS服务器地址</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">223.6</span><span class="number">.6</span><span class="number">.6</span> <span class="comment"># DNS服务器地址</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> <span class="comment"># DNS服务器地址</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 路由</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">default</span> <span class="comment"># 默认路由</span></span><br><span class="line">          <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> <span class="comment"># 默认路由的网关</span></span><br><span class="line">    <span class="attr">enp5s0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">enp6s0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">enp7s0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h3><p>先进行配置检查</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo netplan try</span><br></pre></td></tr></tbody></table></figure></div>

<p>没问题的话直接敲回车确认，然后会自动应用新配置。</p>
<h3 id="查看网络状态"><a href="#查看网络状态" class="headerlink" title="查看网络状态"></a>查看网络状态</h3><p>等待一会儿，再次查看网络状态</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ip a show</span><br></pre></td></tr></tbody></table></figure></div>

<p>如果看到 <code>wlx30b49eb80805</code> 这个网卡的状态为 <code>UP</code>，并且有 <code>inet</code> 的地址，说明配置成功了,那么到这里就结束了。</p>
<hr>
<h2 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h2><blockquote>
<p>如果没有 <code>inet</code> 的地址，可以尝试重启网络服务，或者重启系统。<br>但是如果在重启之后，还是没有 <code>inet</code> 的地址，那么大概率是驱动的问题，可以尝试<a href="#%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8">安装驱动</a>。</p>
</blockquote>
<h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install git linux-headers-generic build-essential dkms</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/Mange/rtl8192eu-linux-driver</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd rtl8192eu-linux-driver</span><br><span class="line">sudo dkms add .</span><br><span class="line">sudo dkms install rtl8192eu/1.0</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="将系统自带驱动加入黑名单"><a href="#将系统自带驱动加入黑名单" class="headerlink" title="将系统自带驱动加入黑名单"></a>将系统自带驱动加入黑名单</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">echo "blacklist rtl8xxxu" | sudo tee /etc/modprobe.d/rtl8xxxu.conf</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="系统启动时自动加载-rtl8192eu-驱动"><a href="#系统启动时自动加载-rtl8192eu-驱动" class="headerlink" title="系统启动时自动加载 rtl8192eu 驱动"></a>系统启动时自动加载 rtl8192eu 驱动</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">echo -e "8192eu\n\nloop" | sudo tee /etc/modules</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="避免新版系统热插拔后失效"><a href="#避免新版系统热插拔后失效" class="headerlink" title="避免新版系统热插拔后失效"></a>避免新版系统热插拔后失效</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">echo "options 8192eu rtw_power_mgnt=0 rtw_enusbss=0" | sudo tee /etc/modprobe.d/8192eu.conf</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="更新Grub和initramfs"><a href="#更新Grub和initramfs" class="headerlink" title="更新Grub和initramfs"></a>更新Grub和initramfs</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo update-grub &amp;&amp; sudo update-initramfs -u</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="重启-systemctl-以重新生成-initramfs"><a href="#重启-systemctl-以重新生成-initramfs" class="headerlink" title="重启 systemctl 以重新生成 initramfs"></a>重启 systemctl 以重新生成 initramfs</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">systemctl reboot -i</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="查看驱动是否被正确加载"><a href="#查看驱动是否被正确加载" class="headerlink" title="查看驱动是否被正确加载"></a>查看驱动是否被正确加载</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo lshw -C network</span><br></pre></td></tr></tbody></table></figure></div>

<p>找到描述为 <code>description: Wireless interface</code> 的一项，然后看 configuration -&gt; driver 是否显示为 <code>8192eu</code>，如果是的话，说明驱动加载成功，直接进行 <a href="#%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE">网络配置</a>。</p>
<h2 id="一些其他的问题"><a href="#一些其他的问题" class="headerlink" title="一些其他的问题"></a>一些其他的问题</h2><h3 id="无法连接到wifi"><a href="#无法连接到wifi" class="headerlink" title="无法连接到wifi"></a>无法连接到wifi</h3><p>需要检查下无线网卡是否启用，可以通过 <code>ip a show</code> 查看，如果没有 <code>UP</code> 的状态，可以通过 <code>sudo ip link set wlx30b49eb80805 up</code> 启用。</p>
<h3 id="切换网卡模式"><a href="#切换网卡模式" class="headerlink" title="切换网卡模式"></a>切换网卡模式</h3><p>通过 <code>lsusb -t</code> 查看，如果是 <code>Mass Storage</code> 模式，那么就需要切换模式了，这个可以通过 <code>sudo usb_modeswitch -KW -v 0bda -p 1a2b</code> 来切换，其中 <code>0bda</code> 和 <code>1a2b</code> 是网卡的厂商ID和产品ID，可以通过 <code>lsusb</code> 查看。</p>
<p>重启后失效，可以通过修改 <code>/usr/lib/udev/rules.d/40-usb_modeswitch.rules</code> 文件来解决。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Realtek RTL8192EU Wifi AC USB</span></span><br><span class="line">ATTR{idVendor}=="0bda", ATTR{idProduct}=="1a2b", RUN+="/usr/sbin/usb_modeswitch -KW -v 0bda -p 1a2b"</span><br></pre></td></tr></tbody></table></figure></div>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>RTL8192EU</tag>
        <tag>wlan adapter</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>用户与用户组</title>
    <url>/2023/07/20/ubuntu/user-group/</url>
    <content><![CDATA[<blockquote>
<p>对 Linux 用户及用户组进行管理与修改</p>
</blockquote>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul>
<li>adduser - 添加用户</li>
<li>userdel - 删除用户</li>
<li>addgroup - 添加组</li>
<li>groupdel - 删除组</li>
<li>usermod - 修改用户组</li>
<li>id - 查看用户信息</li>
</ul>
<h2 id="Commend"><a href="#Commend" class="headerlink" title="Commend"></a>Commend</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><ul>
<li><p>添加用户</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">adduser app</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>删除用户</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">userdel -r app</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>查看用户信息</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">id app</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
<h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><ul>
<li><p>添加组</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">addgroup app-group</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>删除组</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">groupdel app-group</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>修改用户组</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会删除 app 用户原本的组</span></span><br><span class="line">usermod -G app-group app</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 app-group 添加到 app 用户的现有组列表中</span></span><br><span class="line">usermod -a -G app-group app</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者使用以下命令</span></span><br><span class="line">gpasswd -a app app-group</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 app 用户登录 shell</span></span><br><span class="line">usermod -s /bin/false app</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>在用户现有组基础上添加其他组</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">usermod -a -G adm,dialout,cdrom,floppy,sudo,audio,dip,video,plugdev,netdev,lxd ubuntu</span><br></pre></td></tr></tbody></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>AMD VMware Workstation 15.1 安装 MacOS Catalina 10.15.5</title>
    <url>/2023/04/13/vmware/amd-vmware15.1-install-macos-10.15.x/</url>
    <content><![CDATA[<blockquote>
<p>辣鸡 MacBook，配置低不说，还卖得贼拉贵，所以我等穷鬼只能走歪门邪道。。。真香</p>
</blockquote>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol>
<li>有一台强大的物理机，具体多强？看下面，如果达不到要求，直接劝退<ul>
<li>CPU: AMD 主频 4.0 GHz 以上</li>
<li>MEM: 16G 以上，建议 32G 更好</li>
<li>DISK: 可用空间至少 300G 以上，固态最好</li>
</ul>
</li>
<li>VMware Workstation 15.1.0</li>
<li>Unlocker - 解锁工具，让 VMware 可以安装 MacOS</li>
<li>macOS 10.15.5 镜像</li>
</ol>
<h2 id="安装-VMware-Workstation"><a href="#安装-VMware-Workstation" class="headerlink" title="安装 VMware Workstation"></a>安装 VMware Workstation</h2><blockquote>
<p>这个就不说了，太过简单</p>
</blockquote>
<h2 id="安装-Unlocker"><a href="#安装-Unlocker" class="headerlink" title="安装 Unlocker"></a>安装 Unlocker</h2><p>Unlocker 下载地址 <a class="link" href="https://github.com/theJaxon/unlocker">https://github.com/theJaxon/unlocker <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>你说 archived？自己想办法</p>
<p>找到可用的库，然后克隆到本地</p>
<p>先结束掉所有 VMware 的进程</p>
<p>然后打开 Unlocker 目录，找到 <code>win-install.cmd</code>，右键 <code>以管理员身份运行</code>，这一步必须要网好，否则会很慢很慢</p>
<p>完成后会自动关闭窗口</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/unlocker_1.png" alt="unlocker_1"></p>
<h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>启动 VMware，创建新的虚拟机，在系统选择那里会看到多出了一个 <code>Apple Mac OS</code> 的选项，选中后选择对应的系统版本</p>
<p>后面的操作都是正常操作就不再赘述了，在创建完成后先不要启动，还需修改一些文件配置</p>
<h2 id="修改虚拟机配置"><a href="#修改虚拟机配置" class="headerlink" title="修改虚拟机配置"></a>修改虚拟机配置</h2><p><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmconfig_1.png" alt="虚拟化"><br><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmconfig_2.png" alt="USB"><br><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmconfig_3.png" alt="引导"></p>
<h2 id="修改-vmx-文件"><a href="#修改-vmx-文件" class="headerlink" title="修改 vmx 文件"></a>修改 vmx 文件</h2><p>进入刚才创建的虚拟机目录，找到后缀为 vmx 的文件</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmx_1.png" alt="vmx_1"></p>
<p>打开 vmx</p>
<p>找到 <code>virtualHW.version = "16"</code> 修改为 <code>virtualHW.version = "10"</code></p>
<p><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmx_2.png" alt="vmx_2"><br><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmx_3.png" alt="vmx_3"></p>
<p>找到 <code>smc.version</code> （如没有则新增一个就行）修改为 <code>smc.version = "0"</code></p>
<p>并增加以下内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">cpuid.0.eax = "0000:0000:0000:0000:0000:0000:0000:1011"</span><br><span class="line">cpuid.0.ebx = "0111:0101:0110:1110:0110:0101:0100:0111"</span><br><span class="line">cpuid.0.ecx = "0110:1100:0110:0101:0111:0100:0110:1110"</span><br><span class="line">cpuid.0.edx = "0100:1001:0110:0101:0110:1110:0110:1001"</span><br><span class="line">cpuid.1.eax = "0000:0000:0000:0001:0000:0110:0111:0001"</span><br><span class="line">cpuid.1.ebx = "0000:0010:0000:0001:0000:1000:0000:0000"</span><br><span class="line">cpuid.1.ecx = "1000:0010:1001:1000:0010:0010:0000:0011"</span><br><span class="line">cpuid.1.edx = "0000:1111:1010:1011:1111:1011:1111:1111"</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2><p>启动完成后，则进入到 macOS 的安装中</p>
<p>之前的内容都没什么特别，直到使用 <code>磁盘工具</code> 进行分区时我们会发现键盘无法输入</p>
<p>这时需要通过将键盘切换到虚拟机才能对分区进行命名操作，然后我们继续安装</p>
<p>在正式进入到安装并读条时，肯定会安装失败，然后会自动跳到 ‘macOS实用工具’ 界面，这里我们直接关闭客户机即可</p>
<p>然后打开 <code>编辑虚拟机设置</code>，按下图修改，在修改过程中会弹出警告，点击确定关闭掉即可，最后保存设置，然后再重新启动虚拟机</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmconfig_4.png" alt="vmconfig_4"></p>
<p>重新启动虚拟机后，我们便可以继续进行系统安装，最后就可以正常使用了</p>
]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>vmware</tag>
        <tag>MacOS Catalina 10.15.x</tag>
        <tag>黑苹果</tag>
        <tag>真香系列</tag>
        <tag>AMD yyds</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地让特定应用程序绕过用户帐户控制通知弹窗</title>
    <url>/2023/05/06/windows/bypass-user-account-control-notifications/</url>
    <content><![CDATA[<blockquote>
<p>我们在使用 Windows 系统时，在打开一些应用程序时，经常会看到 “用户账户控制” 的对话框，有些甚至会将屏幕背景变暗，非常不舒适，本教程可以让你对特定（你完全信任）的应用跳过这个弹窗提示，十分优雅~</p>
</blockquote>
<h2 id="找到应用程序可执行文件"><a href="#找到应用程序可执行文件" class="headerlink" title="找到应用程序可执行文件"></a>找到应用程序可执行文件</h2><p>直接右键应用快捷方式，然后点击 “属性”</p>
<p>然后把 “目标” 里面的内容保存下来，后面会用到</p>
<h2 id="创建以管理员权限运行的任务"><a href="#创建以管理员权限运行的任务" class="headerlink" title="创建以管理员权限运行的任务"></a>创建以管理员权限运行的任务</h2><p>右键点击我的电脑，打开 “管理”</p>
<p>按顺序依次展开 计算机管理 -&gt; 系统工具 -&gt; 任务计划程序 -&gt; 任务计划程序库</p>
<p>然后在 “任务计划程序库” 上点击右键，点击 “新建文件夹”，名称输入你应用程序的名称即可</p>
<p>然后点击刚才创建的文件夹，在文件夹上点击右键，打开 “创建任务”</p>
<h3 id="常规选项卡配置"><a href="#常规选项卡配置" class="headerlink" title="常规选项卡配置"></a>常规选项卡配置</h3><p>在弹出的创建任务对话框中，打开常规选项卡，勾选最下面的 “使用最高权限运行”（即管理员权限运行），如下图</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/bypass-user-account-control-notifications/create-task_1.png" alt="常规选项卡"></p>
<h3 id="触发器配置"><a href="#触发器配置" class="headerlink" title="触发器配置"></a>触发器配置</h3><blockquote>
<p>这一步一般是用来配置启动时自动运行，如果不需要则可以跳过这一步</p>
</blockquote>
<p>打开触发器选项卡，点击新建，然后如下图配置即可</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/../../medias/images/bypass-user-account-control-notifications/create-task_2.png" alt="触发器"></p>
<h3 id="操作配置"><a href="#操作配置" class="headerlink" title="操作配置"></a>操作配置</h3><blockquote>
<p>重点</p>
</blockquote>
<p>打开操作选项卡，点击新建，操作选择 “启动程序”，程序或脚本中输入之前我们在 <a href="#%E6%89%BE%E5%88%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6">找到应用程序可执行文件</a> 这一步保存的内容即可</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>右键刚才创建好的任务，点击属性，将 “位置” 和 “名称” 复制并按格式组合起来 <code>位置\名称</code>，然后保存备用</p>
<p>最后点击创建任务对话框的确定按钮，到这里我们就完成了任务的创建</p>
<h2 id="配置快捷方式"><a href="#配置快捷方式" class="headerlink" title="配置快捷方式"></a>配置快捷方式</h2><blockquote>
<p>如果在 <a href="#%E8%A7%A6%E5%8F%91%E5%99%A8%E9%85%8D%E7%BD%AE">触发器配置</a> 配置了自动运行，则可以不需要这一步</p>
</blockquote>
<p>在桌面上点击右键，新建 -&gt; 快捷方式</p>
<p>在输入框中输入以下内容，”xxxxxxx” 替换为在 <a href="#%E6%9C%80%E5%90%8E">最后</a> 组合的内容</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">C:\Windows\System32\schtasks.exe /RUN /TN "xxxxxxx"</span><br></pre></td></tr></tbody></table></figure></div>

<p>然后点击下一步</p>
<p>在输入框中写入应用程序的名称，点击完成</p>
<h2 id="稍微美化一下"><a href="#稍微美化一下" class="headerlink" title="稍微美化一下"></a>稍微美化一下</h2><blockquote>
<p>其实到这里基本上已经基本上已经完成了配置，如果不想再搞的童鞋就可以结束了</p>
</blockquote>
<p>右键点击刚才创建好的快捷方式，点击属性</p>
<p>然后在 “快捷方式” 选项卡中点击更改图标，然后找到应用程序(.exe)，保存即可</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>User Account Control Notifications</tag>
        <tag>Windows 小技巧</tag>
      </tags>
  </entry>
</search>
