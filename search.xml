<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决 SVN 每次都需要输入密码</title>
      <link href="/2023/09/26/svn/svn-save-password/"/>
      <url>/2023/09/26/svn/svn-save-password/</url>
      
        <content type="html"><![CDATA[<h1 id="解决-SVN-每次都需要输入密码"><a href="#解决-SVN-每次都需要输入密码" class="headerlink" title="解决 SVN 每次都需要输入密码"></a>解决 SVN 每次都需要输入密码</h1><blockquote><p>由于每次 svn 操作都要求输入账号密码，为了<i class="hover-effect" data-hover-text="偷懒">优雅</i>的使用 svn，在搜索引擎上找了一圈，全都是让你去改 config、server 文件，实际操作下来然并卵，只会浪费你的一天。原因是自从 svn 1.12 版本之后<a href="https://subversion.apache.org/docs/release-notes/1.12#client-server-improvements">发行说明</a> ，就不再支持明文保存密码了。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Ubuntu 20.04.6 LTS</li><li>SVN 1.13.0 (r1867053)</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>由于新版本的 svn 使用了 gpg-agent 来保存秘钥信息，所以我们需要对 gpg-agent 进行配置</p></blockquote><ol><li><p>安装和配置 gpg-agent</p><ul><li><p>安装 gpg agent</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnupg-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 pinentry-tty</p><blockquote><p>pinentry-tty 是更简单的文本界面</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> pinentry-tty<span class="token builtin class-name">echo</span> <span class="token string">"pinentry-program /usr/bin/pinentry-tty"</span> <span class="token operator">&gt;&gt;</span> ~/.gnupg/gpg-agent.confgpg-connect-agent reloadagent /bye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>修改 .profile 文件，将以下内容添加到文件尾部</p> <pre class="line-numbers language-.profile" data-language=".profile"><code class="language-.profile">export GPG_TTY=$(tty)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 保存后执行 <code>. ~/.profile</code> 使配置生效</p></li><li><p>删除 svn 已保存的认证信息</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.subversion/auth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 重新执行 svn 操作，会提示你输入用户密码，同时 GPG-Agent 会缓存密码，下次操作时就不需要再次输入密码了</p></li><li><p>修改缓存过期时间</p><blockquote><p>由于 gpg-agent 会将秘钥缓存，那既然是缓存，那肯定会过期，所以我们还要修改 gpg-agent 的配置，来延长缓存有效期，但是重启系统后还是会失效</p></blockquote><p> 修改 ~/.gnupg/gpg-agent.conf 文件，添加以下内容<br> <strong>注意：这将会降低安全性</strong></p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">default-cache-ttl <span class="token number">0</span> <span class="token comment"># 缓存时间，0 表示永久</span>max-cache-ttl <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> svn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Server 2204配置无线网卡</title>
      <link href="/2023/09/15/ubuntu/usb-net/"/>
      <url>/2023/09/15/ubuntu/usb-net/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-Server-2204配置无线网卡"><a href="#Ubuntu-Server-2204配置无线网卡" class="headerlink" title="Ubuntu Server 2204配置无线网卡"></a>Ubuntu Server 2204配置无线网卡</h1><blockquote><p>本文主要介绍如何在 Ubuntu Server 2204 上配置无线网卡，以及如何安装驱动。</p></blockquote><h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><ul><li>System: Ubuntu 22.04.3 LTS</li><li>USB Network Adapter: Realtek Semiconductor Corp. RTL8192EU 802.11b/g/n WLAN Adapter</li></ul><h2 id="查看网卡信息"><a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h2><p>这一步是为了确认网卡型号，以及是否被系统识别。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsusb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里应该会列出一大堆硬件设备，无需理会其他的，我们只关注 WLAN Adapter 结尾的，如下图所示：<br><img src="/../../medias/images/usb-net-20230915_2203/lsusb.png" alt="USB设备列表"></p><blockquote><p>如果没有找到，那么有三种可能：一是 USB 口的问题，换一下 USB 口；二是网卡损坏了，这个换台 Windows 机器就能判断；三是网卡模式不对，这个可以 <a href="#%E5%88%87%E6%8D%A2%E7%BD%91%E5%8D%A1%E6%A8%A1%E5%BC%8F">切换网卡模式</a>。</p></blockquote><p>接下来，我们需要查看各个网卡的名称，等下在<a href="#%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE">配置网络</a>的时候会用到。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> a show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope <span class="token function">host</span>       valid_lft forever preferred_lft forever<span class="token number">2</span>: enp4s0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc fq_codel state UP group default qlen <span class="token number">1000</span>    link/ether 08:60:6e:45:c1:64 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">192.168</span>.1.106/24 brd <span class="token number">192.168</span>.1.255 scope global enp4s0       valid_lft forever preferred_lft forever    inet6 fe80::a60:6eff:fe45:c164/64 scope <span class="token function">link</span>       valid_lft forever preferred_lft forever<span class="token number">3</span>: enp5s0: <span class="token operator">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc fq_codel state DOWN group default qlen <span class="token number">1000</span>    link/ether 08:60:6e:45:c1:65 brd ff:ff:ff:ff:ff:ff<span class="token number">4</span>: enp6s0: <span class="token operator">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc fq_codel state DOWN group default qlen <span class="token number">1000</span>    link/ether 08:60:6e:45:c1:66 brd ff:ff:ff:ff:ff:ff<span class="token number">5</span>: enp7s0: <span class="token operator">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc fq_codel state DOWN group default qlen <span class="token number">1000</span>    link/ether 08:60:6e:45:c1:67 brd ff:ff:ff:ff:ff:ff<span class="token number">6</span>: wlx30b49eb80805: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc mq state DOWN group default qlen <span class="token number">1000</span>    link/ether <span class="token number">30</span>:b4:9e:b8:08:05 brd ff:ff:ff:ff:ff:ff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看驱动信息"><a href="#查看驱动信息" class="headerlink" title="查看驱动信息"></a>查看驱动信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> lshw <span class="token parameter variable">-C</span> network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到描述为 <code>description: Wireless interface</code> 的一项，然后看 configuration -&gt; driver 是否显示为 <code>rtl8xxxu</code>，如果是的话，说明系统已经自动加载了驱动，可以跳过下面的步骤，直接进行 <a href="#%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE">网络配置</a>。</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="编辑网络配置文件"><a href="#编辑网络配置文件" class="headerlink" title="编辑网络配置文件"></a>编辑网络配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/netplan/00-installer-config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将文件内容修改为如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">network</span><span class="token punctuation">:</span>  <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">renderer</span><span class="token punctuation">:</span> networkd <span class="token comment"># 渲染器</span>  <span class="token key atrule">wifis</span><span class="token punctuation">:</span>    <span class="token comment"># 无线网卡</span>    <span class="token key atrule">wlx30b49eb80805</span><span class="token punctuation">:</span> <span class="token comment"># USB网卡的名称，可通过 ip a 命令查看</span>      <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> yes <span class="token comment"># 是否为Ipv4动态分配地址</span>      <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否可选</span>      <span class="token key atrule">access-points</span><span class="token punctuation">:</span>        <span class="token key atrule">"wifi-name"</span><span class="token punctuation">:</span> <span class="token comment"># wifi名称</span>          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"wifi-password"</span> <span class="token comment"># wifi密码</span>    <span class="token comment"># 有线网卡，按你的实际情况配置</span>    <span class="token key atrule">enp4s0</span><span class="token punctuation">:</span> <span class="token comment"># 有线网卡的名称，可通过 ip a 命令查看</span>      <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> no      <span class="token key atrule">dhcp6</span><span class="token punctuation">:</span> no <span class="token comment"># 是否为Ipv6动态分配地址</span>      <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">addresses</span><span class="token punctuation">:</span> <span class="token comment"># 静态IP地址</span>        <span class="token punctuation">-</span> 192.168.1.106/24 <span class="token comment"># IP地址/子网掩码</span>      <span class="token key atrule">nameservers</span><span class="token punctuation">:</span> <span class="token comment"># DNS服务器地址</span>        <span class="token key atrule">addresses</span><span class="token punctuation">:</span> <span class="token comment"># DNS服务器地址列表</span>          <span class="token punctuation">-</span> 223.5.5.5 <span class="token comment"># DNS服务器地址</span>          <span class="token punctuation">-</span> 223.6.6.6 <span class="token comment"># DNS服务器地址</span>          <span class="token punctuation">-</span> 192.168.1.1 <span class="token comment"># DNS服务器地址</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment"># 路由</span>        <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> default <span class="token comment"># 默认路由</span>          <span class="token key atrule">via</span><span class="token punctuation">:</span> 192.168.1.1 <span class="token comment"># 默认路由的网关</span>    <span class="token key atrule">enp5s0</span><span class="token punctuation">:</span>      <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> no      <span class="token key atrule">dhcp6</span><span class="token punctuation">:</span> no      <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">enp6s0</span><span class="token punctuation">:</span>      <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> no      <span class="token key atrule">dhcp6</span><span class="token punctuation">:</span> no      <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">enp7s0</span><span class="token punctuation">:</span>      <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> no      <span class="token key atrule">dhcp6</span><span class="token punctuation">:</span> no      <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h3><p>先进行配置检查</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> netplan try<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没问题的话直接敲回车确认，然后会自动应用新配置。</p><h3 id="查看网络状态"><a href="#查看网络状态" class="headerlink" title="查看网络状态"></a>查看网络状态</h3><p>等待一会儿，再次查看网络状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> a show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到 <code>wlx30b49eb80805</code> 这个网卡的状态为 <code>UP</code>，并且有 <code>inet</code> 的地址，说明配置成功了,那么到这里就结束了。</p><hr><h2 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h2><blockquote><p>如果没有 <code>inet</code> 的地址，可以尝试重启网络服务，或者重启系统。<br>但是如果在重启之后，还是没有 <code>inet</code> 的地址，那么大概率是驱动的问题，可以尝试<a href="#%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8">安装驱动</a>。</p></blockquote><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> linux-headers-generic build-essential dkms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Mange/rtl8192eu-linux-driver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> rtl8192eu-linux-driver<span class="token function">sudo</span> dkms <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">sudo</span> dkms <span class="token function">install</span> rtl8192eu/1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="将系统自带驱动加入黑名单"><a href="#将系统自带驱动加入黑名单" class="headerlink" title="将系统自带驱动加入黑名单"></a>将系统自带驱动加入黑名单</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"blacklist rtl8xxxu"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modprobe.d/rtl8xxxu.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="系统启动时自动加载-rtl8192eu-驱动"><a href="#系统启动时自动加载-rtl8192eu-驱动" class="headerlink" title="系统启动时自动加载 rtl8192eu 驱动"></a>系统启动时自动加载 rtl8192eu 驱动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"8192eu<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>loop"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="避免新版系统热插拔后失效"><a href="#避免新版系统热插拔后失效" class="headerlink" title="避免新版系统热插拔后失效"></a>避免新版系统热插拔后失效</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"options 8192eu rtw_power_mgnt=0 rtw_enusbss=0"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modprobe.d/8192eu.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更新Grub和initramfs"><a href="#更新Grub和initramfs" class="headerlink" title="更新Grub和initramfs"></a>更新Grub和initramfs</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">update-grub</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> update-initramfs <span class="token parameter variable">-u</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="重启-systemctl-以重新生成-initramfs"><a href="#重启-systemctl-以重新生成-initramfs" class="headerlink" title="重启 systemctl 以重新生成 initramfs"></a>重启 systemctl 以重新生成 initramfs</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token function">reboot</span> <span class="token parameter variable">-i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看驱动是否被正确加载"><a href="#查看驱动是否被正确加载" class="headerlink" title="查看驱动是否被正确加载"></a>查看驱动是否被正确加载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> lshw <span class="token parameter variable">-C</span> network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到描述为 <code>description: Wireless interface</code> 的一项，然后看 configuration -&gt; driver 是否显示为 <code>8192eu</code>，如果是的话，说明驱动加载成功，直接进行 <a href="#%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE">网络配置</a>。</p><h2 id="一些其他的问题"><a href="#一些其他的问题" class="headerlink" title="一些其他的问题"></a>一些其他的问题</h2><h3 id="无法连接到wifi"><a href="#无法连接到wifi" class="headerlink" title="无法连接到wifi"></a>无法连接到wifi</h3><p>需要检查下无线网卡是否启用，可以通过 <code>ip a show</code> 查看，如果没有 <code>UP</code> 的状态，可以通过 <code>sudo ip link set wlx30b49eb80805 up</code> 启用。</p><h3 id="切换网卡模式"><a href="#切换网卡模式" class="headerlink" title="切换网卡模式"></a>切换网卡模式</h3><p>通过 <code>lsusb -t</code> 查看，如果是 <code>Mass Storage</code> 模式，那么就需要切换模式了，这个可以通过 <code>sudo usb_modeswitch -KW -v 0bda -p 1a2b</code> 来切换，其中 <code>0bda</code> 和 <code>1a2b</code> 是网卡的厂商ID和产品ID，可以通过 <code>lsusb</code> 查看。</p><p>重启后失效，可以通过修改 <code>/usr/lib/udev/rules.d/40-usb_modeswitch.rules</code> 文件来解决。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Realtek RTL8192EU Wifi AC USB</span>ATTR<span class="token punctuation">{</span>idVendor<span class="token punctuation">}</span><span class="token operator">==</span><span class="token string">"0bda"</span>, ATTR<span class="token punctuation">{</span>idProduct<span class="token punctuation">}</span><span class="token operator">==</span><span class="token string">"1a2b"</span>, <span class="token assign-left variable">RUN</span><span class="token operator">+=</span><span class="token string">"/usr/sbin/usb_modeswitch -KW -v 0bda -p 1a2b"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> RTL8192EU </tag>
            
            <tag> wlan adapter </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁用 PC 版微信的图片文字识别功能</title>
      <link href="/2023/08/02/other/disable-wechat-ocr/"/>
      <url>/2023/08/02/other/disable-wechat-ocr/</url>
      
        <content type="html"><![CDATA[<h1 id="禁用-PC-版微信的图片文字识别功能"><a href="#禁用-PC-版微信的图片文字识别功能" class="headerlink" title="禁用 PC 版微信的图片文字识别功能"></a>禁用 PC 版微信的图片文字识别功能</h1><blockquote><p>自从微信增加了自动识别图片文字功能后，确实带来了一些便利，可以不用再对着截图一个字一个字敲了，但是同时也带来了不方便的地方，有些图片需要放大或拖拽时便显得不那么友好了，说到底还是制杖产品经理搞出来的反人类交互体验。</p></blockquote><h2 id="开始表演"><a href="#开始表演" class="headerlink" title="开始表演"></a>开始表演</h2><ol><li>推出微信</li><li>在资源管理器中的地址栏中输入 %AppData%，并回车</li><li>然后找到 Tencent\WeChat\XPlugin\Plugins\WeChatOCR</li><li>在 WeChatOCR 打开名称为数字的文件，然后再打开 extracted，如：WeChatOCR\7053\extracted</li><li>删除 WeChatOCR.exe</li><li>创建一个空白文本文档，将名字修改为 WeChatOCR.exe 并保存</li><li>重新打开微信，图片中的文件就不会再自动转换为文本了</li></ol>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diss wechat </tag>
            
            <tag> tencent </tag>
            
            <tag> 制杖产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Docker 中为 Nginx:alpine 安装模块</title>
      <link href="/2023/07/27/docker/apline-nginx-install-module/"/>
      <url>/2023/07/27/docker/apline-nginx-install-module/</url>
      
        <content type="html"><![CDATA[<h1 id="在-Docker-中为-Nginx-安装模块"><a href="#在-Docker-中为-Nginx-安装模块" class="headerlink" title="在 Docker 中为 Nginx 安装模块"></a>在 Docker 中为 Nginx 安装模块</h1><blockquote><p>通过 DockerFile 给基于 nginx:apline 构建的镜像安装 HTTP Echo 模块</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol><li>宿主机: 20.04.6 LTS (Focal Fossa)</li><li>docker: Docker version 24.0.4, build 3713ee1</li><li>docker-compose: docker-compose version 1.27.4, build 40524192</li><li>nginx: nginx:1.19.1-alpine</li><li>nginx-module<ul><li>HTTP Echo: 0.63</li></ul></li></ol><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> nginx:1.19.1-alpine <span class="token keyword">as</span> base</span><span class="token instruction"><span class="token keyword">RUN</span> sed -i <span class="token string">"s/dl-cdn.alpinelinux.org/mirrors.cernet.edu.cn/g"</span> /etc/apk/repositories;</span><span class="token instruction"><span class="token keyword">FROM</span> base <span class="token keyword">as</span> build</span><span class="token instruction"><span class="token keyword">ENV</span> ECHO_NGINX_MODULE_VERSION 0.63</span><span class="token instruction"><span class="token keyword">RUN</span> sed -i <span class="token string">"s/dl-cdn.alpinelinux.org/mirrors.cernet.edu.cn/g"</span> /etc/apk/repositories;</span><span class="token instruction"><span class="token keyword">RUN</span> NGINX_VER=`nginx -v 2&gt;&amp;1 | cut -d <span class="token string">'/'</span> -f 2` <span class="token operator">\</span>    &amp;&amp; cd /tmp <span class="token operator">\</span>    &amp;&amp; wget http://nginx.org/download/nginx-<span class="token variable">${NGINX_VER}</span>.tar.gz -O nginx-<span class="token variable">${NGINX_VER}</span>.tar.gz <span class="token operator">\</span>    &amp;&amp; wget https://github.com/openresty/echo-nginx-module/archive/refs/tags/v<span class="token variable">${ECHO_NGINX_MODULE_VERSION}</span>.tar.gz -O echo-nginx-module-<span class="token variable">${ECHO_NGINX_MODULE_VERSION}</span>.tar.gz <span class="token operator">\</span>    &amp;&amp; apk add --no-cache --virtual dependency gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers <span class="token operator">\</span>    &amp;&amp; tar zxf nginx-<span class="token variable">${NGINX_VER}</span>.tar.gz <span class="token operator">\</span>    &amp;&amp; tar zxf echo-nginx-module-<span class="token variable">${ECHO_NGINX_MODULE_VERSION}</span>.tar.gz  <span class="token operator">\</span>    &amp;&amp; cd nginx-<span class="token variable">${NGINX_VER}</span> <span class="token operator">\</span>    &amp;&amp; CONFARGS=$(nginx -V 2&gt;&amp;1 | sed -n -e <span class="token string">'s/^configure arguments: //p'</span>) <span class="token operator">\</span>    &amp;&amp; echo <span class="token variable">$CONFARGS</span> <span class="token operator">\</span>    &amp;&amp; sh -c <span class="token string">"./configure --with-compat ${CONFARGS} --add-dynamic-module=../echo-nginx-module-${ECHO_NGINX_MODULE_VERSION}"</span> <span class="token operator">\</span>    &amp;&amp; make modules <span class="token operator">\</span>    &amp;&amp; apk del dependency <span class="token operator">\</span>    &amp;&amp; rm -rf /var/cache/apk/* <span class="token operator">\</span>    &amp;&amp; mkdir -p /tmp/objs <span class="token operator">\</span>    &amp;&amp; cp /tmp/nginx-<span class="token variable">${NGINX_VER}</span>/objs/*.so /tmp/objs/ <span class="token operator">\</span>    &amp;&amp; ls /tmp/objs -al</span><span class="token instruction"><span class="token keyword">FROM</span> base</span><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">build</span></span> /tmp/objs/ngx_http_echo_module.so /etc/nginx/modules</span><span class="token instruction"><span class="token keyword">RUN</span> sed -i <span class="token string">'1s/^/load_module \/etc\/nginx\/modules\/ngx_http_echo_module.so;\n/'</span> /etc/nginx/nginx.conf</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /www</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h2><p><a href="https://nginx.org/en/docs/configure.html">https://nginx.org/en/docs/configure.html</a><br><a href="https://www.nginx.com/resources/wiki/modules/">https://www.nginx.com/resources/wiki/modules/</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> nginx-module </tag>
            
            <tag> alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户与用户组</title>
      <link href="/2023/07/20/ubuntu/user-group/"/>
      <url>/2023/07/20/ubuntu/user-group/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对 Linux 用户及用户组进行管理与修改</p></blockquote><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul><li>adduser - 添加用户</li><li>userdel - 删除用户</li><li>addgroup - 添加组</li><li>groupdel - 删除组</li><li>usermod - 修改用户组</li><li>id - 查看用户信息</li></ul><h2 id="Commend"><a href="#Commend" class="headerlink" title="Commend"></a>Commend</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><ul><li><p>添加用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">userdel</span> <span class="token parameter variable">-r</span> app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看用户信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">id</span> app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><ul><li><p>添加组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">addgroup app-group<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupdel</span> app-group<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改用户组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 会删除 app 用户原本的组</span><span class="token function">usermod</span> <span class="token parameter variable">-G</span> app-group app<span class="token comment"># 将 app-group 添加到 app 用户的现有组列表中</span><span class="token function">usermod</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-G</span> app-group app<span class="token comment"># 或者使用以下命令</span>gpasswd <span class="token parameter variable">-a</span> app app-group<span class="token comment"># 修改 app 用户登录 shell</span><span class="token function">usermod</span> <span class="token parameter variable">-s</span> /bin/false app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在用户现有组基础上添加其他组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">usermod</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-G</span> adm,dialout,cdrom,floppy,sudo,audio,dip,video,plugdev,netdev,lxd ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ubuntu </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让特定应用程序绕过用户帐户控制通知弹窗</title>
      <link href="/2023/05/06/windows/bypass-user-account-control-notifications/"/>
      <url>/2023/05/06/windows/bypass-user-account-control-notifications/</url>
      
        <content type="html"><![CDATA[<h1 id="让特定应用程序绕过用户帐户控制通知弹窗"><a href="#让特定应用程序绕过用户帐户控制通知弹窗" class="headerlink" title="让特定应用程序绕过用户帐户控制通知弹窗"></a>让特定应用程序绕过用户帐户控制通知弹窗</h1><blockquote><p>我们在使用 Windows 系统时，在打开一些应用程序时，经常会看到 “用户账户控制” 的对话框，有些甚至会将屏幕背景变暗，非常不舒适，本教程可以让你对特定（你完全信任）的应用跳过这个弹窗提示，十分优雅~</p></blockquote><h2 id="找到应用程序可执行文件"><a href="#找到应用程序可执行文件" class="headerlink" title="找到应用程序可执行文件"></a>找到应用程序可执行文件</h2><p>直接右键应用快捷方式，然后点击 “属性”</p><p>然后把 “目标” 里面的内容保存下来，后面会用到</p><h2 id="创建以管理员权限运行的任务"><a href="#创建以管理员权限运行的任务" class="headerlink" title="创建以管理员权限运行的任务"></a>创建以管理员权限运行的任务</h2><p>右键点击我的电脑，打开 “管理”</p><p>按顺序依次展开 计算机管理 -&gt; 系统工具 -&gt; 任务计划程序 -&gt; 任务计划程序库</p><p>然后在 “任务计划程序库” 上点击右键，点击 “新建文件夹”，名称输入你应用程序的名称即可</p><p>然后点击刚才创建的文件夹，在文件夹上点击右键，打开 “创建任务”</p><h3 id="常规选项卡配置"><a href="#常规选项卡配置" class="headerlink" title="常规选项卡配置"></a>常规选项卡配置</h3><p>在弹出的创建任务对话框中，打开常规选项卡，勾选最下面的 “使用最高权限运行”（即管理员权限运行），如下图</p><p><img src="/../../medias/images/bypass-user-account-control-notifications/create-task_1.png" alt="常规选项卡"></p><h3 id="触发器配置"><a href="#触发器配置" class="headerlink" title="触发器配置"></a>触发器配置</h3><blockquote><p>这一步一般是用来配置启动时自动运行，如果不需要则可以跳过这一步</p></blockquote><p>打开触发器选项卡，点击新建，然后如下图配置即可</p><p><img src="/../../medias/images/bypass-user-account-control-notifications/create-task_2.png" alt="触发器"></p><h3 id="操作配置"><a href="#操作配置" class="headerlink" title="操作配置"></a>操作配置</h3><blockquote><p>重点</p></blockquote><p>打开操作选项卡，点击新建，操作选择 “启动程序”，程序或脚本中输入之前我们在 <a href="#%E6%89%BE%E5%88%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6">找到应用程序可执行文件</a> 这一步保存的内容即可</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>右键刚才创建好的任务，点击属性，将 “位置” 和 “名称” 复制并按格式组合起来 <code>位置\名称</code>，然后保存备用</p><p>最后点击创建任务对话框的确定按钮，到这里我们就完成了任务的创建</p><h2 id="配置快捷方式"><a href="#配置快捷方式" class="headerlink" title="配置快捷方式"></a>配置快捷方式</h2><blockquote><p>如果在 <a href="#%E8%A7%A6%E5%8F%91%E5%99%A8%E9%85%8D%E7%BD%AE">触发器配置</a> 配置了自动运行，则可以不需要这一步</p></blockquote><p>在桌面上点击右键，新建 -&gt; 快捷方式</p><p>在输入框中输入以下内容，”xxxxxxx” 替换为在 <a href="#%E6%9C%80%E5%90%8E">最后</a> 组合的内容</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">C:\Windows\System32\schtasks.exe /RUN /TN "xxxxxxx"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后点击下一步</p><p>在输入框中写入应用程序的名称，点击完成</p><h2 id="稍微美化一下"><a href="#稍微美化一下" class="headerlink" title="稍微美化一下"></a>稍微美化一下</h2><blockquote><p>其实到这里基本上已经基本上已经完成了配置，如果不行再搞的童鞋就可以结束了</p></blockquote><p>右键点击刚才创建好的快捷方式，点击属性</p><p>然后在 “快捷方式” 选项卡中点击更改图标，然后找到应用程序(.exe)，保存即可</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> User Account Control Notifications </tag>
            
            <tag> Windows 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装及配置 v2ray</title>
      <link href="/2023/04/21/tools/v2ray-install-setup/"/>
      <url>/2023/04/21/tools/v2ray-install-setup/</url>
      
        <content type="html"><![CDATA[<h1 id="安装与配置-V2ray"><a href="#安装与配置-V2ray" class="headerlink" title="安装与配置 V2ray"></a>安装与配置 V2ray</h1><blockquote><p>基于 ubuntu 22.04 搭建 Nginx + TLS + VMess + WebSocket + HTTP/2</p></blockquote><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>墙外 VPS</li></ul><h2 id="安装基础环境"><a href="#安装基础环境" class="headerlink" title="安装基础环境"></a>安装基础环境</h2><ul><li>安装 V2ray</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 Nginx</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置-V2ray-服务"><a href="#配置-V2ray-服务" class="headerlink" title="配置 V2ray 服务"></a>配置 V2ray 服务</h2><ul><li>添加用户</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token parameter variable">-s</span> /usr/sbin/nologin v2ray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>自动启动</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> v2ray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改服务启动用户</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/systemd/system/v2ray.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下内容</p><pre class="line-numbers language-service" data-language="service"><code class="language-service">[Service]User=v2ray<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置-Nginx-TLS"><a href="#配置-Nginx-TLS" class="headerlink" title="配置 Nginx + TLS"></a>配置 Nginx + TLS</h2><ul><li>创建 Nginx 配置</li></ul><p><code>vim /etc/nginx/sites-available/example.com.conf</code></p><p>将以下内容粘贴到文件中</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server {        listen 80;        listen [::]:80;        root /var/www/html;        # Add index.php to the list if you are using PHP        index index.html index.htm index.nginx-debian.html;        server_name example.com;        location / {                # First attempt to serve request as file, then                # as directory, then fall back to displaying a 404.                try_files $uri $uri/ =404;        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启用配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /etc/nginx/sites-available/example.com.conf /etc/nginx/sites-enabled/example.com.confnginx <span class="token parameter variable">-t</span>nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>配置 SSL 证书</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 acme.sh</span><span class="token function">curl</span> https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">email</span><span class="token operator">=</span>my@example.com<span class="token comment"># 生成证书并验证域名</span>acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">-d</span> example.com <span class="token parameter variable">--nginx</span><span class="token comment"># 安装证书</span>acme.sh --install-cert <span class="token parameter variable">-d</span> example.com <span class="token punctuation">\</span>--key-file       /path/to/keyfile/in/nginx/key.pem  <span class="token punctuation">\</span>--fullchain-file /path/to/fullchain/nginx/cert.pem <span class="token punctuation">\</span><span class="token parameter variable">--reloadcmd</span>     <span class="token string">"service nginx force-reload"</span><span class="token comment"># 查看证书</span>acme.sh <span class="token parameter variable">--info</span> <span class="token parameter variable">-d</span> example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置 Nginx + TLS</li></ul><p>将以下内容添加到 Nginx 配置文件</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server {    listen 443 ssl;    listen [::]:443 ssl;    root /var/www/html/;    ssl_certificate       /root/.acme.sh/example.com_ecc/fullchain.cer;    ssl_certificate_key   /root/.acme.sh/example.com_ecc/example.com.key;    ssl_session_timeout 1d;    ssl_session_cache shared:MozSSL:10m;    ssl_session_tickets off;    ssl_protocols         TLSv1.2 TLSv1.3;    ssl_ciphers           ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;    ssl_prefer_server_ciphers off;    server_name           example.com;    location /vvray {        if ($http_upgrade != "websocket") {            return 404;        }        proxy_redirect off;        proxy_pass http://127.0.0.1:12345;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection "upgrade";        proxy_set_header Host $host;        # Show real IP in v2ray access.log        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重新加载 Nginx 配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-t</span>nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动-V2ray"><a href="#启动-V2ray" class="headerlink" title="启动 V2ray"></a>启动 V2ray</h2><ul><li>配置文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/local/etc/v2ray/config.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将以下内容添加到文件中</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"loglevel"</span><span class="token operator">:</span> <span class="token string">"warning"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"inbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token comment">// 不再向外直接开放</span>      <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">12345</span><span class="token punctuation">,</span> <span class="token comment">// 与 nginx 反向代理端口一致</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"vmess"</span><span class="token punctuation">,</span>      <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"clients"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"xxx"</span> <span class="token comment">// 可通过 v2ray uuid 命令生成</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"streamSettings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"ws"</span><span class="token punctuation">,</span>        <span class="token property">"wsSettings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/vvray"</span> <span class="token comment">// 与 nginx 反向代理一致</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"outbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"freedom"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动服务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start v2ray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>clash 配置</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">proxies</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> vmess    <span class="token key atrule">server</span><span class="token punctuation">:</span> example.com    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">uuid</span><span class="token punctuation">:</span> 43cb6fce<span class="token punctuation">-</span>a840<span class="token punctuation">-</span>a468<span class="token punctuation">-</span>afe5<span class="token punctuation">-</span>99151333b8dd    <span class="token key atrule">alterId</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">cipher</span><span class="token punctuation">:</span> auto    <span class="token key atrule">tls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">skip-cert-verify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">network</span><span class="token punctuation">:</span> ws    <span class="token key atrule">ws-opts</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /vvray    <span class="token comment"># headers: # 按需配置</span>    <span class="token comment">#   Host: example.com</span>    <span class="token comment">#   User-Agent: 'xxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v2ray </tag>
            
            <tag> clash </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AMD VMware Workstation 15.1 安装 MacOS Catalina 10.15.5</title>
      <link href="/2023/04/13/vmware/amd-vmware15.1-install-macos-10.15.x/"/>
      <url>/2023/04/13/vmware/amd-vmware15.1-install-macos-10.15.x/</url>
      
        <content type="html"><![CDATA[<h1 id="AMD-平台-VMware-安装-MacOS"><a href="#AMD-平台-VMware-安装-MacOS" class="headerlink" title="AMD 平台 VMware 安装 MacOS"></a>AMD 平台 VMware 安装 MacOS</h1><blockquote><p>辣鸡 MacBook，配置低不说，还卖得贼拉贵，所以我等穷鬼只能走歪门邪道。。。真香</p></blockquote><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol><li>有一台强大的物理机，具体多强？看下面，如果达不到要求，直接劝退<ul><li>CPU: AMD 主频 4.0 GHz 以上</li><li>MEM: 16G 以上，建议 32G 更好</li><li>DISK: 可用空间至少 300G 以上，固态最好</li></ul></li><li>VMware Workstation 15.1.0</li><li>Unlocker - 解锁工具，让 VMware 可以安装 MacOS</li><li>macOS 10.15.5 镜像</li></ol><h2 id="安装-VMware-Workstation"><a href="#安装-VMware-Workstation" class="headerlink" title="安装 VMware Workstation"></a>安装 VMware Workstation</h2><blockquote><p>这个就不说了，太过简单</p></blockquote><h2 id="安装-Unlocker"><a href="#安装-Unlocker" class="headerlink" title="安装 Unlocker"></a>安装 Unlocker</h2><p>Unlocker 下载地址 <a href="https://github.com/theJaxon/unlocker">https://github.com/theJaxon/unlocker</a></p><p>你说 archived？自己想办法</p><p>找到可用的库，然后克隆到本地</p><p>先结束掉所有 VMware 的进程</p><p>然后打开 Unlocker 目录，找到 <code>win-install.cmd</code>，右键 <code>以管理员身份运行</code>，这一步必须要网好，否则会很慢很慢</p><p>完成后会自动关闭窗口</p><p><img src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/unlocker_1.png" alt="unlocker_1"></p><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>启动 VMware，创建新的虚拟机，在系统选择那里会看到多出了一个 <code>Apple Mac OS</code> 的选项，选中后选择对应的系统版本</p><p>后面的操作都是正常操作就不再赘述了，在创建完成后先不要启动，还需修改一些文件配置</p><h2 id="修改虚拟机配置"><a href="#修改虚拟机配置" class="headerlink" title="修改虚拟机配置"></a>修改虚拟机配置</h2><p><img src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmconfig_1.png" alt="虚拟化"><br><img src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmconfig_2.png" alt="USB"><br><img src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmconfig_3.png" alt="引导"></p><h2 id="修改-vmx-文件"><a href="#修改-vmx-文件" class="headerlink" title="修改 vmx 文件"></a>修改 vmx 文件</h2><p>进入刚才创建的虚拟机目录，找到后缀为 vmx 的文件</p><p><img src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmx_1.png" alt="vmx_1"></p><p>打开 vmx</p><p>找到 <code>virtualHW.version = "16"</code> 修改为 <code>virtualHW.version = "10"</code></p><p><img src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmx_2.png" alt="vmx_2"><br><img src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmx_3.png" alt="vmx_3"></p><p>找到 <code>smc.version</code> （如没有则新增一个就行）修改为 <code>smc.version = "0"</code></p><p>并增加以下内容</p><pre class="line-numbers language-vmx" data-language="vmx"><code class="language-vmx">cpuid.0.eax = "0000:0000:0000:0000:0000:0000:0000:1011"cpuid.0.ebx = "0111:0101:0110:1110:0110:0101:0100:0111"cpuid.0.ecx = "0110:1100:0110:0101:0111:0100:0110:1110"cpuid.0.edx = "0100:1001:0110:0101:0110:1110:0110:1001"cpuid.1.eax = "0000:0000:0000:0001:0000:0110:0111:0001"cpuid.1.ebx = "0000:0010:0000:0001:0000:1000:0000:0000"cpuid.1.ecx = "1000:0010:1001:1000:0010:0010:0000:0011"cpuid.1.edx = "0000:1111:1010:1011:1111:1011:1111:1111"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2><p>启动完成后，则进入到 macOS 的安装中</p><p>之前的内容都没什么特别，直到使用 <code>磁盘工具</code> 进行分区时我们会发现键盘无法输入</p><p>这时需要通过将键盘切换到虚拟机才能对分区进行命名操作，然后我们继续安装</p><p>在正式进入到安装并读条时，肯定会安装失败，然后会自动跳到 ‘macOS实用工具’ 界面，这里我们直接关闭客户机即可</p><p>然后打开 <code>编辑虚拟机设置</code>，按下图修改，在修改过程中会弹出警告，点击确定关闭掉即可，最后保存设置，然后再重新启动虚拟机</p><p><img src="/../../medias/images/amd-vmware15.1_install_macos10.15.x/vmconfig_4.png" alt="vmconfig_4"></p><p>重新启动虚拟机后，我们便可以继续进行系统安装，最后就可以正常使用了</p>]]></content>
      
      
      <categories>
          
          <category> vmware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> MacOS Catalina 10.15.x </tag>
            
            <tag> 黑苹果 </tag>
            
            <tag> 真香系列 </tag>
            
            <tag> AMD yyds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android strings.xml 中支持的特殊字符</title>
      <link href="/2023/03/13/android/strings/"/>
      <url>/2023/03/13/android/strings/</url>
      
        <content type="html"><![CDATA[<blockquote><p>要在 string.xml 中显示特殊符号、如@号冒号等、直接写会显示乱码，必须要改为 ASCII 十进制交换编码书写</p></blockquote><h1 id="编码对照表"><a href="#编码对照表" class="headerlink" title="编码对照表"></a>编码对照表</h1><table><thead><tr><th>编码</th><th>字符</th></tr></thead><tbody><tr><td>@</td><td>@</td></tr><tr><td>:</td><td>:</td></tr><tr><td>&nbsp;</td><td>(空格)</td></tr><tr><td> </td><td>(空格)</td></tr><tr><td>!</td><td>!</td></tr><tr><td>"</td><td>“</td></tr><tr><td>#</td><td>#</td></tr><tr><td>$</td><td>$</td></tr><tr><td>%</td><td>%</td></tr><tr><td>&amp;</td><td>&amp;</td></tr><tr><td>'</td><td>´</td></tr><tr><td>(</td><td>(</td></tr><tr><td>)</td><td>)</td></tr><tr><td>*</td><td>*</td></tr><tr><td>+</td><td>+</td></tr><tr><td>,</td><td>,</td></tr><tr><td>-</td><td>-</td></tr><tr><td>.</td><td>.</td></tr><tr><td>/</td><td>/</td></tr><tr><td>:</td><td>:</td></tr><tr><td>;</td><td>;</td></tr><tr><td>&lt;</td><td>&lt;</td></tr><tr><td>=</td><td>=</td></tr><tr><td>&gt;</td><td>&gt;</td></tr><tr><td>?</td><td>?</td></tr><tr><td>@</td><td>@</td></tr><tr><td>[</td><td>[</td></tr><tr><td>]</td><td>]</td></tr><tr><td>^</td><td>^</td></tr><tr><td>_</td><td>_</td></tr><tr><td>`</td><td>`</td></tr><tr><td>{</td><td>{</td></tr><tr><td>|</td><td></td></tr><tr><td>}</td><td>}</td></tr><tr><td>~</td><td>~</td></tr><tr><td>¡</td><td>¡</td></tr><tr><td>¢</td><td>¢</td></tr><tr><td>£</td><td>£</td></tr><tr><td>¤</td><td>¤</td></tr><tr><td>¥</td><td>¥</td></tr><tr><td>¦</td><td>¦</td></tr><tr><td>§</td><td>§</td></tr><tr><td>¨</td><td>¨</td></tr><tr><td>©</td><td>©</td></tr><tr><td>ª</td><td>ª</td></tr><tr><td>«</td><td>«</td></tr><tr><td>¬</td><td>¬</td></tr><tr><td>­</td><td>­</td></tr><tr><td>®</td><td>®</td></tr><tr><td>¯</td><td>¯</td></tr><tr><td>°</td><td>°</td></tr><tr><td>±</td><td>±</td></tr><tr><td>²</td><td>²</td></tr><tr><td>³</td><td>³</td></tr><tr><td>´</td><td>´</td></tr><tr><td>µ</td><td>µ</td></tr><tr><td>¶</td><td>¶</td></tr><tr><td>·</td><td>•</td></tr><tr><td>¸</td><td>¸</td></tr><tr><td>¹</td><td>¹</td></tr><tr><td>º</td><td>º</td></tr><tr><td>»</td><td>»</td></tr><tr><td>¼</td><td>¼</td></tr><tr><td>½</td><td>½</td></tr><tr><td>¾</td><td>¾</td></tr><tr><td>¿</td><td>¿</td></tr><tr><td>À</td><td>À</td></tr><tr><td>Á</td><td>Á</td></tr><tr><td>Â</td><td>Â</td></tr><tr><td>Ã</td><td>Ã</td></tr><tr><td>Ä</td><td>Ä</td></tr><tr><td>Å</td><td>Å</td></tr><tr><td>Æ</td><td>Æ</td></tr><tr><td>Ç</td><td>Ç</td></tr><tr><td>È</td><td>È</td></tr><tr><td>É</td><td>É</td></tr><tr><td>Ê</td><td>Ê</td></tr><tr><td>Ë</td><td>Ë</td></tr><tr><td>Ì</td><td>Ì</td></tr><tr><td>Í</td><td>Í</td></tr><tr><td>Î</td><td>Î</td></tr><tr><td>Ï</td><td>Ï</td></tr><tr><td>Ð</td><td>Ð</td></tr><tr><td>Ñ</td><td>Ñ</td></tr><tr><td>Ò</td><td>Ò</td></tr><tr><td>Ó</td><td>Ó</td></tr><tr><td>Ô</td><td>Ô</td></tr><tr><td>Õ</td><td>Õ</td></tr><tr><td>Ö</td><td>Ö</td></tr><tr><td>×</td><td>×</td></tr><tr><td>Ø</td><td>Ø</td></tr><tr><td>Ù</td><td>Ù</td></tr><tr><td>Ú</td><td>Ú</td></tr><tr><td>Û</td><td>Û</td></tr><tr><td>Ü</td><td>Ü</td></tr><tr><td>Ý</td><td>Ý</td></tr><tr><td>Þ</td><td>Þ</td></tr><tr><td>ß</td><td>ß</td></tr><tr><td>à</td><td>à</td></tr><tr><td>á</td><td>á</td></tr><tr><td>â</td><td>â</td></tr><tr><td>ã</td><td>ã</td></tr><tr><td>ä</td><td>ä</td></tr><tr><td>å</td><td>å</td></tr><tr><td>æ</td><td>æ</td></tr><tr><td>ç</td><td>ç</td></tr><tr><td>è</td><td>è</td></tr><tr><td>é</td><td>é</td></tr><tr><td>ê</td><td>ê</td></tr><tr><td>ë</td><td>ë</td></tr><tr><td>ì</td><td>ì</td></tr><tr><td>í</td><td>í</td></tr><tr><td>î</td><td>î</td></tr><tr><td>ï</td><td>ï</td></tr><tr><td>ð</td><td>ð</td></tr><tr><td>ñ</td><td>ñ</td></tr><tr><td>ò</td><td>ò</td></tr><tr><td>ó</td><td>ó</td></tr><tr><td>ô</td><td>ô</td></tr><tr><td>õ</td><td>õ</td></tr><tr><td>ö</td><td>ö</td></tr><tr><td>÷</td><td>÷</td></tr><tr><td>ø</td><td>ø</td></tr><tr><td>ù</td><td>ù</td></tr><tr><td>ú</td><td>ú</td></tr><tr><td>û</td><td>û</td></tr><tr><td>ü</td><td>ü</td></tr><tr><td>ý</td><td>ý</td></tr><tr><td>þ</td><td>þ</td></tr><tr><td>ÿ</td><td>ÿ</td></tr><tr><td>Ā</td><td>Ā</td></tr><tr><td>ā</td><td>ā</td></tr><tr><td>Ă</td><td>Ă</td></tr><tr><td>ă</td><td>ă</td></tr><tr><td>Ą</td><td>Ą</td></tr><tr><td>ą</td><td>ą</td></tr><tr><td>Ć</td><td>Ć</td></tr><tr><td>ć</td><td>ć</td></tr><tr><td>Ĉ</td><td>Ĉ</td></tr><tr><td>ĉ</td><td>ĉ</td></tr><tr><td>Ċ</td><td>Ċ</td></tr><tr><td>ċ</td><td>ċ</td></tr><tr><td>Č</td><td>Č</td></tr><tr><td>č</td><td>č</td></tr><tr><td>Ď</td><td>Ď</td></tr><tr><td>ď</td><td>ď</td></tr><tr><td>Đ</td><td>Đ</td></tr><tr><td>đ</td><td>đ</td></tr><tr><td>Ē</td><td>Ē</td></tr><tr><td>ē</td><td>ē</td></tr><tr><td>Ĕ</td><td>Ĕ</td></tr><tr><td>ĕ</td><td>ĕ</td></tr><tr><td>Ė</td><td>Ė</td></tr><tr><td>ė</td><td>ė</td></tr><tr><td>Ę</td><td>Ę</td></tr><tr><td>ę</td><td>ę</td></tr><tr><td>Ě</td><td>Ě</td></tr><tr><td>ě</td><td>ě</td></tr><tr><td>Ĝ</td><td>Ĝ</td></tr><tr><td>ĝ</td><td>ĝ</td></tr><tr><td>Ğ</td><td>Ğ</td></tr><tr><td>ğ</td><td>ğ</td></tr><tr><td>Ġ</td><td>Ġ</td></tr><tr><td>ġ</td><td>ġ</td></tr><tr><td>Ģ</td><td>Ģ</td></tr><tr><td>ģ</td><td>ģ</td></tr><tr><td>Ĥ</td><td>Ĥ</td></tr><tr><td>ĥ</td><td>ĥ</td></tr><tr><td>Ħ</td><td>Ħ</td></tr><tr><td>ħ</td><td>ħ</td></tr><tr><td>Ĩ</td><td>Ĩ</td></tr><tr><td>ĩ</td><td>ĩ</td></tr><tr><td>Ī</td><td>Ī</td></tr><tr><td>ī</td><td>ī</td></tr><tr><td>Ĭ</td><td>Ĭ</td></tr><tr><td>ĭ</td><td>ĭ</td></tr><tr><td>Į</td><td>Į</td></tr><tr><td>į</td><td>į</td></tr><tr><td>İ</td><td>İ</td></tr><tr><td>ı</td><td>ı</td></tr><tr><td>Ĳ</td><td>Ĳ</td></tr><tr><td>ĳ</td><td>ĳ</td></tr><tr><td>Ĵ</td><td>Ĵ</td></tr><tr><td>ĵ</td><td>ĵ</td></tr><tr><td>Ķ</td><td>Ķ</td></tr><tr><td>ķ</td><td>ķ</td></tr><tr><td>ĸ</td><td>ĸ</td></tr><tr><td>Ĺ</td><td>Ĺ</td></tr><tr><td>ĺ</td><td>ĺ</td></tr><tr><td>Ļ</td><td>Ļ</td></tr><tr><td>ļ</td><td>ļ</td></tr><tr><td>Ľ</td><td>Ľ</td></tr><tr><td>ľ</td><td>ľ</td></tr><tr><td>Ŀ</td><td>Ŀ</td></tr><tr><td>ŀ</td><td>ŀ</td></tr><tr><td>Ł</td><td>Ł</td></tr><tr><td>ł</td><td>ł</td></tr><tr><td>Ń</td><td>Ń</td></tr><tr><td>ń</td><td>ń</td></tr><tr><td>Ņ</td><td>Ņ</td></tr><tr><td>ņ</td><td>ņ</td></tr><tr><td>Ň</td><td>Ň</td></tr><tr><td>ň</td><td>ň</td></tr><tr><td>ŉ</td><td>ŉ</td></tr><tr><td>Ŋ</td><td>Ŋ</td></tr><tr><td>ŋ</td><td>ŋ</td></tr><tr><td>Ō</td><td>Ō</td></tr><tr><td>ō</td><td>ō</td></tr><tr><td>Ŏ</td><td>Ŏ</td></tr><tr><td>ŏ</td><td>ŏ</td></tr><tr><td>Ő</td><td>Ő</td></tr><tr><td>ő</td><td>ő</td></tr><tr><td>Œ</td><td>Œ</td></tr><tr><td>œ</td><td>œ</td></tr><tr><td>Ŕ</td><td>Ŕ</td></tr><tr><td>ŕ</td><td>ŕ</td></tr><tr><td>Ŗ</td><td>Ŗ</td></tr><tr><td>ŗ</td><td>ŗ</td></tr><tr><td>Ř</td><td>Ř</td></tr><tr><td>ř</td><td>ř</td></tr><tr><td>Ś</td><td>Ś</td></tr><tr><td>ś</td><td>ś</td></tr><tr><td>Ŝ</td><td>Ŝ</td></tr><tr><td>ŝ</td><td>ŝ</td></tr><tr><td>Ş</td><td>Ş</td></tr><tr><td>ş</td><td>ş</td></tr><tr><td>Š</td><td>Š</td></tr><tr><td>š</td><td>š</td></tr><tr><td>Ţ</td><td>Ţ</td></tr><tr><td>ţ</td><td>ţ</td></tr><tr><td>Ť</td><td>Ť</td></tr><tr><td>ť</td><td>ť</td></tr><tr><td>Ŧ</td><td>Ŧ</td></tr><tr><td>ŧ</td><td>ŧ</td></tr><tr><td>Ũ</td><td>Ũ</td></tr><tr><td>ũ</td><td>ũ</td></tr><tr><td>Ū</td><td>Ū</td></tr><tr><td>ū</td><td>ū</td></tr><tr><td>Ŭ</td><td>Ŭ</td></tr><tr><td>ŭ</td><td>ŭ</td></tr><tr><td>Ů</td><td>Ů</td></tr><tr><td>ů</td><td>ů</td></tr><tr><td>Ű</td><td>Ű</td></tr><tr><td>ű</td><td>ű</td></tr><tr><td>Ų</td><td>Ų</td></tr><tr><td>ų</td><td>ų</td></tr><tr><td>Ŵ</td><td>Ŵ</td></tr><tr><td>ŵ</td><td>ŵ</td></tr><tr><td>Ŷ</td><td>Ŷ</td></tr><tr><td>ŷ</td><td>ŷ</td></tr><tr><td>Ÿ</td><td>Ÿ</td></tr><tr><td>Ź</td><td>Ź</td></tr><tr><td>ź</td><td>ź</td></tr><tr><td>Ż</td><td>Ż</td></tr><tr><td>ż</td><td>ż</td></tr><tr><td>Ž</td><td>Ž</td></tr><tr><td>ž</td><td>ž</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> strings </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 年 Apple Developer Enterprise Program 续订审核</title>
      <link href="/2023/02/23/apple/2023-apple-developer-enterprise-program/"/>
      <url>/2023/02/23/apple/2023-apple-developer-enterprise-program/</url>
      
        <content type="html"><![CDATA[<h1 id="2023-Apple-Developer-Enterprise-Program-续订审核"><a href="#2023-Apple-Developer-Enterprise-Program-续订审核" class="headerlink" title="2023 Apple Developer Enterprise Program 续订审核"></a>2023 Apple Developer Enterprise Program 续订审核</h1><blockquote><p>又到了一年一度的 Apple 企业级开发帐号的续费了，随之而来的就是帐号续订资格的审核，这里只能说一句，事儿真多，审核这种东西真的有用？意思人家搞灰产的会给你在里面填：“噢，亲爱的库克，真是不好意思，我拿着你的资源搞了灰产，请你给我审核通过一下哦~”，此处应有掌声。我只想，说给你钱还搞那么多逼事儿，真是恶心死人不偿命。</p></blockquote><h2 id="步骤详解"><a href="#步骤详解" class="headerlink" title="步骤详解"></a>步骤详解</h2><h3 id="Your-Organization"><a href="#Your-Organization" class="headerlink" title="Your Organization"></a>Your Organization</h3><ul><li><p>Which best describes your entity? <code>组织的类型</code></p><ul><li>如实填写</li></ul></li><li><p>Is this the correct name of your organization? <code>组织的名称是否正确</code></p><ul><li>Yes</li></ul></li><li><p>Is this the correct URL for your organization’s website? <code>组织官网是否正确</code></p><ul><li>Yes</li></ul></li><li><p>Is this your correct email address? <code>电子邮件地址是否正确</code></p><ul><li>Yes</li></ul></li><li><p>Are you an employee of the organization? <code>你是否为该组织员工</code></p><ul><li>Yes</li></ul></li><li><p>Do you have the authority to accept legal agreements on behalf of your organization? <code>你是否有权代为接受法律协议</code></p><ul><li>Yes</li></ul></li><li><p><code>重点！！！</code>How many employees does your organization have? <code>该组织的员工数量</code></p><ul><li>这里必须选择大于 100 人的选项，否则你就会收到 库克 ♂ 你 的邮件！<br><img src="/../../medias/images/2023_APEP_error_1.png" alt="库克 ♂ 你"></li></ul></li><li><p>Briefly describe your organization’s primary industry. <code>描述该组织的经营范围</code></p><ul><li>如实填写</li></ul></li></ul><h3 id="App-Development"><a href="#App-Development" class="headerlink" title="App Development"></a>App Development</h3><ul><li><p>Tell us about an app you’ve developed or distributed through the program that’s been used for at least 6 months. Describe the app’s purpose and functionality, and how frequently it’s used. Include the bundle identifier. <code>告诉我们您通过该计划开发或分发的应用，该应用已使用至少 6 个月。描述应用的用途和功能，以及使用频率。包括捆绑标识符。</code></p><ul><li>如实填写</li></ul></li><li><p>Who builds your in-house apps? <code>由谁生成应用程序</code></p><ul><li>Employees</li></ul></li><li><p>How many employees are on your internal app development team? <code>开发团队成员数量</code></p><ul><li>1-29</li></ul></li><li><p>How many enterprise apps have you built or are you currently building? <code>已构建或正在构建的应用数量</code></p><ul><li>1-9</li></ul></li><li><p>Do you own the intellectual property rights for all of your in-house apps? <code>是否拥有所有内部应用程序的知识产权？</code></p><ul><li>Yes</li></ul></li><li><p>Do you own the source code for all of your in-house apps? <code>是否拥有所有内部应用程序的源代码？</code></p><ul><li>Yes</li></ul></li><li><p>Are you currently developing or distributing enterprise apps for macOS? <code>目前正在开发或分发适用于 macOS 的企业应用程序吗？</code></p><ul><li>Yes</li></ul></li></ul><h3 id="App-Distribution-and-Code-Sharing"><a href="#App-Distribution-and-Code-Sharing" class="headerlink" title="App Distribution and Code Sharing"></a>App Distribution and Code Sharing</h3><ul><li><p>Do you re-sign compiled apps from other developers to use within your organization? <code>是否对来自其他开发人员的已编译应用重新签名以在组织内使用？</code></p><ul><li>No</li></ul></li><li><p>Do you act as an app development contractor for other organizations? <code>您是否担任其他组织的应用程序开发承包商？</code></p><ul><li>No</li></ul></li><li><p>Who are your app’s users? <code>谁是应用的用户？</code></p><ul><li>Employees within your organization</li></ul></li><li><p>Describe in detail how you distribute your apps to users. <code>详细描述如何将应用分发给用户</code></p><ul><li>描述分发过程</li></ul></li><li><p>To how many devices does your organization distribute apps using this program? <code>您的组织使用此程序向多少台设备分发应用程序？</code></p><ul><li>尽量多</li></ul></li></ul><h3 id="Security-and-App-Testing"><a href="#Security-and-App-Testing" class="headerlink" title="Security and App Testing"></a>Security and App Testing</h3><ul><li><p>What mechanisms have you put in place to ensure your apps can only be installed by your employees and permitted users? <code>你采取了哪些机制来确保你的应用只能由你的员工和允许的用户安装？</code></p><ul><li>如实填写</li></ul></li><li><p>Have you ever shared the sign in credentials of the Account Holder with others, including contractors or coworkers? <code>您是否曾经与其他人（包括承包商或同事）共享帐户持有人的登录凭据？</code></p><ul><li>No</li></ul></li><li><p>Who has access to the sign in credentials of the Account Holder? <code>谁有权访问帐户持有人的登录凭据？</code></p><ul><li>Account holders</li></ul></li><li><p>Who has access to your Enterprise App Distribution Certificates? <code>谁有权访问您的企业应用分发证书？</code></p><ul><li>Account holders and authorized developers</li></ul></li><li><p>How do you monitor and control access to your Enterprise App Distribution Certificates? <code>如何监视和控制对企业应用分发证书的访问？</code></p><ul><li>Enable two-factor authentication, administrator hold, generate P12 to developers</li></ul></li><li><p>Do you use program resources to test apps before publishing them on the App Store? <code>在将应用发布到 App Store 之前，您是否使用程序资源来测试它们？</code></p><ul><li>No <code>因为未发布到AppStore</code></li></ul></li><li><p>Does your organization have more than one membership in the Apple Developer Enterprise Program? <code>您的组织是否在 Apple 开发人员企业计划中拥有多个成员资格？</code></p><ul><li>No</li></ul></li><li><p>Which of the following uses of the program are necessary for your organization? <code>您的组织需要以下哪些程序用途？</code></p><ul><li>如实填写</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> apple </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apple Developer Enterprise Program </tag>
            
            <tag> 内鬼‘蒂姆·库克’ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cygwin 自定义主题</title>
      <link href="/2023/02/16/cygwin/customize-theme-cygwin/"/>
      <url>/2023/02/16/cygwin/customize-theme-cygwin/</url>
      
        <content type="html"><![CDATA[<h1 id="Cygwin-自定义主题"><a href="#Cygwin-自定义主题" class="headerlink" title="Cygwin 自定义主题"></a>Cygwin 自定义主题</h1><blockquote><p>定制一个自己喜欢的主题，展示一些个性化的内容</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>官方自带的主题文件在 <code>.oh-my-zsh/themes</code> 目录下，可以通过 <code>omz theme list</code> 命令查看所有可用的主题</p></li><li><p>先通过 <code>omz theme set {theme_name}</code> 命令设置主题，找到一个最贴切自己喜好的主题</p></li><li><p>然后可以再查看 <code>.oh-my-zsh/themes</code> 下同名的主题文件，复制到 <code>.oh-my-zsh/custom/themes</code> 目录并改名即可</p></li><li><p>编辑刚才创建的文件内容，并修改其内部样式直至完美，通过 <code>omz theme set {theme_name}</code> 命令设置自定义主题即可</p></li></ol><h2 id="最后贴一份我自己的主题文件"><a href="#最后贴一份我自己的主题文件" class="headerlink" title="最后贴一份我自己的主题文件"></a>最后贴一份我自己的主题文件</h2><ul><li><p>效果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># clistery @ work in ~ on git:master x [ababa112] [10:09:31] C:0</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>cyh.zsh-theme</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Clean, simple, compatible and meaningful.</span><span class="token comment"># Tested on Linux, Unix and Windows under ANSI colors.</span><span class="token comment"># It is recommended to use with a dark background.</span><span class="token comment"># Colors: black, red, green, yellow, *blue, magenta, cyan, and white.</span><span class="token comment">#</span><span class="token comment"># Nov 2022 CListery</span><span class="token assign-left variable">RED</span><span class="token operator">=</span><span class="token variable">$fg</span><span class="token punctuation">[</span>red<span class="token punctuation">]</span><span class="token assign-left variable">YELLOW</span><span class="token operator">=</span><span class="token variable">$fg</span><span class="token punctuation">[</span>yellow<span class="token punctuation">]</span><span class="token assign-left variable">GREEN</span><span class="token operator">=</span><span class="token variable">$fg</span><span class="token punctuation">[</span>green<span class="token punctuation">]</span><span class="token assign-left variable">WHITE</span><span class="token operator">=</span><span class="token variable">$fg</span><span class="token punctuation">[</span>white<span class="token punctuation">]</span><span class="token assign-left variable">BLUE</span><span class="token operator">=</span><span class="token variable">$fg</span><span class="token punctuation">[</span>blue<span class="token punctuation">]</span><span class="token assign-left variable">RED_BOLD</span><span class="token operator">=</span><span class="token variable">$fg_bold</span><span class="token punctuation">[</span>red<span class="token punctuation">]</span><span class="token assign-left variable">YELLOW_BOLD</span><span class="token operator">=</span><span class="token variable">$fg_bold</span><span class="token punctuation">[</span>yellow<span class="token punctuation">]</span><span class="token assign-left variable">GREEN_BOLD</span><span class="token operator">=</span><span class="token variable">$fg_bold</span><span class="token punctuation">[</span>green<span class="token punctuation">]</span><span class="token assign-left variable">WHITE_BOLD</span><span class="token operator">=</span><span class="token variable">$fg_bold</span><span class="token punctuation">[</span>white<span class="token punctuation">]</span><span class="token assign-left variable">BLUE_BOLD</span><span class="token operator">=</span><span class="token variable">$fg_bold</span><span class="token punctuation">[</span>blue<span class="token punctuation">]</span><span class="token assign-left variable">RESET_COLOR</span><span class="token operator">=</span><span class="token variable">$reset_color</span><span class="token comment"># VCS</span><span class="token assign-left variable">CL_VCS_PROMPT_PREFIX1</span><span class="token operator">=</span><span class="token string">" %{<span class="token variable">$reset_color</span>%}on%{<span class="token variable">$fg</span>[blue]%} "</span><span class="token assign-left variable">CL_VCS_PROMPT_PREFIX2</span><span class="token operator">=</span><span class="token string">":%{<span class="token variable">$fg</span>[cyan]%}"</span><span class="token assign-left variable">CL_VCS_PROMPT_SUFFIX</span><span class="token operator">=</span><span class="token string">"%{<span class="token variable">$reset_color</span>%}"</span><span class="token assign-left variable">CL_VCS_PROMPT_DIRTY</span><span class="token operator">=</span><span class="token string">" %{<span class="token variable">$RED</span>%}x"</span><span class="token assign-left variable">CL_VCS_PROMPT_CLEAN</span><span class="token operator">=</span><span class="token string">" %{<span class="token variable">$GREEN</span>%}o"</span><span class="token comment"># Git info</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">git_info</span><span class="token operator">=</span><span class="token string">'$(git_prompt_info)$(git_prompt_short_sha)'</span><span class="token assign-left variable">ZSH_THEME_GIT_PROMPT_PREFIX</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${CL_VCS_PROMPT_PREFIX1}</span>git<span class="token variable">${CL_VCS_PROMPT_PREFIX2}</span>"</span><span class="token assign-left variable">ZSH_THEME_GIT_PROMPT_SUFFIX</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CL_VCS_PROMPT_SUFFIX</span>"</span><span class="token assign-left variable">ZSH_THEME_GIT_PROMPT_DIRTY</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CL_VCS_PROMPT_DIRTY</span>"</span><span class="token assign-left variable">ZSH_THEME_GIT_PROMPT_CLEAN</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CL_VCS_PROMPT_CLEAN</span>"</span><span class="token comment"># Format for git_prompt_long_sha() and git_prompt_short_sha()</span><span class="token assign-left variable">ZSH_THEME_GIT_PROMPT_SHA_BEFORE</span><span class="token operator">=</span><span class="token string">" %{<span class="token variable">$reset_color</span>%}%{<span class="token variable">$fg</span>[white]%}[%{<span class="token variable">$YELLOW</span>%}"</span><span class="token assign-left variable">ZSH_THEME_GIT_PROMPT_SHA_AFTER</span><span class="token operator">=</span><span class="token string">"%{<span class="token variable">$fg</span>[white]%}]"</span><span class="token comment"># SVN info</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">svn_info</span><span class="token operator">=</span><span class="token string">'$(svn_prompt_info)'</span><span class="token assign-left variable">ZSH_THEME_SVN_PROMPT_PREFIX</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${CL_VCS_PROMPT_PREFIX1}</span>svn<span class="token variable">${CL_VCS_PROMPT_PREFIX2}</span>"</span><span class="token assign-left variable">ZSH_THEME_SVN_PROMPT_SUFFIX</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CL_VCS_PROMPT_SUFFIX</span>"</span><span class="token assign-left variable">ZSH_THEME_SVN_PROMPT_DIRTY</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CL_VCS_PROMPT_DIRTY</span>"</span><span class="token assign-left variable">ZSH_THEME_SVN_PROMPT_CLEAN</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CL_VCS_PROMPT_CLEAN</span>"</span><span class="token comment"># HG info</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">hg_info</span><span class="token operator">=</span><span class="token string">'$(cl_hg_prompt_info)'</span><span class="token function-name function">cl_hg_prompt_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment"># make sure this is a hg dir</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">'.hg'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">${CL_VCS_PROMPT_PREFIX1}</span>hg<span class="token variable">${CL_VCS_PROMPT_PREFIX2}</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">hg</span> branch <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span class="token variable">)</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">hg</span> config oh-my-zsh.hide-dirty <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span class="token variable">)</span></span>"</span> <span class="token operator">!=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">hg</span> status <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$CL_VCS_PROMPT_DIRTY</span>"</span>      <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$CL_VCS_PROMPT_CLEAN</span>"</span>      <span class="token keyword">fi</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$CL_VCS_PROMPT_SUFFIX</span>"</span>  <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token comment"># Virtualenv</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">venv_info</span><span class="token operator">=</span><span class="token string">'$(virtenv_prompt)'</span><span class="token assign-left variable">CL_THEME_VIRTUALENV_PROMPT_PREFIX</span><span class="token operator">=</span><span class="token string">" %{<span class="token variable">$GREEN</span>%}"</span><span class="token assign-left variable">CL_THEME_VIRTUALENV_PROMPT_SUFFIX</span><span class="token operator">=</span><span class="token string">" %{<span class="token variable">$reset_color</span>%}%"</span><span class="token function-name function">virtenv_prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">${VIRTUAL_ENV<span class="token operator">:-</span>}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token builtin class-name">return</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${CL_THEME_VIRTUALENV_PROMPT_PREFIX}</span><span class="token variable">${VIRTUAL_ENV<span class="token operator">:</span>t}</span><span class="token variable">${CL_THEME_VIRTUALENV_PROMPT_SUFFIX}</span>"</span><span class="token punctuation">}</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">exit_code</span><span class="token operator">=</span><span class="token string">"%(?,,C:%{<span class="token variable">$RED</span>%}%?%{<span class="token variable">$reset_color</span>%})"</span><span class="token comment"># Prompt format:</span><span class="token comment">#</span><span class="token comment"># PRIVILEGES USER @ MACHINE in DIRECTORY on git:BRANCH STATE [SHA] [TIME] C:LAST_EXIT_CODE</span><span class="token comment"># $ COMMAND</span><span class="token comment">#</span><span class="token comment"># For example:</span><span class="token comment">#</span><span class="token comment"># % clistery @ work in ~ on git:master x [ababa112] [10:09:31] C:0</span><span class="token comment"># $</span><span class="token assign-left variable">PROMPT</span><span class="token operator">=</span><span class="token string">"%{<span class="token variable">$terminfo</span>[bold]<span class="token variable">$fg</span>[blue]%}#%{<span class="token variable">$reset_color</span>%} \%(#,%{<span class="token variable">$bg</span>[yellow]%}%{<span class="token variable">$fg</span>[black]%}%n%{<span class="token variable">$reset_color</span>%},%{<span class="token variable">$fg</span>[cyan]%}%n) \%{<span class="token variable">$reset_color</span>%}@ \%{<span class="token variable">$GREEN</span>%}%m \%{<span class="token variable">$reset_color</span>%}in \%{<span class="token variable">$terminfo</span>[bold]<span class="token variable">$YELLOW</span>%}%~%{<span class="token variable">$reset_color</span>%}\<span class="token variable">${hg_info}</span>\<span class="token variable">${git_info}</span>\<span class="token variable">${svn_info}</span>\<span class="token variable">${venv_info}</span>\\[%*] <span class="token variable">$exit_code</span>%{<span class="token variable">$terminfo</span>[bold]<span class="token variable">$RED</span>%}$ %{<span class="token variable">$reset_color</span>%}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> cygwin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cygwin </tag>
            
            <tag> theme </tag>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cygwin 设置 HOME 目录</title>
      <link href="/2023/02/16/cygwin/setup-home-dir-cygwin/"/>
      <url>/2023/02/16/cygwin/setup-home-dir-cygwin/</url>
      
        <content type="html"><![CDATA[<h1 id="Cygwin-设置-HOME-目录"><a href="#Cygwin-设置-HOME-目录" class="headerlink" title="Cygwin 设置 HOME 目录"></a>Cygwin 设置 HOME 目录</h1><blockquote><p>由于 Windows 下复杂的环境问题，通过其他软件结合 Cygwin 打开命令行时，默认的 HOME 目录极有可能出现问题，且新版本 <code>Windows Terminal + Cygwin</code> 在 Windows 资源管理器中右键菜单打开终端时会出现无法直接进入到当前目录的情况</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><a href="https://github.com/microsoft/terminal">Windows Terminal</a> + <a href="https://cygwin.com/install.html">Cygwin</a> + <a href="https://www.zsh.org/">zsh</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>勾选 Windows Terminal 中配置文件 Cygwin 启动目录中的 <code>使用父进程目录</code></p><p><img src="/medias/images/windows_terminal-cygwin-config.png" alt="使用父进程目录"></p></li><li><p>修改 Cygwin.bat，添加以下内容</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">set _T=%CD%.\zsh --login -i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时如果不想外部传入 HOME 环境变量可在第一行添加</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">set HOME=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改 <code>.zshrc</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">_T</span><span class="token operator">=</span><span class="token variable">${_T<span class="token operator">/</span><span class="token operator">/</span>\\<span class="token operator">/</span><span class="token operator">/</span>}</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$_T</span> <span class="token operator">!=</span> <span class="token string">"C:/WINDOWS/System32"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$_T</span>"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> cygwin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cygwin </tag>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cygwin 创建文件权限问题</title>
      <link href="/2023/02/15/cygwin/fstab-error-cygwin/"/>
      <url>/2023/02/15/cygwin/fstab-error-cygwin/</url>
      
        <content type="html"><![CDATA[<h1 id="Cygwin-创建文件问题"><a href="#Cygwin-创建文件问题" class="headerlink" title="Cygwin 创建文件问题"></a>Cygwin 创建文件问题</h1><blockquote><p>在通过命令行，如：<code>mkdir test</code> 创建一个目录或文件后，通过右键属性打开安全选项卡时，Windows 会提示 <code>test 上的权限顺序不正确</code>，而后可能会导致一些文件权限操作上的异常问题发生</p></blockquote><h2 id="诱因"><a href="#诱因" class="headerlink" title="诱因"></a>诱因</h2><p>Cygwin 的主要目的是通过重新编译，将 POSIX 系统（例如 Linux、BSD，以及其他 Unix 系统）上的软件移植到 Windows 上。</p><p>所以 Cygwin 自带的对文件的创建命令同样也是通过移植 POSIX 的方式实现，这一点我们可以通过 cygwin 安装目录下的 <code>/etc/fstab</code> 文件内容得到验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># This is default anyway:</span>none /cygdrive cygdrive binary,posix<span class="token operator">=</span><span class="token number">0</span>,user <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>默认情况下，Cygwin 使用文件系统的访问控制列表 (ACL) 来实现真正的 POSIX 权限。</p><p>某些 Windows 本地程序或进程可能会创建或修改 ACL，导致 Cygwin 将 POSIX 权限计算为 000。</p><p>所以需要将 <code>/etc/fstab</code> 改为如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">none /cygdrive cygdrive binary,noacl,posix<span class="token operator">=</span><span class="token number">0</span>,user <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>noacl</code> 挂载选项，Cygwin 会忽略文件系统 ACL，并且只会根据 DOS 只读属性伪造权限位的子集。</p><p>最后关闭所有 Cygwin 及相关进程（或者直接重启系统），打开一个新终端并再次对您的文件执行 <code>ls -l</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh.wikipedia.org/wiki/Cygwin">Cygwin</a></li><li><a href="https://stackoverflow.com/questions/5828037/cygwin-sets-file-permission-to-000">cygwin-sets-file-permission-to-000</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cygwin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cygwin </tag>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> fstab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序解包</title>
      <link href="/2022/12/09/reverse/unpkg-wx-app/"/>
      <url>/2022/12/09/reverse/unpkg-wx-app/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序解包"><a href="#微信小程序解包" class="headerlink" title="微信小程序解包"></a>微信小程序解包</h1><blockquote><p>通过解包小程序文件我们可以做一些小程序内的代码分析和资源获取</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="拿到-wxapkg"><a href="#拿到-wxapkg" class="headerlink" title="拿到 wxapkg"></a>拿到 wxapkg</h3><p>第一步先拿到小程序的 wxapkg 文件</p><h4 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h4><h5 id="安卓-需要root设备"><a href="#安卓-需要root设备" class="headerlink" title="安卓(需要root设备)"></a>安卓(需要root设备)</h5><p>在以下目录中找到小程序包，如果不确定是哪一个，直接全部删除，然后再重新打开一遍你需要的小程序，然后再看目录下的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/data/data/com.tencent.mm/MicroMsg/<span class="token punctuation">{</span><span class="token punctuation">{</span>user哈希值<span class="token punctuation">}</span><span class="token punctuation">}</span>/appbrand/pkg/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="windows-需要解密"><a href="#windows-需要解密" class="headerlink" title="windows(需要解密)"></a>windows(需要解密)</h5><p>先打开微信设置，然后找到文件管理</p><p>如下所示，然后点击打开文件夹</p><p><img src="/medias/images/wx-pc-settings-filemanager.png" alt="微信文件管理"></p><p>在打开的文件夹中再找到 <code>Applet</code> 文件夹并打开，就可以看到一堆小程序文件夹了，然后找到你需要的即可<br>如果不确定是哪一个，直接全部删除，然后再重新打开一遍你需要的小程序即可</p><h5 id="解密-wxapkg"><a href="#解密-wxapkg" class="headerlink" title="解密 wxapkg"></a>解密 wxapkg</h5><p>如果你是通过 windows 端获取到的 wxapkg，那么在这之前还需要进行一次解密操作</p><p>下载解密工具 <a href="https://github.com/BlackTrace/pc_wxapkg_decrypt">https://github.com/BlackTrace/pc_wxapkg_decrypt</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pc_wxapkg_decrypt.exe <span class="token parameter variable">-wxid</span> <span class="token operator">&lt;</span>appid<span class="token operator">&gt;</span> <span class="token parameter variable">-in</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>.wxapkg <span class="token parameter variable">-out</span> <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解压-wxapkg"><a href="#解压-wxapkg" class="headerlink" title="解压 wxapkg"></a>解压 wxapkg</h3><p>下载解压工具 <a href="https://github.com/qwerty472123/wxappUnpacker">https://github.com/qwerty472123/wxappUnpacker</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> wuWxapkg.js <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>.wxapkg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完事~</p>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> wechat </tag>
            
            <tag> wxapp </tag>
            
            <tag> wxapkg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置 Cygwin</title>
      <link href="/2022/11/15/cygwin/setup-cygwin/"/>
      <url>/2022/11/15/cygwin/setup-cygwin/</url>
      
        <content type="html"><![CDATA[<h1 id="设置-Cygwin"><a href="#设置-Cygwin" class="headerlink" title="设置 Cygwin"></a>设置 Cygwin</h1><h2 id="Windows-Terminal-Cygwin"><a href="#Windows-Terminal-Cygwin" class="headerlink" title="Windows Terminal + Cygwin"></a>Windows Terminal + Cygwin</h2><p><a href="https://github.com/microsoft/terminal">Windows Terminal</a></p><p>命令行：<code>${Cygwin安装目录}\Cygwin.bat</code><br>启动目录：勾选使用父进程</p><ul><li>zsh</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到你当前用户一行，将末尾改为 <code>/bin/zsh</code></p><h2 id="IntelliJ系列-Cygwin"><a href="#IntelliJ系列-Cygwin" class="headerlink" title="IntelliJ系列 + Cygwin"></a>IntelliJ系列 + Cygwin</h2><p>Settings -&gt; Tools -&gt; Terminal -&gt; Application Settings -&gt; Shell path: <code>${Cygwin安装目录}\Cygwin.bat</code></p><h2 id="VSCode-Cygwin"><a href="#VSCode-Cygwin" class="headerlink" title="VSCode + Cygwin"></a>VSCode + Cygwin</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"terminal.integrated.profiles.windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"Cygwin"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"${Cygwin安装目录}\Cygwin.bat"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"terminal-cmd"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cygwin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cygwin </tag>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh 实现指定用户仅认证不登录</title>
      <link href="/2022/11/15/ubuntu/ssh-no-login/"/>
      <url>/2022/11/15/ubuntu/ssh-no-login/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh-实现指定用户仅认证不登录"><a href="#ssh-实现指定用户仅认证不登录" class="headerlink" title="ssh 实现指定用户仅认证不登录"></a>ssh 实现指定用户仅认证不登录</h1><blockquote><p>当我们有 ssh 代理代理转发的需求时，就可以在跳板机上做一个仅任认证不登录的用户，用来防止跳板机被以外登录</p></blockquote><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> adduser jump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置-sshd"><a href="#配置-sshd" class="headerlink" title="配置 sshd"></a>配置 sshd</h3><p>先切换到 jump 用户</p><h4 id="欢迎信息"><a href="#欢迎信息" class="headerlink" title="欢迎信息"></a>欢迎信息</h4><p><code>vim /home/jump/banner</code></p><pre class="line-numbers language-banner" data-language="banner"><code class="language-banner">Ok! You've successfully authenticated.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建-authorized-keys"><a href="#创建-authorized-keys" class="headerlink" title="创建 authorized_keys"></a>创建 authorized_keys</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /home/jump/.ssh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> <span class="token number">755</span> /home/jump/.ssh<span class="token function">vim</span> /home/jump/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将公钥添加到 <code>authorized_keys</code> 文件中</p><h4 id="修改-sshd-config"><a href="#修改-sshd-config" class="headerlink" title="修改 sshd_config"></a>修改 sshd_config</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将下面的内容添加到 <code>sshd_config</code> 文件末尾</p><pre class="line-numbers language-sshd_config" data-language="sshd_config"><code class="language-sshd_config">Match User jump  Banner /home/jump/banner  AuthorizedKeysFile /home/jump/.ssh/authorized_keys  PasswordAuthentication no  PubkeyAuthentication yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启-sshd"><a href="#重启-sshd" class="headerlink" title="重启 sshd"></a>重启 sshd</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/ssh restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到这里就可以通过正常的 ssh 方式登录 jump 用户了，而且登录时第一行会看到 <code>banner</code> 文件中的内容</p><h3 id="修改-shell-禁用登录"><a href="#修改-shell-禁用登录" class="headerlink" title="修改 shell (禁用登录)"></a>修改 shell (禁用登录)</h3><p><code>vim /etc/passwd</code></p><p>找到 <code>jump</code>，将最后的 <code>/bin/bash</code> 改为 <code>/bin/false</code></p><p>现在再通过 ssh 的方式登录，会先登录成功，然后紧接着就被关闭连接</p><p><code>到这里就已经基本实现了仅认证不登录的实现</code></p><h3 id="优化部分"><a href="#优化部分" class="headerlink" title="优化部分"></a>优化部分</h3><h4 id="去除登录后显示的系统信息登录信息"><a href="#去除登录后显示的系统信息登录信息" class="headerlink" title="去除登录后显示的系统信息登录信息"></a>去除登录后显示的系统信息登录信息</h4><p>在登录成功后默认会展示一大堆内容，这些是不需要的，所以如何隐藏它？</p><p>很简单，直接在 <code>jump</code> 用户目录下创建一个 <code>.hushlogin</code> 文件即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /home/jump/.hushlogin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再通过 ssh 登录就看不到默认输出的一大堆内容了，就只会看到 <code>banner</code> 文件中的内容</p><h4 id="优化显示登录信息"><a href="#优化显示登录信息" class="headerlink" title="优化显示登录信息"></a>优化显示登录信息</h4><p>如果只想显示登录信息改如何修改？</p><p>还是先按照上面的内容，通过创建 <code>.hushlogin</code> 文件去除默认信息</p><p>然后再通过创建 <code>rc</code> 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /home/jump/.ssh/rc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将以下内容写入到 <code>rc</code> 文件中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lastlog <span class="token parameter variable">-u</span> <span class="token environment constant">$USER</span> <span class="token operator">|</span> perl <span class="token parameter variable">-lane</span> <span class="token string">'END{print "Last login: @F[3..6] $F[8] from $F[2]"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再通过 ssh 登录，就只会看到上一次的登录信息了</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次 DockerCompose 配置 22 端口映射遇到的坑</title>
      <link href="/2022/11/11/docker/port-22-bug/"/>
      <url>/2022/11/11/docker/port-22-bug/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次-DockerCompose-配置-22-端口映射遇到的坑"><a href="#记一次-DockerCompose-配置-22-端口映射遇到的坑" class="headerlink" title="记一次 DockerCompose 配置 22 端口映射遇到的坑"></a>记一次 DockerCompose 配置 22 端口映射遇到的坑</h1><blockquote><p>在一次偶然的机会下触发了一个端口映射的bug</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>docker-compose.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">machine</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span><span class="token number">20.04</span>        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> <span class="token string">"ubuntu_2004"</span>        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always        <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> 9500<span class="token punctuation">:</span><span class="token number">80</span>            <span class="token punctuation">-</span> 9501<span class="token punctuation">:</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乍一看没啥毛病是吧，运行试一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> upCreating network <span class="token string">"ubuntu2_default"</span> with the default driverCreating ubuntu_2004 <span class="token punctuation">..</span>. errorERROR: <span class="token keyword">for</span> ubuntu_2004  Cannot create container <span class="token keyword">for</span> <span class="token function">service</span> machine: invalid port specification: <span class="token string">"570082"</span>ERROR: <span class="token keyword">for</span> machine  Cannot create container <span class="token keyword">for</span> <span class="token function">service</span> machine: invalid port specification: <span class="token string">"570082"</span>ERROR: Encountered errors <span class="token keyword">while</span> bringing up the project.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是 22 端口导致的问题，我们把配置文件的端口改为以下写法就可以解决问题了</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"9500:80"</span>    <span class="token punctuation">-</span> <span class="token string">"9501:22"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ssh </tag>
            
            <tag> 22-port </tag>
            
            <tag> bugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 ssh 桥接方式连接远程 docker 中的 ubuntu</title>
      <link href="/2022/11/11/docker/ssh-bridge/"/>
      <url>/2022/11/11/docker/ssh-bridge/</url>
      
        <content type="html"><![CDATA[<h1 id="通过-ssh-桥接方式连接远程-docker-中的-ubuntu"><a href="#通过-ssh-桥接方式连接远程-docker-中的-ubuntu" class="headerlink" title="通过 ssh 桥接方式连接远程 docker 中的 ubuntu"></a>通过 ssh 桥接方式连接远程 docker 中的 ubuntu</h1><blockquote><p>很多时候我们的 docker 环境都不在本地，而通过 ssh 连接远程服务器然后在通过 docker 命令进入容器貌似又有点繁琐，所以直接一步到位搞个跳板可以让我们直接访问到容器</p></blockquote><h2 id="配置容器"><a href="#配置容器" class="headerlink" title="配置容器"></a>配置容器</h2><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><ul><li><p>配置 <code>docker-compose.yml</code></p>  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">ccc</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span><span class="token number">20.04</span>        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> <span class="token string">"ubuntu_2004"</span>        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always        <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token string">"9500:80"</span>            <span class="token punctuation">-</span> <span class="token string">"9501:22"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入容器</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> ubuntu_2004 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 openssh-server</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 ssh 公钥</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/.ssh <span class="token operator">&amp;&amp;</span> <span class="token function">touch</span> ~/.ssh/authorized_keys <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>最后将公钥写入到 <code>~/.ssh/authorized_keys</code> 文件中，就完成了容器配置</p><h3 id="本地跳板配置"><a href="#本地跳板配置" class="headerlink" title="本地跳板配置"></a>本地跳板配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 远程主机(跳板)</span>Host ubuntu    Port <span class="token number">22</span>    User ubuntu    IdentityFile ~/.ssh/id_rsa<span class="token comment"># docker 容器</span>Host docker_ubuntu    HostName <span class="token number">0.0</span>.0.0    Port <span class="token number">9501</span>    User root    IdentityFile ~/.ssh/id_rsa    ProxyCommand <span class="token function">ssh</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-W</span> %h:%p ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过 <code>ssh docker_ubuntu</code> 命令就可以直接访问到远程 docker 容器了~</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ssh </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>script 命令</title>
      <link href="/2022/10/25/ubuntu/script/"/>
      <url>/2022/10/25/ubuntu/script/</url>
      
        <content type="html"><![CDATA[<h1 id="script-命令"><a href="#script-命令" class="headerlink" title="script 命令"></a>script 命令</h1><blockquote><p>有时我们需要在脚本中加入一些有进度状态的命令，为了既能让我们的脚本无需人工守候，又能方便的监测到这些命令的执行情况时，就该 script 登场了</p></blockquote><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-a</span> 以追加的形式，将命令的执行状态输出到指定的文件中<span class="token parameter variable">-c</span> 运行指定命令<span class="token parameter variable">-q</span> 让 <span class="token parameter variable">-c</span> 指定的命令以静默方式运行，比如删除文件时的确认提示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><ul><li><p>记录 scp 过程</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">script <span class="token parameter variable">-q</span> <span class="token parameter variable">-a</span> record.log <span class="token parameter variable">-c</span> <span class="token string">"scp xxx.zip remote:/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>当然 script 能做到的不止这些，你还可以使用该命令去记录每个 shell 用户的所有操作，等等</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ubuntu </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 token 访问 git 仓库</title>
      <link href="/2022/10/24/git/token-use/"/>
      <url>/2022/10/24/git/token-use/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-token-访问-git-仓库"><a href="#使用-token-访问-git-仓库" class="headerlink" title="使用 token 访问 git 仓库"></a>使用 token 访问 git 仓库</h1><blockquote><p>可以在无需增加密钥配置的情况下访问指定的单个或多个仓库</p></blockquote><p><code>这里我们以 gitlab 为例</code></p><h2 id="创建-access-tokens"><a href="#创建-access-tokens" class="headerlink" title="创建 access_tokens"></a>创建 access_tokens</h2><ul><li>创建 access token 的方式有两种<ul><li>项目级别，只对单个项目生效</li><li>帐号级别，对该帐号下的所有项目生效</li></ul></li></ul><h3 id="项目-access-token"><a href="#项目-access-token" class="headerlink" title="项目 access token"></a>项目 access token</h3><ol><li>先进入到指定项目</li><li>侧边栏 -&gt; Settings</li><li>Access tokens</li><li>配置 token 的名称，一般我们以用途为名，便于理解</li><li>到期时间如果有需要则设置，不设置则永不过期</li><li>权限范围按需设置</li><li>创建</li><li>将生成的 token 用个记事本保存下来先（离开页面或刷新后 token 都不会再显示了）</li></ol><h3 id="帐号级别"><a href="#帐号级别" class="headerlink" title="帐号级别"></a>帐号级别</h3><ol><li>右上角头像 -&gt; Preferences</li><li>侧边栏 -&gt; Access token</li><li>配置 token 的名称，一般我们以用途为名，便于理解</li><li>到期时间如果有需要则设置，不设置则永不过期</li><li>权限范围按需设置</li><li>创建</li><li>将生成的 token 用个记事本保存下来先（离开页面或刷新后 token 都不会再显示了）</li></ol><h2 id="配置仓库访问"><a href="#配置仓库访问" class="headerlink" title="配置仓库访问"></a>配置仓库访问</h2><ul><li><p>使用 token 创建仓库</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://oauth2:<span class="token variable">${token}</span>@xxx.git <span class="token comment"># 使用刚才创建的 token</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将已有仓库改为用 token 访问（同样适用于修改 token）</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rm</span> origin <span class="token comment"># 先删除掉已有的远端</span><span class="token function">git</span> remote <span class="token function">add</span> origin https://oauth2:<span class="token variable">${token}</span>@xxx.git <span class="token comment"># 使用刚才创建的 token</span><span class="token function">git</span> fetch origin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>使用 token 配置的仓库，能对远端仓库 pull/push 或其他操作的限制就取决于创建时配置的权限范围</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> token </tag>
            
            <tag> gitlab </tag>
            
            <tag> github </tag>
            
            <tag> svc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 HexoMatery 主题下配置 utteranc 评论插件</title>
      <link href="/2022/10/20/blog/hexo-matery-setup-utteranc/"/>
      <url>/2022/10/20/blog/hexo-matery-setup-utteranc/</url>
      
        <content type="html"><![CDATA[<h1 id="在-HexoMatery-主题下配置-utteranc-评论插件"><a href="#在-HexoMatery-主题下配置-utteranc-评论插件" class="headerlink" title="在 HexoMatery 主题下配置 utteranc 评论插件"></a>在 HexoMatery 主题下配置 utteranc 评论插件</h1><blockquote><p>HexoMatery 主题没有自带 utteranc 评论插件，当然我们也可以依葫芦画瓢地搞一个上去</p></blockquote><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>可以保存 utteranc 评论的公共库</li><li>可以提交修改的主题仓库</li></ul><h2 id="配置-utteranc-评论库"><a href="#配置-utteranc-评论库" class="headerlink" title="配置 utteranc 评论库"></a>配置 utteranc 评论库</h2><ol><li>先跟以往创建 github 仓库的方式一样创建一个公共代码库</li><li>安装 <a href="https://github.com/apps/utterances">utteranc app</a></li></ol><h2 id="将-utteranc-插件添加到主题仓库"><a href="#将-utteranc-插件添加到主题仓库" class="headerlink" title="将 utteranc 插件添加到主题仓库"></a>将 utteranc 插件添加到主题仓库</h2><ol><li><p>创建评论模版<br> 在主题 <code>layout\_partial\</code> 目录下创建 <code>utterances.ejs</code><br> <code>请修改文件中有注释说明的部分为你自己的配置信息</code></p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"comment_head"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"comment_headling"</span> style<span class="token operator">=</span><span class="token string">"font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-comments fa-fw"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>评论<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'contact_plan'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'comment_head'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"utterances-container"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content center-align"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"utterances_loading"</span> style<span class="token operator">=</span><span class="token string">"align-content: center;"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-spinner fa-spin"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">function</span> <span class="token function">_checkUtteranc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'utterances'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span>            <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.utterances_loading'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token number">1e3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>_checkUtteranc<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> utterances <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            utterances<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>            utterances<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            utterances<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'issue-term'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token comment">// 这里我们设置为使用页面标题作为 issue titile，更多的请参阅 utterances 官网</span>            utterances<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'repo'</span><span class="token punctuation">,</span><span class="token string">'CListery/hexo-utterances'</span><span class="token punctuation">)</span> <span class="token comment">// 这里设置你自己的 utteranc 评论仓库</span>            utterances<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">,</span><span class="token string">'comment'</span><span class="token punctuation">)</span> <span class="token comment">// 设置 issue 的标签</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'DarkMode'</span><span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>utterances<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'theme'</span><span class="token punctuation">,</span><span class="token string">'github-dark'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>utterances<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'theme'</span><span class="token punctuation">,</span><span class="token string">'github-light'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            utterances<span class="token punctuation">.</span>crossorigin <span class="token operator">=</span> <span class="token string">'anonymous'</span><span class="token punctuation">;</span>            utterances<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://utteranc.es/client.js'</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'utterances-container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>utterances<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">_checkUtteranc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改主题模版文件</p><ul><li><p>修改 <code>layout\_partial\post-detail.ejs</code><br>  在 <code>&lt;% if (theme.gitalk &amp;&amp; theme.gitalk.enable) { %&gt;</code> 上一行添加</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>utterances <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>utterances<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/utterances'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改 <code>layout\contact.ejs</code><br>  在 <code>&lt;% if (theme.gitalk &amp;&amp; theme.gitalk.enable) { %&gt;</code> 上一行添加</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>utterances <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>utterances<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/utterances'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改主题中的 <code>_config.yml</code><br>  添加以下内容</p>  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">utterances</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上就完成了 utteranc 评论插件的配置，重启 hexo 服务，不出意外就可以看到了</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Github Pages </tag>
            
            <tag> utteranc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Github Pages 的 hexo 博客搭建</title>
      <link href="/2022/10/19/blog/hexo-setup/"/>
      <url>/2022/10/19/blog/hexo-setup/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-Github-Pages-的-hexo-博客搭建"><a href="#基于-Github-Pages-的-hexo-博客搭建" class="headerlink" title="基于 Github Pages 的 hexo 博客搭建"></a>基于 Github Pages 的 hexo 博客搭建</h1><hr><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><h3 id="网站源码库"><a href="#网站源码库" class="headerlink" title="网站源码库"></a>网站源码库</h3><ul><li>私有仓库，存放你手写的博客源代码，简称 <code>库1</code></li></ul><h3 id="主题库"><a href="#主题库" class="headerlink" title="主题库"></a>主题库</h3><ul><li>私有仓库，存放你自定义的主题代码，将其作为 git submodule 添加到 <code>库1</code>，简称 <code>库2</code></li></ul><h3 id="Github-Pages-库-xxx-github-io"><a href="#Github-Pages-库-xxx-github-io" class="headerlink" title="Github Pages 库(xxx.github.io)"></a>Github Pages 库(xxx.github.io)</h3><ul><li>公共库，存放通过前两个仓库生成的网站页面，简称 <code>库3</code></li></ul><hr><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="给公共库配置部署密钥"><a href="#给公共库配置部署密钥" class="headerlink" title="给公共库配置部署密钥"></a>给公共库配置部署密钥</h3><blockquote><p>用于 <code>库1</code> 和 <code>库2</code> 的代码编译后自动部署到 <code>库3</code></p></blockquote><h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> ed25519 <span class="token parameter variable">-C</span> <span class="token string">"clistery.github.io"</span> <span class="token comment"># 这里的名字取什么都行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="上传密钥到-库3"><a href="#上传密钥到-库3" class="headerlink" title="上传密钥到 库3"></a>上传密钥到 库3</h4><ul><li>打开 <code>库3</code> -&gt; Settings -&gt; Security -&gt; Deploy keys -&gt; 将刚才生成的公钥填到这里面</li></ul><h3 id="配置-PAT-Personal-Access-Token"><a href="#配置-PAT-Personal-Access-Token" class="headerlink" title="配置 PAT(Personal Access Token)"></a>配置 PAT(Personal Access Token)</h3><blockquote><p>用于 Workflow 自动部署是可以对库进行读写</p></blockquote><ol><li>点击 Github 右上角头像 -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Tokens(classic) -&gt; Generate new token (classic)</li><li>Note 可以随意填写，最好自己看见能懂就行</li><li>Expiration 过期时间，可以选择不过期</li><li>Select scopes 中勾选 <code>workflow</code> 和 <code>write:packages</code></li><li>Generate token</li><li>然后把生成的 token(ghp_xxxxx) 保存下来备用</li></ol><h3 id="创建-Workflow"><a href="#创建-Workflow" class="headerlink" title="创建 Workflow"></a>创建 Workflow</h3><blockquote><p>让 库1 &amp; 库2 生成的代码能自动发布到 库3</p></blockquote><ul><li><p>打开 <code>库1</code> -&gt; Action -&gt; New workflow -&gt; Simple workflow -&gt; Configure<br>(或者直接在 <code>库1</code> 的根目录创建 <code>.github/workflows/xxx.yml</code>)</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Build &amp; Deploy <span class="token punctuation">-</span> Private to Public<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> main <span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token comment"># 检出 库1 &amp; 库2</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout    <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3.0.0    <span class="token key atrule">with</span><span class="token punctuation">:</span>      <span class="token key atrule">token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.CHK_PAT <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># Personal Access Token，稍后我们会在 库1 中进行配置</span>      <span class="token key atrule">submodules</span><span class="token punctuation">:</span> <span class="token string">'true'</span> <span class="token comment"># 检出 submodule</span>      <span class="token key atrule">persist-credentials</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># 设置 node 环境</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Prepare Node env    <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3    <span class="token key atrule">with</span><span class="token punctuation">:</span>      <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">16</span>    <span class="token comment"># 设置 hexo 环境并编译</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo    <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      npm i -g hexo-cli      npm i      hexo clean &amp;&amp; hexo g</span>    <span class="token comment"># 将生成的文件发布到 库3</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy    <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@v4.3.3    <span class="token key atrule">with</span><span class="token punctuation">:</span>      <span class="token key atrule">ssh-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.DEPLOY_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># 部署密钥的私钥，稍后我们会在 库1 中进行配置</span>      <span class="token key atrule">repository-name</span><span class="token punctuation">:</span> clistery/clistery.github.io <span class="token comment"># 库3的名字，格式为 user/repository</span>      <span class="token key atrule">branch</span><span class="token punctuation">:</span> main <span class="token comment"># 发布到库3的 main 分支</span>      <span class="token key atrule">folder</span><span class="token punctuation">:</span> public <span class="token comment"># 库3的类型，公共库</span>      <span class="token key atrule">single-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">commit-message</span><span class="token punctuation">:</span> <span class="token string">"Deploy by source"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="配置-Workflows-变量"><a href="#配置-Workflows-变量" class="headerlink" title="配置 Workflows 变量"></a>配置 Workflows 变量</h3><ul><li><p>打开 <code>库1</code> -&gt; Settings -&gt; Security -&gt; Secrets -&gt; Actions</p></li><li><p>配置 CHK_PAT</p><ol><li>点击 New repository secret</li><li>Name 输入 <code>CHK_PAT</code></li><li>Secret 输入 <a href="#%E9%85%8D%E7%BD%AE-PAT-Personal-Access-Token">配置 PAT(Personal Access Token)</a> 时生成的 token</li><li>Add secret</li></ol></li><li><p>配置 DEPLOY_KEY</p><ol><li>点击 New repository secret</li><li>Name 输入 <code>DEPLOY_KEY</code></li><li>Secret 输入 <a href="#%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5">生成密钥</a> 时生成的私钥</li><li>Add secret</li></ol></li></ul><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在一切配置妥当之后，你就可以向 <code>库1</code> 和 <code>库2</code> 中推送代码，workflow 就会自动将代码部署到 <code>库3</code> 中，不出意外的话就可以在 xxx.github.io 中看到更新了</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Github Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google AOSP 源码获取</title>
      <link href="/2022/10/19/android/aosp-get/"/>
      <url>/2022/10/19/android/aosp-get/</url>
      
        <content type="html"><![CDATA[<h1 id="AOSP"><a href="#AOSP" class="headerlink" title="AOSP"></a>AOSP</h1><blockquote><p>AOSP，全称”Android Open Source Project”，中文意为”Android 开放源代码项目”。发起者是谷歌，主要用途是移动设备的系统。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装-REPO"><a href="#安装-REPO" class="headerlink" title="安装 REPO"></a>安装 REPO</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/bin<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=~</span>/bin:<span class="token environment constant">$PATH</span><span class="token function">curl</span> https://storage.googleapis.com/git-repo-downloads/repo <span class="token operator">&gt;</span> ~/bin/repo<span class="token comment">## 如果上述 URL 不可访问，可以用下面的：</span><span class="token comment">## curl -sSL  'https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/master/repo?format=TEXT' |base64 -d &gt; ~/bin/repo</span><span class="token function">chmod</span> a+x ~/bin/repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下载每月更新的初始化包"><a href="#下载每月更新的初始化包" class="headerlink" title="下载每月更新的初始化包"></a>下载每月更新的初始化包</h2><p>由于大陆受到 GFW 的限制，所以直接访问 Google 代码仓库会受到限制，所以这里我们通过 Mirror 镜像加速</p><blockquote><p>这里我们使用 科大源 的镜像仓库<br><code>第一次同步数据量特别大，如果网络不稳定，中间失败就要从头再来了。所以我们提供了打包的 AOSP 镜像，为一个 tar 包，大约 200G（单文件 200G，注意你的磁盘格式要支持）。这样你 就可以通过 HTTP(S) 的方式下载，该方法支持断点续传。</code></p></blockquote><ul><li><a href="https://mirrors.ustc.edu.cn/aosp-monthly/">下载地址</a></li></ul><p><em>注意！下载完成后请检查 checksum 是否匹配，避免重复操作</em></p><ul><li>下载完成后解压到有 200G 可用空间的分区即可</li></ul><h2 id="同步代码"><a href="#同步代码" class="headerlink" title="同步代码"></a>同步代码</h2><h3 id="设置分支"><a href="#设置分支" class="headerlink" title="设置分支"></a>设置分支</h3><ul><li><p>默认同步 master 分支</p></li><li><p>可以通过指定版本的方式切换分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">repo init <span class="token parameter variable">-b</span> android-13.0.0_r11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><a href="https://source.android.com/source/build-numbers.html#source-code-tags-and-builds">Android 版本列表</a> </p></li><li><p>也可以通过查看分支的方式本地查看版本号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> .repo/manifests<span class="token function">git</span> branch <span class="token parameter variable">-avv</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>首次切换完成后可能会报错，可以无视，我们只需要检查 manifest 文件查看是否切换成功<br><code>cat .repo/manifests.git/config</code></p><pre class="line-numbers language-config" data-language="config"><code class="language-config">[branch "default"]    remote = origin    merge = refs/heads/android-13.0.0_r11 # 这里原本是 master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="同步拉取"><a href="#同步拉取" class="headerlink" title="同步拉取"></a>同步拉取</h3><ul><li>通过 <code>repo sync</code> 命令进行同步就可以完成最后的代码拉取</li></ul><h2 id="REPO-命令"><a href="#REPO-命令" class="headerlink" title="REPO 命令"></a>REPO 命令</h2><h3 id="开启本地分支"><a href="#开启本地分支" class="headerlink" title="开启本地分支"></a>开启本地分支</h3><p><code>repo start my_branch --all</code></p><h3 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h3><p><code>repo branches</code></p><h3 id="丢弃本地改动"><a href="#丢弃本地改动" class="headerlink" title="丢弃本地改动"></a>丢弃本地改动</h3><p><code>repo forall -c git reset --hard</code></p><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p><code>repo checkout my_branch1</code></p><h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p><code>repo status</code></p><h3 id="同步指定的项目"><a href="#同步指定的项目" class="headerlink" title="同步指定的项目"></a>同步指定的项目</h3><p><code>repo sync platform/prebuilts/rust</code></p><ul><li>可以通过查看 <code>.repo/manifests/default.xml</code> 文件获取到项目名</li></ul><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul><li>查看 repo 运行过程中执行的 git 命令<br><code>export REPO_TRACE=1</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> aosp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> google </tag>
            
            <tag> android </tag>
            
            <tag> aosp </tag>
            
            <tag> repo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何清除 Android Button 中自带的 padding</title>
      <link href="/2022/10/19/android/button-without-padding/"/>
      <url>/2022/10/19/android/button-without-padding/</url>
      
        <content type="html"><![CDATA[<blockquote><p>去除 Android 自带的 padding 效果有两种方式</p></blockquote><ol><li><p>布局文件中去除</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingEnd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>minWidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代码去除</p>  <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">btn<span class="token punctuation">.</span>minimumHeight <span class="token operator">=</span> <span class="token number">0</span>btn<span class="token punctuation">.</span>minimumWidth <span class="token operator">=</span> <span class="token number">0</span>btn<span class="token punctuation">.</span>minWidth <span class="token operator">=</span> <span class="token number">0</span>btn<span class="token punctuation">.</span>minHeight <span class="token operator">=</span> <span class="token number">0</span>btn<span class="token punctuation">.</span><span class="token function">setPadding</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>it<span class="token punctuation">.</span>layoutParams <span class="token operator">=</span> it<span class="token punctuation">.</span>layoutParams<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    width <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>    height <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> widgets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scp 命令</title>
      <link href="/2022/10/18/ubuntu/scp/"/>
      <url>/2022/10/18/ubuntu/scp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux scp 命令用于 Linux 之间复制文件和目录。<br>scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。<br>scp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版。</p></blockquote><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-B</span> 使用批处理模式（传输过程中不询问传输口令或短语）<span class="token parameter variable">-C</span> 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）<span class="token parameter variable">-p</span> 保留原文件的修改时间，访问时间和访问权限。<span class="token parameter variable">-q</span> 不显示传输进度条。<span class="token parameter variable">-r</span> 递归复制整个目录。<span class="token parameter variable">-v</span> 详细方式显示输出。scp和ssh<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。<span class="token parameter variable">-l</span> limit 限定用户所能使用的带宽，以Kbit/s为单位。<span class="token parameter variable">-P</span> port：注意是大写的P, port是指定数据传输用到的端口号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>从本地复制到远程</p><ul><li><p>复制单个文件</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> xx.txt root@remote:/<span class="token function">scp</span> xx.txt remote:/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>复制目录</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> <span class="token function">dir</span> remote:/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>从远程复制到本地<br>  将参数顺序颠倒即可</p></li><li><p>指定端口</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-P</span> <span class="token number">3301</span> xx.txt remote:/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ubuntu </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsync 命令</title>
      <link href="/2022/10/18/ubuntu/rsync/"/>
      <url>/2022/10/18/ubuntu/rsync/</url>
      
        <content type="html"><![CDATA[<h1 id="rsync-命令"><a href="#rsync-命令" class="headerlink" title="rsync 命令"></a>rsync 命令</h1><blockquote><p>rsync 全称 Remote Sync.<br>rsync是linux系统下的数据镜像备份工具。使用快速增量备份工具Remote Sync可以远程同步，支持本地复制，或者与其他SSH、rsync主机同步。</p></blockquote><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-v, <span class="token parameter variable">--verbose</span> 详细模式输出-q, <span class="token parameter variable">--quiet</span> 精简输出模式-c, <span class="token parameter variable">--checksum</span> 打开校验开关，强制对文件传输进行校验-a, <span class="token parameter variable">--archive</span> 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD-r, <span class="token parameter variable">--recursive</span> 对子目录以递归模式处理-R, <span class="token parameter variable">--relative</span> 使用相对路径信息-b, <span class="token parameter variable">--backup</span> 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。--backup-dir 将备份文件<span class="token punctuation">(</span>如~filename<span class="token punctuation">)</span>存放在在目录下。<span class="token parameter variable">-suffix</span><span class="token operator">=</span>SUFFIX 定义备份文件前缀-u, <span class="token parameter variable">--update</span> 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。<span class="token punctuation">(</span>不覆盖更新的文件<span class="token punctuation">)</span>-l, <span class="token parameter variable">--links</span> 保留软链结-L, --copy-links 想对待常规文件一样处理软链结--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结--safe-links 忽略指向SRC路径目录树以外的链结-H, --hard-links 保留硬链结-p, <span class="token parameter variable">--perms</span> 保持文件权限-o, <span class="token parameter variable">--owner</span> 保持文件属主信息-g, <span class="token parameter variable">--group</span> 保持文件属组信息-D, <span class="token parameter variable">--devices</span> 保持设备文件信息-t, <span class="token parameter variable">--times</span> 保持文件时间信息-S, <span class="token parameter variable">--sparse</span> 对稀疏文件进行特殊处理以节省DST的空间-n, --dry-run现实哪些文件将被传输-W, --whole-file 拷贝文件，不进行增量检测-x, --one-file-system 不要跨越文件系统边界-B, --block-size<span class="token operator">=</span>SIZE 检验算法使用的块尺寸，默认是700字节-e, <span class="token parameter variable">--rsh</span><span class="token operator">=</span>COMMAND 指定使用rsh、ssh方式进行数据同步--rsync-path<span class="token operator">=</span><span class="token environment constant">PATH</span> 指定远程服务器上的rsync命令所在路径信息-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件<span class="token parameter variable">--existing</span> 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件<span class="token parameter variable">--delete</span> 删除那些DST中SRC没有的文件--delete-excluded 同样删除接收端那些被该选项指定排除的文件--delete-after 传输结束以后再删除--ignore-errors 及时出现IO错误也进行删除--max-delete<span class="token operator">=</span>NUM 最多删除NUM个文件<span class="token parameter variable">--partial</span> 保留那些因故没有完全传输的文件，以是加快随后的再次传输<span class="token parameter variable">--force</span> 强制删除目录，即使不为空--numeric-ids 不将数字的用户和组ID匹配为用户名和组名<span class="token parameter variable">--timeout</span><span class="token operator">=</span>TIME IP超时时间，单位为秒-I, --ignore-times 不跳过那些有同样的时间和长度的文件--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间--modify-window<span class="token operator">=</span>NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0<span class="token parameter variable">-T</span> --temp-dir<span class="token operator">=</span>DIR 在DIR中创建临时文件--compare-dest<span class="token operator">=</span>DIR 同样比较DIR中的文件来决定是否需要备份<span class="token parameter variable">-P</span> 等同于 <span class="token parameter variable">--partial</span><span class="token parameter variable">--progress</span> 显示备份过程-z, <span class="token parameter variable">--compress</span> 对备份的文件在传输时进行压缩处理<span class="token parameter variable">--exclude</span><span class="token operator">=</span>PATTERN 指定排除不需要传输的文件模式<span class="token parameter variable">--include</span><span class="token operator">=</span>PATTERN 指定不排除而需要传输的文件模式--exclude-from<span class="token operator">=</span>FILE 排除FILE中指定模式的文件--include-from<span class="token operator">=</span>FILE 不排除FILE指定模式匹配的文件<span class="token parameter variable">--version</span> 打印版本信息<span class="token parameter variable">--address</span> 绑定到特定的地址<span class="token parameter variable">--config</span><span class="token operator">=</span>FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件<span class="token parameter variable">--port</span><span class="token operator">=</span>PORT 指定其他的rsync服务端口--blocking-io 对远程shell使用阻塞IO<span class="token parameter variable">-stats</span> 给出某些文件的传输状态<span class="token parameter variable">--progress</span> 在传输时现实传输过程--log-format<span class="token operator">=</span>formAT 指定日志文件格式--password-file<span class="token operator">=</span>FILE 从FILE中得到密码<span class="token parameter variable">--bwlimit</span><span class="token operator">=</span>KBPS 限制I/O带宽，KBytes per second-h, <span class="token parameter variable">--help</span> 显示帮助信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li><p>从 remote 断点续传 xxx.tar 到当前目录</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rsync</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--rsh</span><span class="token operator">=</span>ssh remote:xxx.tar <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>从 remote 传输目录 /xxx/xxx 到当前目录</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rsync</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--rsh</span><span class="token operator">=</span>ssh remote:/xxx/xxx <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ubuntu </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jobs 命令</title>
      <link href="/2022/10/18/ubuntu/jobs/"/>
      <url>/2022/10/18/ubuntu/jobs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>jobs是Linux命令。jobs命令显示了当前shell环境中已启动的作业状态。如果JobID参数没有指定特定作业，就显示所有的活动的作业的状态信息。如果报告了一个作业的终止，shell从当前的shell环境已知的列表中删除作业的进程标识。</p></blockquote><ul><li>job 命令通常与 wait、fg、bg、kill 命令一起使用</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>命令挂起</p><ul><li>使用 wget 下载一个文件 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span> <span class="token variable">${remote_file}</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>然后在下载过程中按下 <code>ctrl+z</code> 将任务挂起 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">downloading<span class="token punctuation">..</span>.^Z <span class="token comment"># 这时按下了 `ctrl+z`</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  + <span class="token number">140578</span> suspended  <span class="token function">wget</span> <span class="token variable">${remote_file}</span> <span class="token builtin class-name">.</span> <span class="token comment"># 下载任务被挂起，任务 id 为 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>通过 jobs -l 查看被挂起的任务 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">jobs</span> <span class="token parameter variable">-l</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  + <span class="token number">140578</span> suspended  <span class="token function">wget</span> <span class="token variable">${remote_file}</span> <span class="token builtin class-name">.</span> <span class="token comment"># 有一个 id 为 1 的任务 pid 为 140578</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>将任务通过 fg 恢复到前台继续执行</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">fg</span> %1 <span class="token comment"># % 是必须的，%1 标识任务 id 为 1 的任务</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  + <span class="token number">140578</span> continued  <span class="token function">wget</span> <span class="token variable">${remote_file}</span> <span class="token builtin class-name">.</span>downloading<span class="token punctuation">..</span>. <span class="token comment"># 下载任务已经恢复到前台并继续下载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 这时我们仍然可以再次使用 <code>ctrl+z</code> 将任务挂起</p></li><li><p>其他 bg、wait、kill 与 fg 的使用方式类似，都是通过 <code>%{任务id}</code> 的方式进行对任务的操作，这里就不再过多讨论</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ubuntu </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>at 命令</title>
      <link href="/2022/10/18/ubuntu/at/"/>
      <url>/2022/10/18/ubuntu/at/</url>
      
        <content type="html"><![CDATA[<blockquote><p>at 命令可以将某些命令或任务放到指定的时间自动执行</p></blockquote><h5 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h5><blockquote><p><code>at 命令与 jobs 命令有所不同，当登录用户退出后 jobs 命令的任务会被取消，而 at 命令则不会</code></p></blockquote><h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-V</span> 输出版本号<span class="token parameter variable">-f</span> 指定脚本文件<span class="token parameter variable">-l</span> 查看查看任务队列，等同于atq<span class="token parameter variable">-d</span> 删除指定任务，等同于atrm<span class="token parameter variable">-r</span> 删除指定任务，等同于atrm<span class="token parameter variable">-c</span> 打印任务的内容到标准输出atrm 删除指定任务atq 查看任务队列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>创建指定时间执行命令的任务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ at <span class="token number">17</span>:13 <span class="token comment"># 设定当时间到达 17:13 时</span>at<span class="token operator">&gt;</span> <span class="token builtin class-name">echo</span> <span class="token string">"hello"</span> <span class="token operator">&gt;&gt;</span> a <span class="token comment"># 将 `hello` 输出到 a 文件中</span>at<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>EOT<span class="token operator">&gt;</span> <span class="token comment"># 按下 `ctrl+d` 创建任务</span>job <span class="token number">9</span> at Tue Oct <span class="token number">18</span> <span class="token number">17</span>:13:00 <span class="token number">2022</span> <span class="token comment"># 返回任务 id 为 9 并将在指定的时间执行该任务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建指定时间执行脚本的任务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">at <span class="token parameter variable">-f</span> upload.sh <span class="token number">17</span>:13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者也可以使用立即执行的方式来实现等同于 <code>&amp;</code> 的效果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">at <span class="token parameter variable">-f</span> upload.sh now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ubuntu </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 示例</title>
      <link href="/2022/10/18/markdown-sample/"/>
      <url>/2022/10/18/markdown-sample/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-使用示例"><a href="#Markdown-使用示例" class="headerlink" title="Markdown 使用示例"></a>Markdown 使用示例</h1><hr><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p><p>示例：</p><p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p><h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">这是一个一级标题============================这是一个二级标题--------------------------------------------------### 这是一个三级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：</p><pre class="line-numbers language-none"><code class="language-none"># H1## H2### H3#### H4##### H5###### H6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p><p>示例：</p><p>这是去往 <a href="https://clistery.github.io/">本人博客</a> 的链接。</p><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p><p>示例：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p><p>示例：</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p><p>示例：</p><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p><p>示例：</p><p>让我们聊聊 <code>html</code>。</p><h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p><p>示例：</p><pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p><p>示例：</p><p><img src="https://cn.gravatar.com/userimage/185917535/6a87cb72111639876f34134e3589af12.jpg?size=100" alt="我的头像"></p><h3 id="10-删除线"><a href="#10-删除线" class="headerlink" title="10. 删除线"></a>10. 删除线</h3><p>使用 ~~ 表示删除线。</p><p><del>这是一段错误的文本。</del></p><h3 id="11-加强的代码块"><a href="#11-加强的代码块" class="headerlink" title="11. 加强的代码块"></a>11. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p><p>非代码示例：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install vim-gnome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Python 示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@requires_authorization</span><span class="token keyword">def</span> <span class="token function">somefunc</span><span class="token punctuation">(</span>param1<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> param2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''A docstring'''</span>    <span class="token keyword">if</span> param1 <span class="token operator">&gt;</span> param2<span class="token punctuation">:</span> <span class="token comment"># interesting</span>        <span class="token keyword">print</span> <span class="token string">'Greater'</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>param2 <span class="token operator">-</span> param1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> message <span class="token operator">=</span> <span class="token triple-quoted-string string">'''interpreter... prompt'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript 示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/</span><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> tmp<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>n <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">+=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="13-Html-标签"><a href="#13-Html-标签" class="headerlink" title="13. Html 标签"></a>13. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>值班人员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>星期一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>星期二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>星期三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>李强<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>张明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>王平<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table>    <tbody><tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Ubuntu 中用命令行查看流量占用</title>
      <link href="/2022/10/18/ubuntu/nethogs/"/>
      <url>/2022/10/18/ubuntu/nethogs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用 nethogs 工具，我们可以 top 命令一样查看网卡\进程的流量占用情况</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nethogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nethogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果没有报错的话你就会看到下面的界面<br><img src="/medias/images/nethogs.png" alt="nethogs运行效果"></p></blockquote><h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-V</span> <span class="token builtin class-name">:</span> 显示版本<span class="token parameter variable">-h</span> <span class="token builtin class-name">:</span> 显示帮助信息<span class="token parameter variable">-b</span> <span class="token builtin class-name">:</span> 比 <span class="token parameter variable">-t</span> 更为详细的跟踪模式<span class="token parameter variable">-d</span> <span class="token builtin class-name">:</span> 数据刷新时间 如 nethogs <span class="token parameter variable">-d</span> <span class="token number">1</span> 就是每秒刷新一次<span class="token parameter variable">-v</span> <span class="token builtin class-name">:</span> 查看模式<span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">=</span> KB/s, <span class="token number">1</span> <span class="token operator">=</span> 显示总流量单位KB, <span class="token number">2</span> <span class="token operator">=</span> 显示总流量单位B, <span class="token number">3</span> <span class="token operator">=</span> 显示总流量单位MB<span class="token punctuation">)</span>. 默认为 <span class="token number">0</span>.<span class="token parameter variable">-c</span> <span class="token builtin class-name">:</span> 刷新次数<span class="token parameter variable">-t</span> <span class="token builtin class-name">:</span> 跟踪模式在 nethogs 运行过程中按下<span class="token punctuation">(</span>类似 <span class="token function">top</span> 快捷键<span class="token punctuation">)</span>:q: 退出s: 按发送流量排序r: 按接收流量排序m: 切换查看模式 <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> net </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
